using System;
using System.Runtime.InteropServices;
namespace Gio {
	public ref struct Action
	{
		private IntPtr _pointer;
		public Action(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator Action(IntPtr pointer) => new Action(pointer, checkType: true);
		public static explicit operator IntPtr(Action value) => value._pointer;
		public static bool name_is_valid(string action_name) => GioInterop.g_action_name_is_valid(action_name);
		public static bool parse_detailed_name(string detailed_name, string action_name, out GLib.Variant target_value, out GLib.Error error) => GioInterop.g_action_parse_detailed_name(detailed_name, action_name, out target_value, out error);
		public static string print_detailed_name(string action_name, GLib.Variant target_value) => GioInterop.g_action_print_detailed_name(action_name, target_value);
		public void activate(GLib.Variant parameter) => Gio.GioInterop.g_action_activate(this, parameter);
		public void change_state(GLib.Variant value) => Gio.GioInterop.g_action_change_state(this, value);
		public bool get_enabled() => Gio.GioInterop.g_action_get_enabled(this);
		public string get_name() => Gio.GioInterop.g_action_get_name(this);
		public GLib.VariantType get_parameter_type() => Gio.GioInterop.g_action_get_parameter_type(this);
		public GLib.Variant get_state() => Gio.GioInterop.g_action_get_state(this);
		public GLib.Variant get_state_hint() => Gio.GioInterop.g_action_get_state_hint(this);
		public GLib.VariantType get_state_type() => Gio.GioInterop.g_action_get_state_type(this);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_action_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct SimpleAction
	{
		private IntPtr _pointer;
		public SimpleAction(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator SimpleAction(IntPtr pointer) => new SimpleAction(pointer, checkType: true);
		public static explicit operator IntPtr(SimpleAction value) => value._pointer;
		public static implicit operator GObject.Object(SimpleAction value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator SimpleAction(GObject.Object value) => new SimpleAction((IntPtr)value, checkType: true);
		public static Gio.SimpleAction @new(string name, GLib.VariantType parameter_type) => GioInterop.g_simple_action_new(name, parameter_type);
		public static Gio.SimpleAction new_stateful(string name, GLib.VariantType parameter_type, GLib.Variant state) => GioInterop.g_simple_action_new_stateful(name, parameter_type, state);
		public void set_enabled(bool enabled) => Gio.GioInterop.g_simple_action_set_enabled(this, enabled);
		public void set_state(GLib.Variant value) => Gio.GioInterop.g_simple_action_set_state(this, value);
		public void set_state_hint(GLib.Variant state_hint) => Gio.GioInterop.g_simple_action_set_state_hint(this, state_hint);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_simple_action_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct ActionEntry
	{
		private IntPtr _pointer;
		public ActionEntry(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator ActionEntry(IntPtr pointer) => new ActionEntry(pointer, checkType: true);
		public static explicit operator IntPtr(ActionEntry value) => value._pointer;
	}
	public ref struct ActionGroup
	{
		private IntPtr _pointer;
		public ActionGroup(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator ActionGroup(IntPtr pointer) => new ActionGroup(pointer, checkType: true);
		public static explicit operator IntPtr(ActionGroup value) => value._pointer;
		public void action_added(string action_name) => Gio.GioInterop.g_action_group_action_added(this, action_name);
		public void action_enabled_changed(string action_name, bool enabled) => Gio.GioInterop.g_action_group_action_enabled_changed(this, action_name, enabled);
		public void action_removed(string action_name) => Gio.GioInterop.g_action_group_action_removed(this, action_name);
		public void action_state_changed(string action_name, GLib.Variant state) => Gio.GioInterop.g_action_group_action_state_changed(this, action_name, state);
		public void activate_action(string action_name, GLib.Variant parameter) => Gio.GioInterop.g_action_group_activate_action(this, action_name, parameter);
		public void change_action_state(string action_name, GLib.Variant value) => Gio.GioInterop.g_action_group_change_action_state(this, action_name, value);
		public bool get_action_enabled(string action_name) => Gio.GioInterop.g_action_group_get_action_enabled(this, action_name);
		public GLib.VariantType get_action_parameter_type(string action_name) => Gio.GioInterop.g_action_group_get_action_parameter_type(this, action_name);
		public GLib.Variant get_action_state(string action_name) => Gio.GioInterop.g_action_group_get_action_state(this, action_name);
		public GLib.Variant get_action_state_hint(string action_name) => Gio.GioInterop.g_action_group_get_action_state_hint(this, action_name);
		public GLib.VariantType get_action_state_type(string action_name) => Gio.GioInterop.g_action_group_get_action_state_type(this, action_name);
		public bool has_action(string action_name) => Gio.GioInterop.g_action_group_has_action(this, action_name);
		public System.IntPtr list_actions() => Gio.GioInterop.g_action_group_list_actions(this);
		public bool query_action(string action_name, System.IntPtr enabled, out GLib.VariantType parameter_type, out GLib.VariantType state_type, out GLib.Variant state_hint, out GLib.Variant state) => Gio.GioInterop.g_action_group_query_action(this, action_name, enabled, out parameter_type, out state_type, out state_hint, out state);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_action_group_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct ActionGroupInterface
	{
		private IntPtr _pointer;
		public ActionGroupInterface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator ActionGroupInterface(IntPtr pointer) => new ActionGroupInterface(pointer, checkType: true);
		public static explicit operator IntPtr(ActionGroupInterface value) => value._pointer;
	}
	public ref struct ActionInterface
	{
		private IntPtr _pointer;
		public ActionInterface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator ActionInterface(IntPtr pointer) => new ActionInterface(pointer, checkType: true);
		public static explicit operator IntPtr(ActionInterface value) => value._pointer;
	}
	public ref struct ActionMap
	{
		private IntPtr _pointer;
		public ActionMap(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator ActionMap(IntPtr pointer) => new ActionMap(pointer, checkType: true);
		public static explicit operator IntPtr(ActionMap value) => value._pointer;
		public void add_action(Gio.Action action) => Gio.GioInterop.g_action_map_add_action(this, action);
		public void add_action_entries(System.IntPtr entries, int n_entries, System.IntPtr user_data) => Gio.GioInterop.g_action_map_add_action_entries(this, entries, n_entries, user_data);
		public Gio.Action lookup_action(string action_name) => Gio.GioInterop.g_action_map_lookup_action(this, action_name);
		public void remove_action(string action_name) => Gio.GioInterop.g_action_map_remove_action(this, action_name);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_action_map_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct ActionMapInterface
	{
		private IntPtr _pointer;
		public ActionMapInterface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator ActionMapInterface(IntPtr pointer) => new ActionMapInterface(pointer, checkType: true);
		public static explicit operator IntPtr(ActionMapInterface value) => value._pointer;
	}
	public ref struct AppInfo
	{
		private IntPtr _pointer;
		public AppInfo(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator AppInfo(IntPtr pointer) => new AppInfo(pointer, checkType: true);
		public static explicit operator IntPtr(AppInfo value) => value._pointer;
		public static Gio.AppInfo create_from_commandline(string commandline, string application_name, Gio.AppInfoCreateFlags flags, out GLib.Error error) => GioInterop.g_app_info_create_from_commandline(commandline, application_name, flags, out error);
		public static System.IntPtr get_all() => GioInterop.g_app_info_get_all();
		public static System.IntPtr get_all_for_type(string content_type) => GioInterop.g_app_info_get_all_for_type(content_type);
		public static Gio.AppInfo get_default_for_type(string content_type, bool must_support_uris) => GioInterop.g_app_info_get_default_for_type(content_type, must_support_uris);
		public static Gio.AppInfo get_default_for_uri_scheme(string uri_scheme) => GioInterop.g_app_info_get_default_for_uri_scheme(uri_scheme);
		public static System.IntPtr get_fallback_for_type(string content_type) => GioInterop.g_app_info_get_fallback_for_type(content_type);
		public static System.IntPtr get_recommended_for_type(string content_type) => GioInterop.g_app_info_get_recommended_for_type(content_type);
		public static bool launch_default_for_uri(string uri, Gio.AppLaunchContext launch_context, out GLib.Error error) => GioInterop.g_app_info_launch_default_for_uri(uri, launch_context, out error);
		public static void launch_default_for_uri_async(string uri, Gio.AppLaunchContext launch_context, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => GioInterop.g_app_info_launch_default_for_uri_async(uri, launch_context, cancellable, callback, user_data);
		public static bool launch_default_for_uri_finish(Gio.AsyncResult result, out GLib.Error error) => GioInterop.g_app_info_launch_default_for_uri_finish(result, out error);
		public static void reset_type_associations(string content_type) => GioInterop.g_app_info_reset_type_associations(content_type);
		public bool add_supports_type(string content_type, out GLib.Error error) => Gio.GioInterop.g_app_info_add_supports_type(this, content_type, out error);
		public bool can_delete() => Gio.GioInterop.g_app_info_can_delete(this);
		public bool can_remove_supports_type() => Gio.GioInterop.g_app_info_can_remove_supports_type(this);
		public bool delete() => Gio.GioInterop.g_app_info_delete(this);
		public Gio.AppInfo dup() => Gio.GioInterop.g_app_info_dup(this);
		public bool equal(Gio.AppInfo appinfo2) => Gio.GioInterop.g_app_info_equal(this, appinfo2);
		public System.IntPtr get_commandline() => Gio.GioInterop.g_app_info_get_commandline(this);
		public string get_description() => Gio.GioInterop.g_app_info_get_description(this);
		public string get_display_name() => Gio.GioInterop.g_app_info_get_display_name(this);
		public System.IntPtr get_executable() => Gio.GioInterop.g_app_info_get_executable(this);
		public Gio.Icon get_icon() => Gio.GioInterop.g_app_info_get_icon(this);
		public string get_id() => Gio.GioInterop.g_app_info_get_id(this);
		public string get_name() => Gio.GioInterop.g_app_info_get_name(this);
		public System.IntPtr get_supported_types() => Gio.GioInterop.g_app_info_get_supported_types(this);
		public bool launch(System.IntPtr files, Gio.AppLaunchContext launch_context, out GLib.Error error) => Gio.GioInterop.g_app_info_launch(this, files, launch_context, out error);
		public bool launch_uris(System.IntPtr uris, Gio.AppLaunchContext launch_context, out GLib.Error error) => Gio.GioInterop.g_app_info_launch_uris(this, uris, launch_context, out error);
		public bool remove_supports_type(string content_type, out GLib.Error error) => Gio.GioInterop.g_app_info_remove_supports_type(this, content_type, out error);
		public bool set_as_default_for_extension(System.IntPtr extension, out GLib.Error error) => Gio.GioInterop.g_app_info_set_as_default_for_extension(this, extension, out error);
		public bool set_as_default_for_type(string content_type, out GLib.Error error) => Gio.GioInterop.g_app_info_set_as_default_for_type(this, content_type, out error);
		public bool set_as_last_used_for_type(string content_type, out GLib.Error error) => Gio.GioInterop.g_app_info_set_as_last_used_for_type(this, content_type, out error);
		public bool should_show() => Gio.GioInterop.g_app_info_should_show(this);
		public bool supports_files() => Gio.GioInterop.g_app_info_supports_files(this);
		public bool supports_uris() => Gio.GioInterop.g_app_info_supports_uris(this);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_app_info_get_type")]
		public static extern GLib.GType TypeOf();
	}
	[Flags]
	public enum AppInfoCreateFlags
	{
		none = 0,
		needs_terminal = 1,
		supports_uris = 2,
		supports_startup_notification = 4,
	}
	public ref struct AppLaunchContext
	{
		private IntPtr _pointer;
		public AppLaunchContext(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator AppLaunchContext(IntPtr pointer) => new AppLaunchContext(pointer, checkType: true);
		public static explicit operator IntPtr(AppLaunchContext value) => value._pointer;
		public static implicit operator GObject.Object(AppLaunchContext value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator AppLaunchContext(GObject.Object value) => new AppLaunchContext((IntPtr)value, checkType: true);
		public static Gio.AppLaunchContext @new() => GioInterop.g_app_launch_context_new();
		public string get_display(Gio.AppInfo info, System.IntPtr files) => Gio.GioInterop.g_app_launch_context_get_display(this, info, files);
		public System.IntPtr get_environment() => Gio.GioInterop.g_app_launch_context_get_environment(this);
		public string get_startup_notify_id(Gio.AppInfo info, System.IntPtr files) => Gio.GioInterop.g_app_launch_context_get_startup_notify_id(this, info, files);
		public void launch_failed(string startup_notify_id) => Gio.GioInterop.g_app_launch_context_launch_failed(this, startup_notify_id);
		public void setenv(string variable, string value) => Gio.GioInterop.g_app_launch_context_setenv(this, variable, value);
		public void unsetenv(string variable) => Gio.GioInterop.g_app_launch_context_unsetenv(this, variable);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_app_launch_context_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct Cancellable
	{
		private IntPtr _pointer;
		public Cancellable(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator Cancellable(IntPtr pointer) => new Cancellable(pointer, checkType: true);
		public static explicit operator IntPtr(Cancellable value) => value._pointer;
		public static implicit operator GObject.Object(Cancellable value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator Cancellable(GObject.Object value) => new Cancellable((IntPtr)value, checkType: true);
		public static Gio.Cancellable @new() => GioInterop.g_cancellable_new();
		public static Gio.Cancellable get_current() => GioInterop.g_cancellable_get_current();
		public void cancel() => Gio.GioInterop.g_cancellable_cancel(this);
		public ulong connect(System.IntPtr callback, System.IntPtr data, System.IntPtr data_destroy_func) => Gio.GioInterop.g_cancellable_connect(this, callback, data, data_destroy_func);
		public void disconnect(ulong handler_id) => Gio.GioInterop.g_cancellable_disconnect(this, handler_id);
		public int get_fd() => Gio.GioInterop.g_cancellable_get_fd(this);
		public bool is_cancelled() => Gio.GioInterop.g_cancellable_is_cancelled(this);
		public bool make_pollfd(GLib.PollFD pollfd) => Gio.GioInterop.g_cancellable_make_pollfd(this, pollfd);
		public void pop_current() => Gio.GioInterop.g_cancellable_pop_current(this);
		public void push_current() => Gio.GioInterop.g_cancellable_push_current(this);
		public void release_fd() => Gio.GioInterop.g_cancellable_release_fd(this);
		public void reset() => Gio.GioInterop.g_cancellable_reset(this);
		public bool set_error_if_cancelled(out GLib.Error error) => Gio.GioInterop.g_cancellable_set_error_if_cancelled(this, out error);
		public GLib.Source source_new() => Gio.GioInterop.g_cancellable_source_new(this);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_cancellable_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct AsyncResult
	{
		private IntPtr _pointer;
		public AsyncResult(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator AsyncResult(IntPtr pointer) => new AsyncResult(pointer, checkType: true);
		public static explicit operator IntPtr(AsyncResult value) => value._pointer;
		public GObject.Object get_source_object() => Gio.GioInterop.g_async_result_get_source_object(this);
		public System.IntPtr get_user_data() => Gio.GioInterop.g_async_result_get_user_data(this);
		public bool is_tagged(System.IntPtr source_tag) => Gio.GioInterop.g_async_result_is_tagged(this, source_tag);
		public bool legacy_propagate_error(out GLib.Error error) => Gio.GioInterop.g_async_result_legacy_propagate_error(this, out error);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_async_result_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct Icon
	{
		private IntPtr _pointer;
		public Icon(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator Icon(IntPtr pointer) => new Icon(pointer, checkType: true);
		public static explicit operator IntPtr(Icon value) => value._pointer;
		public static Gio.Icon deserialize(GLib.Variant value) => GioInterop.g_icon_deserialize(value);
		public static uint hash(System.IntPtr icon) => GioInterop.g_icon_hash(icon);
		public static Gio.Icon new_for_string(string str, out GLib.Error error) => GioInterop.g_icon_new_for_string(str, out error);
		public bool equal(Gio.Icon icon2) => Gio.GioInterop.g_icon_equal(this, icon2);
		public GLib.Variant serialize() => Gio.GioInterop.g_icon_serialize(this);
		public string to_string() => Gio.GioInterop.g_icon_to_string(this);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_icon_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct File
	{
		private IntPtr _pointer;
		public File(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator File(IntPtr pointer) => new File(pointer, checkType: true);
		public static explicit operator IntPtr(File value) => value._pointer;
		public static Gio.File new_for_commandline_arg(string arg) => GioInterop.g_file_new_for_commandline_arg(arg);
		public static Gio.File new_for_commandline_arg_and_cwd(string arg, System.IntPtr cwd) => GioInterop.g_file_new_for_commandline_arg_and_cwd(arg, cwd);
		public static Gio.File new_for_path(System.IntPtr path) => GioInterop.g_file_new_for_path(path);
		public static Gio.File new_for_uri(string uri) => GioInterop.g_file_new_for_uri(uri);
		public static Gio.File new_tmp(System.IntPtr tmpl, out Gio.FileIOStream iostream, out GLib.Error error) => GioInterop.g_file_new_tmp(tmpl, out iostream, out error);
		public static Gio.File parse_name(string parse_name) => GioInterop.g_file_parse_name(parse_name);
		public Gio.FileOutputStream append_to(Gio.FileCreateFlags flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_append_to(this, flags, cancellable, out error);
		public void append_to_async(Gio.FileCreateFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_append_to_async(this, flags, io_priority, cancellable, callback, user_data);
		public Gio.FileOutputStream append_to_finish(Gio.AsyncResult res, out GLib.Error error) => Gio.GioInterop.g_file_append_to_finish(this, res, out error);
		public bool copy(Gio.File destination, Gio.FileCopyFlags flags, Gio.Cancellable cancellable, System.IntPtr progress_callback, System.IntPtr progress_callback_data, out GLib.Error error) => Gio.GioInterop.g_file_copy(this, destination, flags, cancellable, progress_callback, progress_callback_data, out error);
		public void copy_async(Gio.File destination, Gio.FileCopyFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr progress_callback, System.IntPtr progress_callback_data, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_copy_async(this, destination, flags, io_priority, cancellable, progress_callback, progress_callback_data, callback, user_data);
		public bool copy_attributes(Gio.File destination, Gio.FileCopyFlags flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_copy_attributes(this, destination, flags, cancellable, out error);
		public bool copy_finish(Gio.AsyncResult res, out GLib.Error error) => Gio.GioInterop.g_file_copy_finish(this, res, out error);
		public Gio.FileOutputStream create(Gio.FileCreateFlags flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_create(this, flags, cancellable, out error);
		public void create_async(Gio.FileCreateFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_create_async(this, flags, io_priority, cancellable, callback, user_data);
		public Gio.FileOutputStream create_finish(Gio.AsyncResult res, out GLib.Error error) => Gio.GioInterop.g_file_create_finish(this, res, out error);
		public Gio.FileIOStream create_readwrite(Gio.FileCreateFlags flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_create_readwrite(this, flags, cancellable, out error);
		public void create_readwrite_async(Gio.FileCreateFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_create_readwrite_async(this, flags, io_priority, cancellable, callback, user_data);
		public Gio.FileIOStream create_readwrite_finish(Gio.AsyncResult res, out GLib.Error error) => Gio.GioInterop.g_file_create_readwrite_finish(this, res, out error);
		public bool delete(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_delete(this, cancellable, out error);
		public void delete_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_delete_async(this, io_priority, cancellable, callback, user_data);
		public bool delete_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_file_delete_finish(this, result, out error);
		public Gio.File dup() => Gio.GioInterop.g_file_dup(this);
		public void eject_mountable(Gio.MountUnmountFlags flags, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_eject_mountable(this, flags, cancellable, callback, user_data);
		public bool eject_mountable_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_file_eject_mountable_finish(this, result, out error);
		public void eject_mountable_with_operation(Gio.MountUnmountFlags flags, Gio.MountOperation mount_operation, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_eject_mountable_with_operation(this, flags, mount_operation, cancellable, callback, user_data);
		public bool eject_mountable_with_operation_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_file_eject_mountable_with_operation_finish(this, result, out error);
		public Gio.FileEnumerator enumerate_children(string attributes, Gio.FileQueryInfoFlags flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_enumerate_children(this, attributes, flags, cancellable, out error);
		public void enumerate_children_async(string attributes, Gio.FileQueryInfoFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_enumerate_children_async(this, attributes, flags, io_priority, cancellable, callback, user_data);
		public Gio.FileEnumerator enumerate_children_finish(Gio.AsyncResult res, out GLib.Error error) => Gio.GioInterop.g_file_enumerate_children_finish(this, res, out error);
		public bool equal(Gio.File file2) => Gio.GioInterop.g_file_equal(this, file2);
		public Gio.Mount find_enclosing_mount(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_find_enclosing_mount(this, cancellable, out error);
		public void find_enclosing_mount_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_find_enclosing_mount_async(this, io_priority, cancellable, callback, user_data);
		public Gio.Mount find_enclosing_mount_finish(Gio.AsyncResult res, out GLib.Error error) => Gio.GioInterop.g_file_find_enclosing_mount_finish(this, res, out error);
		public System.IntPtr get_basename() => Gio.GioInterop.g_file_get_basename(this);
		public Gio.File get_child(System.IntPtr name) => Gio.GioInterop.g_file_get_child(this, name);
		public Gio.File get_child_for_display_name(string display_name, out GLib.Error error) => Gio.GioInterop.g_file_get_child_for_display_name(this, display_name, out error);
		public Gio.File get_parent() => Gio.GioInterop.g_file_get_parent(this);
		public string get_parse_name() => Gio.GioInterop.g_file_get_parse_name(this);
		public System.IntPtr get_path() => Gio.GioInterop.g_file_get_path(this);
		public System.IntPtr get_relative_path(Gio.File descendant) => Gio.GioInterop.g_file_get_relative_path(this, descendant);
		public string get_uri() => Gio.GioInterop.g_file_get_uri(this);
		public string get_uri_scheme() => Gio.GioInterop.g_file_get_uri_scheme(this);
		public bool has_parent(Gio.File parent) => Gio.GioInterop.g_file_has_parent(this, parent);
		public bool has_prefix(Gio.File prefix) => Gio.GioInterop.g_file_has_prefix(this, prefix);
		public bool has_uri_scheme(string uri_scheme) => Gio.GioInterop.g_file_has_uri_scheme(this, uri_scheme);
		public uint hash() => Gio.GioInterop.g_file_hash(this);
		public bool is_native() => Gio.GioInterop.g_file_is_native(this);
		public bool load_contents(Gio.Cancellable cancellable, System.IntPtr contents, System.IntPtr length, string etag_out, out GLib.Error error) => Gio.GioInterop.g_file_load_contents(this, cancellable, contents, length, etag_out, out error);
		public void load_contents_async(Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_load_contents_async(this, cancellable, callback, user_data);
		public bool load_contents_finish(Gio.AsyncResult res, System.IntPtr contents, System.IntPtr length, string etag_out, out GLib.Error error) => Gio.GioInterop.g_file_load_contents_finish(this, res, contents, length, etag_out, out error);
		public void load_partial_contents_async(Gio.Cancellable cancellable, System.IntPtr read_more_callback, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_load_partial_contents_async(this, cancellable, read_more_callback, callback, user_data);
		public bool load_partial_contents_finish(Gio.AsyncResult res, System.IntPtr contents, System.IntPtr length, string etag_out, out GLib.Error error) => Gio.GioInterop.g_file_load_partial_contents_finish(this, res, contents, length, etag_out, out error);
		public bool make_directory(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_make_directory(this, cancellable, out error);
		public void make_directory_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_make_directory_async(this, io_priority, cancellable, callback, user_data);
		public bool make_directory_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_file_make_directory_finish(this, result, out error);
		public bool make_directory_with_parents(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_make_directory_with_parents(this, cancellable, out error);
		public bool make_symbolic_link(System.IntPtr symlink_value, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_make_symbolic_link(this, symlink_value, cancellable, out error);
		public bool measure_disk_usage(Gio.FileMeasureFlags flags, Gio.Cancellable cancellable, System.IntPtr progress_callback, System.IntPtr progress_data, System.IntPtr disk_usage, System.IntPtr num_dirs, System.IntPtr num_files, out GLib.Error error) => Gio.GioInterop.g_file_measure_disk_usage(this, flags, cancellable, progress_callback, progress_data, disk_usage, num_dirs, num_files, out error);
		public void measure_disk_usage_async(Gio.FileMeasureFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr progress_callback, System.IntPtr progress_data, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_measure_disk_usage_async(this, flags, io_priority, cancellable, progress_callback, progress_data, callback, user_data);
		public bool measure_disk_usage_finish(Gio.AsyncResult result, System.IntPtr disk_usage, System.IntPtr num_dirs, System.IntPtr num_files, out GLib.Error error) => Gio.GioInterop.g_file_measure_disk_usage_finish(this, result, disk_usage, num_dirs, num_files, out error);
		public Gio.FileMonitor monitor(Gio.FileMonitorFlags flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_monitor(this, flags, cancellable, out error);
		public Gio.FileMonitor monitor_directory(Gio.FileMonitorFlags flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_monitor_directory(this, flags, cancellable, out error);
		public Gio.FileMonitor monitor_file(Gio.FileMonitorFlags flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_monitor_file(this, flags, cancellable, out error);
		public void mount_enclosing_volume(Gio.MountMountFlags flags, Gio.MountOperation mount_operation, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_mount_enclosing_volume(this, flags, mount_operation, cancellable, callback, user_data);
		public bool mount_enclosing_volume_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_file_mount_enclosing_volume_finish(this, result, out error);
		public void mount_mountable(Gio.MountMountFlags flags, Gio.MountOperation mount_operation, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_mount_mountable(this, flags, mount_operation, cancellable, callback, user_data);
		public Gio.File mount_mountable_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_file_mount_mountable_finish(this, result, out error);
		public bool move(Gio.File destination, Gio.FileCopyFlags flags, Gio.Cancellable cancellable, System.IntPtr progress_callback, System.IntPtr progress_callback_data, out GLib.Error error) => Gio.GioInterop.g_file_move(this, destination, flags, cancellable, progress_callback, progress_callback_data, out error);
		public Gio.FileIOStream open_readwrite(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_open_readwrite(this, cancellable, out error);
		public void open_readwrite_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_open_readwrite_async(this, io_priority, cancellable, callback, user_data);
		public Gio.FileIOStream open_readwrite_finish(Gio.AsyncResult res, out GLib.Error error) => Gio.GioInterop.g_file_open_readwrite_finish(this, res, out error);
		public void poll_mountable(Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_poll_mountable(this, cancellable, callback, user_data);
		public bool poll_mountable_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_file_poll_mountable_finish(this, result, out error);
		public Gio.AppInfo query_default_handler(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_query_default_handler(this, cancellable, out error);
		public bool query_exists(Gio.Cancellable cancellable) => Gio.GioInterop.g_file_query_exists(this, cancellable);
		public Gio.FileType query_file_type(Gio.FileQueryInfoFlags flags, Gio.Cancellable cancellable) => Gio.GioInterop.g_file_query_file_type(this, flags, cancellable);
		public Gio.FileInfo query_filesystem_info(string attributes, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_query_filesystem_info(this, attributes, cancellable, out error);
		public void query_filesystem_info_async(string attributes, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_query_filesystem_info_async(this, attributes, io_priority, cancellable, callback, user_data);
		public Gio.FileInfo query_filesystem_info_finish(Gio.AsyncResult res, out GLib.Error error) => Gio.GioInterop.g_file_query_filesystem_info_finish(this, res, out error);
		public Gio.FileInfo query_info(string attributes, Gio.FileQueryInfoFlags flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_query_info(this, attributes, flags, cancellable, out error);
		public void query_info_async(string attributes, Gio.FileQueryInfoFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_query_info_async(this, attributes, flags, io_priority, cancellable, callback, user_data);
		public Gio.FileInfo query_info_finish(Gio.AsyncResult res, out GLib.Error error) => Gio.GioInterop.g_file_query_info_finish(this, res, out error);
		public Gio.FileAttributeInfoList query_settable_attributes(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_query_settable_attributes(this, cancellable, out error);
		public Gio.FileAttributeInfoList query_writable_namespaces(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_query_writable_namespaces(this, cancellable, out error);
		public Gio.FileInputStream read(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_read(this, cancellable, out error);
		public void read_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_read_async(this, io_priority, cancellable, callback, user_data);
		public Gio.FileInputStream read_finish(Gio.AsyncResult res, out GLib.Error error) => Gio.GioInterop.g_file_read_finish(this, res, out error);
		public Gio.FileOutputStream replace(string etag, bool make_backup, Gio.FileCreateFlags flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_replace(this, etag, make_backup, flags, cancellable, out error);
		public void replace_async(string etag, bool make_backup, Gio.FileCreateFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_replace_async(this, etag, make_backup, flags, io_priority, cancellable, callback, user_data);
		public bool replace_contents(System.IntPtr contents, ulong length, string etag, bool make_backup, Gio.FileCreateFlags flags, string new_etag, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_replace_contents(this, contents, length, etag, make_backup, flags, new_etag, cancellable, out error);
		public void replace_contents_async(System.IntPtr contents, ulong length, string etag, bool make_backup, Gio.FileCreateFlags flags, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_replace_contents_async(this, contents, length, etag, make_backup, flags, cancellable, callback, user_data);
		public void replace_contents_bytes_async(GLib.Bytes contents, string etag, bool make_backup, Gio.FileCreateFlags flags, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_replace_contents_bytes_async(this, contents, etag, make_backup, flags, cancellable, callback, user_data);
		public bool replace_contents_finish(Gio.AsyncResult res, string new_etag, out GLib.Error error) => Gio.GioInterop.g_file_replace_contents_finish(this, res, new_etag, out error);
		public Gio.FileOutputStream replace_finish(Gio.AsyncResult res, out GLib.Error error) => Gio.GioInterop.g_file_replace_finish(this, res, out error);
		public Gio.FileIOStream replace_readwrite(string etag, bool make_backup, Gio.FileCreateFlags flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_replace_readwrite(this, etag, make_backup, flags, cancellable, out error);
		public void replace_readwrite_async(string etag, bool make_backup, Gio.FileCreateFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_replace_readwrite_async(this, etag, make_backup, flags, io_priority, cancellable, callback, user_data);
		public Gio.FileIOStream replace_readwrite_finish(Gio.AsyncResult res, out GLib.Error error) => Gio.GioInterop.g_file_replace_readwrite_finish(this, res, out error);
		public Gio.File resolve_relative_path(System.IntPtr relative_path) => Gio.GioInterop.g_file_resolve_relative_path(this, relative_path);
		public bool set_attribute(string attribute, Gio.FileAttributeType type, System.IntPtr value_p, Gio.FileQueryInfoFlags flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_set_attribute(this, attribute, type, value_p, flags, cancellable, out error);
		public bool set_attribute_byte_string(string attribute, string value, Gio.FileQueryInfoFlags flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_set_attribute_byte_string(this, attribute, value, flags, cancellable, out error);
		public bool set_attribute_int32(string attribute, int value, Gio.FileQueryInfoFlags flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_set_attribute_int32(this, attribute, value, flags, cancellable, out error);
		public bool set_attribute_int64(string attribute, long value, Gio.FileQueryInfoFlags flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_set_attribute_int64(this, attribute, value, flags, cancellable, out error);
		public bool set_attribute_string(string attribute, string value, Gio.FileQueryInfoFlags flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_set_attribute_string(this, attribute, value, flags, cancellable, out error);
		public bool set_attribute_uint32(string attribute, uint value, Gio.FileQueryInfoFlags flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_set_attribute_uint32(this, attribute, value, flags, cancellable, out error);
		public bool set_attribute_uint64(string attribute, ulong value, Gio.FileQueryInfoFlags flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_set_attribute_uint64(this, attribute, value, flags, cancellable, out error);
		public void set_attributes_async(Gio.FileInfo info, Gio.FileQueryInfoFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_set_attributes_async(this, info, flags, io_priority, cancellable, callback, user_data);
		public bool set_attributes_finish(Gio.AsyncResult result, out Gio.FileInfo info, out GLib.Error error) => Gio.GioInterop.g_file_set_attributes_finish(this, result, out info, out error);
		public bool set_attributes_from_info(Gio.FileInfo info, Gio.FileQueryInfoFlags flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_set_attributes_from_info(this, info, flags, cancellable, out error);
		public Gio.File set_display_name(string display_name, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_set_display_name(this, display_name, cancellable, out error);
		public void set_display_name_async(string display_name, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_set_display_name_async(this, display_name, io_priority, cancellable, callback, user_data);
		public Gio.File set_display_name_finish(Gio.AsyncResult res, out GLib.Error error) => Gio.GioInterop.g_file_set_display_name_finish(this, res, out error);
		public void start_mountable(Gio.DriveStartFlags flags, Gio.MountOperation start_operation, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_start_mountable(this, flags, start_operation, cancellable, callback, user_data);
		public bool start_mountable_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_file_start_mountable_finish(this, result, out error);
		public void stop_mountable(Gio.MountUnmountFlags flags, Gio.MountOperation mount_operation, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_stop_mountable(this, flags, mount_operation, cancellable, callback, user_data);
		public bool stop_mountable_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_file_stop_mountable_finish(this, result, out error);
		public bool supports_thread_contexts() => Gio.GioInterop.g_file_supports_thread_contexts(this);
		public bool trash(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_trash(this, cancellable, out error);
		public void trash_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_trash_async(this, io_priority, cancellable, callback, user_data);
		public bool trash_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_file_trash_finish(this, result, out error);
		public void unmount_mountable(Gio.MountUnmountFlags flags, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_unmount_mountable(this, flags, cancellable, callback, user_data);
		public bool unmount_mountable_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_file_unmount_mountable_finish(this, result, out error);
		public void unmount_mountable_with_operation(Gio.MountUnmountFlags flags, Gio.MountOperation mount_operation, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_unmount_mountable_with_operation(this, flags, mount_operation, cancellable, callback, user_data);
		public bool unmount_mountable_with_operation_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_file_unmount_mountable_with_operation_finish(this, result, out error);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_file_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct AppInfoIface
	{
		private IntPtr _pointer;
		public AppInfoIface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator AppInfoIface(IntPtr pointer) => new AppInfoIface(pointer, checkType: true);
		public static explicit operator IntPtr(AppInfoIface value) => value._pointer;
	}
	public ref struct AppInfoMonitor
	{
		private IntPtr _pointer;
		public AppInfoMonitor(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator AppInfoMonitor(IntPtr pointer) => new AppInfoMonitor(pointer, checkType: true);
		public static explicit operator IntPtr(AppInfoMonitor value) => value._pointer;
		public static implicit operator GObject.Object(AppInfoMonitor value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator AppInfoMonitor(GObject.Object value) => new AppInfoMonitor((IntPtr)value, checkType: true);
		public static Gio.AppInfoMonitor get() => GioInterop.g_app_info_monitor_get();
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_app_info_monitor_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct AppLaunchContextPrivate
	{
		private IntPtr _pointer;
		public AppLaunchContextPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator AppLaunchContextPrivate(IntPtr pointer) => new AppLaunchContextPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(AppLaunchContextPrivate value) => value._pointer;
	}
	public ref struct AppLaunchContextClass
	{
		private IntPtr _pointer;
		public AppLaunchContextClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator AppLaunchContextClass(IntPtr pointer) => new AppLaunchContextClass(pointer, checkType: true);
		public static explicit operator IntPtr(AppLaunchContextClass value) => value._pointer;
	}
	public ref struct Application
	{
		private IntPtr _pointer;
		public Application(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator Application(IntPtr pointer) => new Application(pointer, checkType: true);
		public static explicit operator IntPtr(Application value) => value._pointer;
		public static implicit operator GObject.Object(Application value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator Application(GObject.Object value) => new Application((IntPtr)value, checkType: true);
		public static Gio.Application @new(string application_id, Gio.ApplicationFlags flags) => GioInterop.g_application_new(application_id, flags);
		public static Gio.Application get_default() => GioInterop.g_application_get_default();
		public static bool id_is_valid(string application_id) => GioInterop.g_application_id_is_valid(application_id);
		public void activate() => Gio.GioInterop.g_application_activate(this);
		public void add_main_option(string long_name, sbyte short_name, GLib.OptionFlags flags, GLib.OptionArg arg, string description, string arg_description) => Gio.GioInterop.g_application_add_main_option(this, long_name, short_name, flags, arg, description, arg_description);
		public void add_main_option_entries(System.IntPtr entries) => Gio.GioInterop.g_application_add_main_option_entries(this, entries);
		public void add_option_group(GLib.OptionGroup group) => Gio.GioInterop.g_application_add_option_group(this, group);
		public void bind_busy_property(GObject.Object @object, string property) => Gio.GioInterop.g_application_bind_busy_property(this, @object, property);
		public string get_application_id() => Gio.GioInterop.g_application_get_application_id(this);
		public Gio.DBusConnection get_dbus_connection() => Gio.GioInterop.g_application_get_dbus_connection(this);
		public string get_dbus_object_path() => Gio.GioInterop.g_application_get_dbus_object_path(this);
		public Gio.ApplicationFlags get_flags() => Gio.GioInterop.g_application_get_flags(this);
		public uint get_inactivity_timeout() => Gio.GioInterop.g_application_get_inactivity_timeout(this);
		public bool get_is_busy() => Gio.GioInterop.g_application_get_is_busy(this);
		public bool get_is_registered() => Gio.GioInterop.g_application_get_is_registered(this);
		public bool get_is_remote() => Gio.GioInterop.g_application_get_is_remote(this);
		public string get_resource_base_path() => Gio.GioInterop.g_application_get_resource_base_path(this);
		public void hold() => Gio.GioInterop.g_application_hold(this);
		public void mark_busy() => Gio.GioInterop.g_application_mark_busy(this);
		public void open(System.IntPtr files, int n_files, string hint) => Gio.GioInterop.g_application_open(this, files, n_files, hint);
		public void quit() => Gio.GioInterop.g_application_quit(this);
		public bool register(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_application_register(this, cancellable, out error);
		public void release() => Gio.GioInterop.g_application_release(this);
		public int run(int argc, System.IntPtr argv) => Gio.GioInterop.g_application_run(this, argc, argv);
		public void send_notification(string id, Gio.Notification notification) => Gio.GioInterop.g_application_send_notification(this, id, notification);
		public void set_action_group(Gio.ActionGroup action_group) => Gio.GioInterop.g_application_set_action_group(this, action_group);
		public void set_application_id(string application_id) => Gio.GioInterop.g_application_set_application_id(this, application_id);
		public void set_default() => Gio.GioInterop.g_application_set_default(this);
		public void set_flags(Gio.ApplicationFlags flags) => Gio.GioInterop.g_application_set_flags(this, flags);
		public void set_inactivity_timeout(uint inactivity_timeout) => Gio.GioInterop.g_application_set_inactivity_timeout(this, inactivity_timeout);
		public void set_resource_base_path(string resource_path) => Gio.GioInterop.g_application_set_resource_base_path(this, resource_path);
		public void unbind_busy_property(GObject.Object @object, string property) => Gio.GioInterop.g_application_unbind_busy_property(this, @object, property);
		public void unmark_busy() => Gio.GioInterop.g_application_unmark_busy(this);
		public void withdraw_notification(string id) => Gio.GioInterop.g_application_withdraw_notification(this, id);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_application_get_type")]
		public static extern GLib.GType TypeOf();
	}
	[Flags]
	public enum ApplicationFlags
	{
		flags_none = 0,
		is_service = 1,
		is_launcher = 2,
		handles_open = 4,
		handles_command_line = 8,
		send_environment = 16,
		non_unique = 32,
		can_override_app_id = 64,
	}
	public ref struct DBusConnection
	{
		private IntPtr _pointer;
		public DBusConnection(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator DBusConnection(IntPtr pointer) => new DBusConnection(pointer, checkType: true);
		public static explicit operator IntPtr(DBusConnection value) => value._pointer;
		public static implicit operator GObject.Object(DBusConnection value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator DBusConnection(GObject.Object value) => new DBusConnection((IntPtr)value, checkType: true);
		public static Gio.DBusConnection new_finish(Gio.AsyncResult res, out GLib.Error error) => GioInterop.g_dbus_connection_new_finish(res, out error);
		public static Gio.DBusConnection new_for_address_finish(Gio.AsyncResult res, out GLib.Error error) => GioInterop.g_dbus_connection_new_for_address_finish(res, out error);
		public static Gio.DBusConnection new_for_address_sync(string address, Gio.DBusConnectionFlags flags, Gio.DBusAuthObserver observer, Gio.Cancellable cancellable, out GLib.Error error) => GioInterop.g_dbus_connection_new_for_address_sync(address, flags, observer, cancellable, out error);
		public static Gio.DBusConnection new_sync(Gio.IOStream stream, string guid, Gio.DBusConnectionFlags flags, Gio.DBusAuthObserver observer, Gio.Cancellable cancellable, out GLib.Error error) => GioInterop.g_dbus_connection_new_sync(stream, guid, flags, observer, cancellable, out error);
		public static void @new(Gio.IOStream stream, string guid, Gio.DBusConnectionFlags flags, Gio.DBusAuthObserver observer, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => GioInterop.g_dbus_connection_new(stream, guid, flags, observer, cancellable, callback, user_data);
		public static void new_for_address(string address, Gio.DBusConnectionFlags flags, Gio.DBusAuthObserver observer, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => GioInterop.g_dbus_connection_new_for_address(address, flags, observer, cancellable, callback, user_data);
		public uint add_filter(System.IntPtr filter_function, System.IntPtr user_data, System.IntPtr user_data_free_func) => Gio.GioInterop.g_dbus_connection_add_filter(this, filter_function, user_data, user_data_free_func);
		public void call(string bus_name, string object_path, string interface_name, string method_name, GLib.Variant parameters, GLib.VariantType reply_type, Gio.DBusCallFlags flags, int timeout_msec, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_dbus_connection_call(this, bus_name, object_path, interface_name, method_name, parameters, reply_type, flags, timeout_msec, cancellable, callback, user_data);
		public GLib.Variant call_finish(Gio.AsyncResult res, out GLib.Error error) => Gio.GioInterop.g_dbus_connection_call_finish(this, res, out error);
		public GLib.Variant call_sync(string bus_name, string object_path, string interface_name, string method_name, GLib.Variant parameters, GLib.VariantType reply_type, Gio.DBusCallFlags flags, int timeout_msec, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_dbus_connection_call_sync(this, bus_name, object_path, interface_name, method_name, parameters, reply_type, flags, timeout_msec, cancellable, out error);
		public void call_with_unix_fd_list(string bus_name, string object_path, string interface_name, string method_name, GLib.Variant parameters, GLib.VariantType reply_type, Gio.DBusCallFlags flags, int timeout_msec, Gio.UnixFDList fd_list, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_dbus_connection_call_with_unix_fd_list(this, bus_name, object_path, interface_name, method_name, parameters, reply_type, flags, timeout_msec, fd_list, cancellable, callback, user_data);
		public GLib.Variant call_with_unix_fd_list_finish(out Gio.UnixFDList out_fd_list, Gio.AsyncResult res, out GLib.Error error) => Gio.GioInterop.g_dbus_connection_call_with_unix_fd_list_finish(this, out out_fd_list, res, out error);
		public GLib.Variant call_with_unix_fd_list_sync(string bus_name, string object_path, string interface_name, string method_name, GLib.Variant parameters, GLib.VariantType reply_type, Gio.DBusCallFlags flags, int timeout_msec, Gio.UnixFDList fd_list, out Gio.UnixFDList out_fd_list, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_dbus_connection_call_with_unix_fd_list_sync(this, bus_name, object_path, interface_name, method_name, parameters, reply_type, flags, timeout_msec, fd_list, out out_fd_list, cancellable, out error);
		public void close(Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_dbus_connection_close(this, cancellable, callback, user_data);
		public bool close_finish(Gio.AsyncResult res, out GLib.Error error) => Gio.GioInterop.g_dbus_connection_close_finish(this, res, out error);
		public bool close_sync(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_dbus_connection_close_sync(this, cancellable, out error);
		public bool emit_signal(string destination_bus_name, string object_path, string interface_name, string signal_name, GLib.Variant parameters, out GLib.Error error) => Gio.GioInterop.g_dbus_connection_emit_signal(this, destination_bus_name, object_path, interface_name, signal_name, parameters, out error);
		public uint export_action_group(string object_path, Gio.ActionGroup action_group, out GLib.Error error) => Gio.GioInterop.g_dbus_connection_export_action_group(this, object_path, action_group, out error);
		public uint export_menu_model(string object_path, Gio.MenuModel menu, out GLib.Error error) => Gio.GioInterop.g_dbus_connection_export_menu_model(this, object_path, menu, out error);
		public void flush(Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_dbus_connection_flush(this, cancellable, callback, user_data);
		public bool flush_finish(Gio.AsyncResult res, out GLib.Error error) => Gio.GioInterop.g_dbus_connection_flush_finish(this, res, out error);
		public bool flush_sync(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_dbus_connection_flush_sync(this, cancellable, out error);
		public Gio.DBusCapabilityFlags get_capabilities() => Gio.GioInterop.g_dbus_connection_get_capabilities(this);
		public bool get_exit_on_close() => Gio.GioInterop.g_dbus_connection_get_exit_on_close(this);
		public string get_guid() => Gio.GioInterop.g_dbus_connection_get_guid(this);
		public uint get_last_serial() => Gio.GioInterop.g_dbus_connection_get_last_serial(this);
		public Gio.Credentials get_peer_credentials() => Gio.GioInterop.g_dbus_connection_get_peer_credentials(this);
		public Gio.IOStream get_stream() => Gio.GioInterop.g_dbus_connection_get_stream(this);
		public string get_unique_name() => Gio.GioInterop.g_dbus_connection_get_unique_name(this);
		public bool is_closed() => Gio.GioInterop.g_dbus_connection_is_closed(this);
		public uint register_object(string object_path, Gio.DBusInterfaceInfo interface_info, Gio.DBusInterfaceVTable vtable, System.IntPtr user_data, System.IntPtr user_data_free_func, out GLib.Error error) => Gio.GioInterop.g_dbus_connection_register_object(this, object_path, interface_info, vtable, user_data, user_data_free_func, out error);
		public uint register_object_with_closures(string object_path, Gio.DBusInterfaceInfo interface_info, GObject.Closure method_call_closure, GObject.Closure get_property_closure, GObject.Closure set_property_closure, out GLib.Error error) => Gio.GioInterop.g_dbus_connection_register_object_with_closures(this, object_path, interface_info, method_call_closure, get_property_closure, set_property_closure, out error);
		public uint register_subtree(string object_path, Gio.DBusSubtreeVTable vtable, Gio.DBusSubtreeFlags flags, System.IntPtr user_data, System.IntPtr user_data_free_func, out GLib.Error error) => Gio.GioInterop.g_dbus_connection_register_subtree(this, object_path, vtable, flags, user_data, user_data_free_func, out error);
		public void remove_filter(uint filter_id) => Gio.GioInterop.g_dbus_connection_remove_filter(this, filter_id);
		public bool send_message(Gio.DBusMessage message, Gio.DBusSendMessageFlags flags, System.IntPtr out_serial, out GLib.Error error) => Gio.GioInterop.g_dbus_connection_send_message(this, message, flags, out_serial, out error);
		public void send_message_with_reply(Gio.DBusMessage message, Gio.DBusSendMessageFlags flags, int timeout_msec, System.IntPtr out_serial, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_dbus_connection_send_message_with_reply(this, message, flags, timeout_msec, out_serial, cancellable, callback, user_data);
		public Gio.DBusMessage send_message_with_reply_finish(Gio.AsyncResult res, out GLib.Error error) => Gio.GioInterop.g_dbus_connection_send_message_with_reply_finish(this, res, out error);
		public Gio.DBusMessage send_message_with_reply_sync(Gio.DBusMessage message, Gio.DBusSendMessageFlags flags, int timeout_msec, System.IntPtr out_serial, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_dbus_connection_send_message_with_reply_sync(this, message, flags, timeout_msec, out_serial, cancellable, out error);
		public void set_exit_on_close(bool exit_on_close) => Gio.GioInterop.g_dbus_connection_set_exit_on_close(this, exit_on_close);
		public uint signal_subscribe(string sender, string interface_name, string member, string object_path, string arg0, Gio.DBusSignalFlags flags, System.IntPtr callback, System.IntPtr user_data, System.IntPtr user_data_free_func) => Gio.GioInterop.g_dbus_connection_signal_subscribe(this, sender, interface_name, member, object_path, arg0, flags, callback, user_data, user_data_free_func);
		public void signal_unsubscribe(uint subscription_id) => Gio.GioInterop.g_dbus_connection_signal_unsubscribe(this, subscription_id);
		public void start_message_processing() => Gio.GioInterop.g_dbus_connection_start_message_processing(this);
		public void unexport_action_group(uint export_id) => Gio.GioInterop.g_dbus_connection_unexport_action_group(this, export_id);
		public void unexport_menu_model(uint export_id) => Gio.GioInterop.g_dbus_connection_unexport_menu_model(this, export_id);
		public bool unregister_object(uint registration_id) => Gio.GioInterop.g_dbus_connection_unregister_object(this, registration_id);
		public bool unregister_subtree(uint registration_id) => Gio.GioInterop.g_dbus_connection_unregister_subtree(this, registration_id);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_dbus_connection_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct Notification
	{
		private IntPtr _pointer;
		public Notification(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator Notification(IntPtr pointer) => new Notification(pointer, checkType: true);
		public static explicit operator IntPtr(Notification value) => value._pointer;
		public static implicit operator GObject.Object(Notification value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator Notification(GObject.Object value) => new Notification((IntPtr)value, checkType: true);
		public static Gio.Notification @new(string title) => GioInterop.g_notification_new(title);
		public void add_button(string label, string detailed_action) => Gio.GioInterop.g_notification_add_button(this, label, detailed_action);
		public void add_button_with_target_value(string label, string action, GLib.Variant target) => Gio.GioInterop.g_notification_add_button_with_target_value(this, label, action, target);
		public void set_body(string body) => Gio.GioInterop.g_notification_set_body(this, body);
		public void set_default_action(string detailed_action) => Gio.GioInterop.g_notification_set_default_action(this, detailed_action);
		public void set_default_action_and_target_value(string action, GLib.Variant target) => Gio.GioInterop.g_notification_set_default_action_and_target_value(this, action, target);
		public void set_icon(Gio.Icon icon) => Gio.GioInterop.g_notification_set_icon(this, icon);
		public void set_priority(Gio.NotificationPriority priority) => Gio.GioInterop.g_notification_set_priority(this, priority);
		public void set_title(string title) => Gio.GioInterop.g_notification_set_title(this, title);
		public void set_urgent(bool urgent) => Gio.GioInterop.g_notification_set_urgent(this, urgent);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_notification_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct ApplicationPrivate
	{
		private IntPtr _pointer;
		public ApplicationPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator ApplicationPrivate(IntPtr pointer) => new ApplicationPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(ApplicationPrivate value) => value._pointer;
	}
	public ref struct ApplicationCommandLine
	{
		private IntPtr _pointer;
		public ApplicationCommandLine(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator ApplicationCommandLine(IntPtr pointer) => new ApplicationCommandLine(pointer, checkType: true);
		public static explicit operator IntPtr(ApplicationCommandLine value) => value._pointer;
		public static implicit operator GObject.Object(ApplicationCommandLine value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator ApplicationCommandLine(GObject.Object value) => new ApplicationCommandLine((IntPtr)value, checkType: true);
		public Gio.File create_file_for_arg(string arg) => Gio.GioInterop.g_application_command_line_create_file_for_arg(this, arg);
		public System.IntPtr get_arguments(System.IntPtr argc) => Gio.GioInterop.g_application_command_line_get_arguments(this, argc);
		public System.IntPtr get_cwd() => Gio.GioInterop.g_application_command_line_get_cwd(this);
		public System.IntPtr get_environ() => Gio.GioInterop.g_application_command_line_get_environ(this);
		public int get_exit_status() => Gio.GioInterop.g_application_command_line_get_exit_status(this);
		public bool get_is_remote() => Gio.GioInterop.g_application_command_line_get_is_remote(this);
		public GLib.VariantDict get_options_dict() => Gio.GioInterop.g_application_command_line_get_options_dict(this);
		public GLib.Variant get_platform_data() => Gio.GioInterop.g_application_command_line_get_platform_data(this);
		public Gio.InputStream get_stdin() => Gio.GioInterop.g_application_command_line_get_stdin(this);
		public string getenv(string name) => Gio.GioInterop.g_application_command_line_getenv(this, name);
		public void set_exit_status(int exit_status) => Gio.GioInterop.g_application_command_line_set_exit_status(this, exit_status);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_application_command_line_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct ApplicationClass
	{
		private IntPtr _pointer;
		public ApplicationClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator ApplicationClass(IntPtr pointer) => new ApplicationClass(pointer, checkType: true);
		public static explicit operator IntPtr(ApplicationClass value) => value._pointer;
	}
	public ref struct InputStream
	{
		private IntPtr _pointer;
		public InputStream(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator InputStream(IntPtr pointer) => new InputStream(pointer, checkType: true);
		public static explicit operator IntPtr(InputStream value) => value._pointer;
		public static implicit operator GObject.Object(InputStream value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator InputStream(GObject.Object value) => new InputStream((IntPtr)value, checkType: true);
		public void clear_pending() => Gio.GioInterop.g_input_stream_clear_pending(this);
		public bool close(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_close(this, cancellable, out error);
		public void close_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_close_async(this, io_priority, cancellable, callback, user_data);
		public bool close_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_input_stream_close_finish(this, result, out error);
		public bool has_pending() => Gio.GioInterop.g_input_stream_has_pending(this);
		public bool is_closed() => Gio.GioInterop.g_input_stream_is_closed(this);
		public long read(System.IntPtr buffer, ulong count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_read(this, buffer, count, cancellable, out error);
		public bool read_all(System.IntPtr buffer, ulong count, System.IntPtr bytes_read, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_all(this, buffer, count, bytes_read, cancellable, out error);
		public void read_all_async(System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_read_all_async(this, buffer, count, io_priority, cancellable, callback, user_data);
		public bool read_all_finish(Gio.AsyncResult result, System.IntPtr bytes_read, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_all_finish(this, result, bytes_read, out error);
		public void read_async(System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_read_async(this, buffer, count, io_priority, cancellable, callback, user_data);
		public GLib.Bytes read_bytes(ulong count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_bytes(this, count, cancellable, out error);
		public void read_bytes_async(ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_read_bytes_async(this, count, io_priority, cancellable, callback, user_data);
		public GLib.Bytes read_bytes_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_bytes_finish(this, result, out error);
		public long read_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_finish(this, result, out error);
		public bool set_pending(out GLib.Error error) => Gio.GioInterop.g_input_stream_set_pending(this, out error);
		public long skip(ulong count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_skip(this, count, cancellable, out error);
		public void skip_async(ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_skip_async(this, count, io_priority, cancellable, callback, user_data);
		public long skip_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_input_stream_skip_finish(this, result, out error);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_input_stream_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct ApplicationCommandLinePrivate
	{
		private IntPtr _pointer;
		public ApplicationCommandLinePrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator ApplicationCommandLinePrivate(IntPtr pointer) => new ApplicationCommandLinePrivate(pointer, checkType: true);
		public static explicit operator IntPtr(ApplicationCommandLinePrivate value) => value._pointer;
	}
	public ref struct ApplicationCommandLineClass
	{
		private IntPtr _pointer;
		public ApplicationCommandLineClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator ApplicationCommandLineClass(IntPtr pointer) => new ApplicationCommandLineClass(pointer, checkType: true);
		public static explicit operator IntPtr(ApplicationCommandLineClass value) => value._pointer;
	}
	[Flags]
	public enum AskPasswordFlags
	{
		need_password = 1,
		need_username = 2,
		need_domain = 4,
		saving_supported = 8,
		anonymous_supported = 16,
	}
	public ref struct AsyncInitable
	{
		private IntPtr _pointer;
		public AsyncInitable(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator AsyncInitable(IntPtr pointer) => new AsyncInitable(pointer, checkType: true);
		public static explicit operator IntPtr(AsyncInitable value) => value._pointer;
		public static void newv_async(GLib.GType object_type, uint n_parameters, GObject.Parameter parameters, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => GioInterop.g_async_initable_newv_async(object_type, n_parameters, parameters, io_priority, cancellable, callback, user_data);
		public void init_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_async_initable_init_async(this, io_priority, cancellable, callback, user_data);
		public bool init_finish(Gio.AsyncResult res, out GLib.Error error) => Gio.GioInterop.g_async_initable_init_finish(this, res, out error);
		public GObject.Object new_finish(Gio.AsyncResult res, out GLib.Error error) => Gio.GioInterop.g_async_initable_new_finish(this, res, out error);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_async_initable_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct AsyncInitableIface
	{
		private IntPtr _pointer;
		public AsyncInitableIface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator AsyncInitableIface(IntPtr pointer) => new AsyncInitableIface(pointer, checkType: true);
		public static explicit operator IntPtr(AsyncInitableIface value) => value._pointer;
	}
	public ref struct AsyncResultIface
	{
		private IntPtr _pointer;
		public AsyncResultIface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator AsyncResultIface(IntPtr pointer) => new AsyncResultIface(pointer, checkType: true);
		public static explicit operator IntPtr(AsyncResultIface value) => value._pointer;
	}
	public ref struct Seekable
	{
		private IntPtr _pointer;
		public Seekable(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator Seekable(IntPtr pointer) => new Seekable(pointer, checkType: true);
		public static explicit operator IntPtr(Seekable value) => value._pointer;
		public bool can_seek() => Gio.GioInterop.g_seekable_can_seek(this);
		public bool can_truncate() => Gio.GioInterop.g_seekable_can_truncate(this);
		public bool seek(long offset, GLib.SeekType type, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_seekable_seek(this, offset, type, cancellable, out error);
		public long tell() => Gio.GioInterop.g_seekable_tell(this);
		public bool truncate(long offset, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_seekable_truncate(this, offset, cancellable, out error);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_seekable_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct BufferedInputStream
	{
		private IntPtr _pointer;
		public BufferedInputStream(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator BufferedInputStream(IntPtr pointer) => new BufferedInputStream(pointer, checkType: true);
		public static explicit operator IntPtr(BufferedInputStream value) => value._pointer;
		public static implicit operator Gio.FilterInputStream(BufferedInputStream value) => new Gio.FilterInputStream((IntPtr)value, checkType: false);
		public static explicit operator BufferedInputStream(Gio.FilterInputStream value) => new BufferedInputStream((IntPtr)value, checkType: true);
		public static implicit operator Gio.InputStream(BufferedInputStream value) => new Gio.InputStream((IntPtr)value, checkType: false);
		public static explicit operator BufferedInputStream(Gio.InputStream value) => new BufferedInputStream((IntPtr)value, checkType: true);
		public static implicit operator GObject.Object(BufferedInputStream value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator BufferedInputStream(GObject.Object value) => new BufferedInputStream((IntPtr)value, checkType: true);
		public static Gio.InputStream @new(Gio.InputStream base_stream) => GioInterop.g_buffered_input_stream_new(base_stream);
		public static Gio.InputStream new_sized(Gio.InputStream base_stream, ulong size) => GioInterop.g_buffered_input_stream_new_sized(base_stream, size);
		public long fill(long count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_buffered_input_stream_fill(this, count, cancellable, out error);
		public void fill_async(long count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_buffered_input_stream_fill_async(this, count, io_priority, cancellable, callback, user_data);
		public long fill_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_buffered_input_stream_fill_finish(this, result, out error);
		public ulong get_available() => Gio.GioInterop.g_buffered_input_stream_get_available(this);
		public ulong get_buffer_size() => Gio.GioInterop.g_buffered_input_stream_get_buffer_size(this);
		public ulong peek(System.IntPtr buffer, ulong offset, ulong count) => Gio.GioInterop.g_buffered_input_stream_peek(this, buffer, offset, count);
		public System.IntPtr peek_buffer(System.IntPtr count) => Gio.GioInterop.g_buffered_input_stream_peek_buffer(this, count);
		public int read_byte(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_buffered_input_stream_read_byte(this, cancellable, out error);
		public void set_buffer_size(ulong size) => Gio.GioInterop.g_buffered_input_stream_set_buffer_size(this, size);
		public Gio.InputStream get_base_stream() => Gio.GioInterop.g_filter_input_stream_get_base_stream(this);
		public bool get_close_base_stream() => Gio.GioInterop.g_filter_input_stream_get_close_base_stream(this);
		public void set_close_base_stream(bool close_base) => Gio.GioInterop.g_filter_input_stream_set_close_base_stream(this, close_base);
		public void clear_pending() => Gio.GioInterop.g_input_stream_clear_pending(this);
		public bool close(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_close(this, cancellable, out error);
		public void close_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_close_async(this, io_priority, cancellable, callback, user_data);
		public bool close_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_input_stream_close_finish(this, result, out error);
		public bool has_pending() => Gio.GioInterop.g_input_stream_has_pending(this);
		public bool is_closed() => Gio.GioInterop.g_input_stream_is_closed(this);
		public long read(System.IntPtr buffer, ulong count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_read(this, buffer, count, cancellable, out error);
		public bool read_all(System.IntPtr buffer, ulong count, System.IntPtr bytes_read, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_all(this, buffer, count, bytes_read, cancellable, out error);
		public void read_all_async(System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_read_all_async(this, buffer, count, io_priority, cancellable, callback, user_data);
		public bool read_all_finish(Gio.AsyncResult result, System.IntPtr bytes_read, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_all_finish(this, result, bytes_read, out error);
		public void read_async(System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_read_async(this, buffer, count, io_priority, cancellable, callback, user_data);
		public GLib.Bytes read_bytes(ulong count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_bytes(this, count, cancellable, out error);
		public void read_bytes_async(ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_read_bytes_async(this, count, io_priority, cancellable, callback, user_data);
		public GLib.Bytes read_bytes_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_bytes_finish(this, result, out error);
		public long read_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_finish(this, result, out error);
		public bool set_pending(out GLib.Error error) => Gio.GioInterop.g_input_stream_set_pending(this, out error);
		public long skip(ulong count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_skip(this, count, cancellable, out error);
		public void skip_async(ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_skip_async(this, count, io_priority, cancellable, callback, user_data);
		public long skip_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_input_stream_skip_finish(this, result, out error);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_buffered_input_stream_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct FilterInputStream
	{
		private IntPtr _pointer;
		public FilterInputStream(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator FilterInputStream(IntPtr pointer) => new FilterInputStream(pointer, checkType: true);
		public static explicit operator IntPtr(FilterInputStream value) => value._pointer;
		public static implicit operator Gio.InputStream(FilterInputStream value) => new Gio.InputStream((IntPtr)value, checkType: false);
		public static explicit operator FilterInputStream(Gio.InputStream value) => new FilterInputStream((IntPtr)value, checkType: true);
		public static implicit operator GObject.Object(FilterInputStream value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator FilterInputStream(GObject.Object value) => new FilterInputStream((IntPtr)value, checkType: true);
		public Gio.InputStream get_base_stream() => Gio.GioInterop.g_filter_input_stream_get_base_stream(this);
		public bool get_close_base_stream() => Gio.GioInterop.g_filter_input_stream_get_close_base_stream(this);
		public void set_close_base_stream(bool close_base) => Gio.GioInterop.g_filter_input_stream_set_close_base_stream(this, close_base);
		public void clear_pending() => Gio.GioInterop.g_input_stream_clear_pending(this);
		public bool close(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_close(this, cancellable, out error);
		public void close_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_close_async(this, io_priority, cancellable, callback, user_data);
		public bool close_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_input_stream_close_finish(this, result, out error);
		public bool has_pending() => Gio.GioInterop.g_input_stream_has_pending(this);
		public bool is_closed() => Gio.GioInterop.g_input_stream_is_closed(this);
		public long read(System.IntPtr buffer, ulong count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_read(this, buffer, count, cancellable, out error);
		public bool read_all(System.IntPtr buffer, ulong count, System.IntPtr bytes_read, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_all(this, buffer, count, bytes_read, cancellable, out error);
		public void read_all_async(System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_read_all_async(this, buffer, count, io_priority, cancellable, callback, user_data);
		public bool read_all_finish(Gio.AsyncResult result, System.IntPtr bytes_read, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_all_finish(this, result, bytes_read, out error);
		public void read_async(System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_read_async(this, buffer, count, io_priority, cancellable, callback, user_data);
		public GLib.Bytes read_bytes(ulong count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_bytes(this, count, cancellable, out error);
		public void read_bytes_async(ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_read_bytes_async(this, count, io_priority, cancellable, callback, user_data);
		public GLib.Bytes read_bytes_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_bytes_finish(this, result, out error);
		public long read_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_finish(this, result, out error);
		public bool set_pending(out GLib.Error error) => Gio.GioInterop.g_input_stream_set_pending(this, out error);
		public long skip(ulong count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_skip(this, count, cancellable, out error);
		public void skip_async(ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_skip_async(this, count, io_priority, cancellable, callback, user_data);
		public long skip_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_input_stream_skip_finish(this, result, out error);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_filter_input_stream_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct BufferedInputStreamPrivate
	{
		private IntPtr _pointer;
		public BufferedInputStreamPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator BufferedInputStreamPrivate(IntPtr pointer) => new BufferedInputStreamPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(BufferedInputStreamPrivate value) => value._pointer;
	}
	public ref struct FilterInputStreamClass
	{
		private IntPtr _pointer;
		public FilterInputStreamClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator FilterInputStreamClass(IntPtr pointer) => new FilterInputStreamClass(pointer, checkType: true);
		public static explicit operator IntPtr(FilterInputStreamClass value) => value._pointer;
	}
	public ref struct BufferedInputStreamClass
	{
		private IntPtr _pointer;
		public BufferedInputStreamClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator BufferedInputStreamClass(IntPtr pointer) => new BufferedInputStreamClass(pointer, checkType: true);
		public static explicit operator IntPtr(BufferedInputStreamClass value) => value._pointer;
	}
	public ref struct OutputStream
	{
		private IntPtr _pointer;
		public OutputStream(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator OutputStream(IntPtr pointer) => new OutputStream(pointer, checkType: true);
		public static explicit operator IntPtr(OutputStream value) => value._pointer;
		public static implicit operator GObject.Object(OutputStream value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator OutputStream(GObject.Object value) => new OutputStream((IntPtr)value, checkType: true);
		public void clear_pending() => Gio.GioInterop.g_output_stream_clear_pending(this);
		public bool close(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_close(this, cancellable, out error);
		public void close_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_close_async(this, io_priority, cancellable, callback, user_data);
		public bool close_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_close_finish(this, result, out error);
		public bool flush(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_flush(this, cancellable, out error);
		public void flush_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_flush_async(this, io_priority, cancellable, callback, user_data);
		public bool flush_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_flush_finish(this, result, out error);
		public bool has_pending() => Gio.GioInterop.g_output_stream_has_pending(this);
		public bool is_closed() => Gio.GioInterop.g_output_stream_is_closed(this);
		public bool is_closing() => Gio.GioInterop.g_output_stream_is_closing(this);
		public bool set_pending(out GLib.Error error) => Gio.GioInterop.g_output_stream_set_pending(this, out error);
		public long splice(Gio.InputStream source, Gio.OutputStreamSpliceFlags flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_splice(this, source, flags, cancellable, out error);
		public void splice_async(Gio.InputStream source, Gio.OutputStreamSpliceFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_splice_async(this, source, flags, io_priority, cancellable, callback, user_data);
		public long splice_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_splice_finish(this, result, out error);
		public long write(System.IntPtr buffer, ulong count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_write(this, buffer, count, cancellable, out error);
		public bool write_all(System.IntPtr buffer, ulong count, System.IntPtr bytes_written, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_all(this, buffer, count, bytes_written, cancellable, out error);
		public void write_all_async(System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_write_all_async(this, buffer, count, io_priority, cancellable, callback, user_data);
		public bool write_all_finish(Gio.AsyncResult result, System.IntPtr bytes_written, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_all_finish(this, result, bytes_written, out error);
		public void write_async(System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_write_async(this, buffer, count, io_priority, cancellable, callback, user_data);
		public long write_bytes(GLib.Bytes bytes, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_bytes(this, bytes, cancellable, out error);
		public void write_bytes_async(GLib.Bytes bytes, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_write_bytes_async(this, bytes, io_priority, cancellable, callback, user_data);
		public long write_bytes_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_bytes_finish(this, result, out error);
		public long write_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_finish(this, result, out error);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_output_stream_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct BufferedOutputStream
	{
		private IntPtr _pointer;
		public BufferedOutputStream(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator BufferedOutputStream(IntPtr pointer) => new BufferedOutputStream(pointer, checkType: true);
		public static explicit operator IntPtr(BufferedOutputStream value) => value._pointer;
		public static implicit operator Gio.FilterOutputStream(BufferedOutputStream value) => new Gio.FilterOutputStream((IntPtr)value, checkType: false);
		public static explicit operator BufferedOutputStream(Gio.FilterOutputStream value) => new BufferedOutputStream((IntPtr)value, checkType: true);
		public static implicit operator Gio.OutputStream(BufferedOutputStream value) => new Gio.OutputStream((IntPtr)value, checkType: false);
		public static explicit operator BufferedOutputStream(Gio.OutputStream value) => new BufferedOutputStream((IntPtr)value, checkType: true);
		public static implicit operator GObject.Object(BufferedOutputStream value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator BufferedOutputStream(GObject.Object value) => new BufferedOutputStream((IntPtr)value, checkType: true);
		public static Gio.OutputStream @new(Gio.OutputStream base_stream) => GioInterop.g_buffered_output_stream_new(base_stream);
		public static Gio.OutputStream new_sized(Gio.OutputStream base_stream, ulong size) => GioInterop.g_buffered_output_stream_new_sized(base_stream, size);
		public bool get_auto_grow() => Gio.GioInterop.g_buffered_output_stream_get_auto_grow(this);
		public ulong get_buffer_size() => Gio.GioInterop.g_buffered_output_stream_get_buffer_size(this);
		public void set_auto_grow(bool auto_grow) => Gio.GioInterop.g_buffered_output_stream_set_auto_grow(this, auto_grow);
		public void set_buffer_size(ulong size) => Gio.GioInterop.g_buffered_output_stream_set_buffer_size(this, size);
		public Gio.OutputStream get_base_stream() => Gio.GioInterop.g_filter_output_stream_get_base_stream(this);
		public bool get_close_base_stream() => Gio.GioInterop.g_filter_output_stream_get_close_base_stream(this);
		public void set_close_base_stream(bool close_base) => Gio.GioInterop.g_filter_output_stream_set_close_base_stream(this, close_base);
		public void clear_pending() => Gio.GioInterop.g_output_stream_clear_pending(this);
		public bool close(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_close(this, cancellable, out error);
		public void close_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_close_async(this, io_priority, cancellable, callback, user_data);
		public bool close_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_close_finish(this, result, out error);
		public bool flush(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_flush(this, cancellable, out error);
		public void flush_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_flush_async(this, io_priority, cancellable, callback, user_data);
		public bool flush_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_flush_finish(this, result, out error);
		public bool has_pending() => Gio.GioInterop.g_output_stream_has_pending(this);
		public bool is_closed() => Gio.GioInterop.g_output_stream_is_closed(this);
		public bool is_closing() => Gio.GioInterop.g_output_stream_is_closing(this);
		public bool set_pending(out GLib.Error error) => Gio.GioInterop.g_output_stream_set_pending(this, out error);
		public long splice(Gio.InputStream source, Gio.OutputStreamSpliceFlags flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_splice(this, source, flags, cancellable, out error);
		public void splice_async(Gio.InputStream source, Gio.OutputStreamSpliceFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_splice_async(this, source, flags, io_priority, cancellable, callback, user_data);
		public long splice_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_splice_finish(this, result, out error);
		public long write(System.IntPtr buffer, ulong count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_write(this, buffer, count, cancellable, out error);
		public bool write_all(System.IntPtr buffer, ulong count, System.IntPtr bytes_written, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_all(this, buffer, count, bytes_written, cancellable, out error);
		public void write_all_async(System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_write_all_async(this, buffer, count, io_priority, cancellable, callback, user_data);
		public bool write_all_finish(Gio.AsyncResult result, System.IntPtr bytes_written, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_all_finish(this, result, bytes_written, out error);
		public void write_async(System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_write_async(this, buffer, count, io_priority, cancellable, callback, user_data);
		public long write_bytes(GLib.Bytes bytes, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_bytes(this, bytes, cancellable, out error);
		public void write_bytes_async(GLib.Bytes bytes, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_write_bytes_async(this, bytes, io_priority, cancellable, callback, user_data);
		public long write_bytes_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_bytes_finish(this, result, out error);
		public long write_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_finish(this, result, out error);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_buffered_output_stream_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct FilterOutputStream
	{
		private IntPtr _pointer;
		public FilterOutputStream(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator FilterOutputStream(IntPtr pointer) => new FilterOutputStream(pointer, checkType: true);
		public static explicit operator IntPtr(FilterOutputStream value) => value._pointer;
		public static implicit operator Gio.OutputStream(FilterOutputStream value) => new Gio.OutputStream((IntPtr)value, checkType: false);
		public static explicit operator FilterOutputStream(Gio.OutputStream value) => new FilterOutputStream((IntPtr)value, checkType: true);
		public static implicit operator GObject.Object(FilterOutputStream value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator FilterOutputStream(GObject.Object value) => new FilterOutputStream((IntPtr)value, checkType: true);
		public Gio.OutputStream get_base_stream() => Gio.GioInterop.g_filter_output_stream_get_base_stream(this);
		public bool get_close_base_stream() => Gio.GioInterop.g_filter_output_stream_get_close_base_stream(this);
		public void set_close_base_stream(bool close_base) => Gio.GioInterop.g_filter_output_stream_set_close_base_stream(this, close_base);
		public void clear_pending() => Gio.GioInterop.g_output_stream_clear_pending(this);
		public bool close(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_close(this, cancellable, out error);
		public void close_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_close_async(this, io_priority, cancellable, callback, user_data);
		public bool close_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_close_finish(this, result, out error);
		public bool flush(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_flush(this, cancellable, out error);
		public void flush_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_flush_async(this, io_priority, cancellable, callback, user_data);
		public bool flush_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_flush_finish(this, result, out error);
		public bool has_pending() => Gio.GioInterop.g_output_stream_has_pending(this);
		public bool is_closed() => Gio.GioInterop.g_output_stream_is_closed(this);
		public bool is_closing() => Gio.GioInterop.g_output_stream_is_closing(this);
		public bool set_pending(out GLib.Error error) => Gio.GioInterop.g_output_stream_set_pending(this, out error);
		public long splice(Gio.InputStream source, Gio.OutputStreamSpliceFlags flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_splice(this, source, flags, cancellable, out error);
		public void splice_async(Gio.InputStream source, Gio.OutputStreamSpliceFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_splice_async(this, source, flags, io_priority, cancellable, callback, user_data);
		public long splice_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_splice_finish(this, result, out error);
		public long write(System.IntPtr buffer, ulong count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_write(this, buffer, count, cancellable, out error);
		public bool write_all(System.IntPtr buffer, ulong count, System.IntPtr bytes_written, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_all(this, buffer, count, bytes_written, cancellable, out error);
		public void write_all_async(System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_write_all_async(this, buffer, count, io_priority, cancellable, callback, user_data);
		public bool write_all_finish(Gio.AsyncResult result, System.IntPtr bytes_written, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_all_finish(this, result, bytes_written, out error);
		public void write_async(System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_write_async(this, buffer, count, io_priority, cancellable, callback, user_data);
		public long write_bytes(GLib.Bytes bytes, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_bytes(this, bytes, cancellable, out error);
		public void write_bytes_async(GLib.Bytes bytes, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_write_bytes_async(this, bytes, io_priority, cancellable, callback, user_data);
		public long write_bytes_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_bytes_finish(this, result, out error);
		public long write_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_finish(this, result, out error);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_filter_output_stream_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct BufferedOutputStreamPrivate
	{
		private IntPtr _pointer;
		public BufferedOutputStreamPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator BufferedOutputStreamPrivate(IntPtr pointer) => new BufferedOutputStreamPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(BufferedOutputStreamPrivate value) => value._pointer;
	}
	public ref struct FilterOutputStreamClass
	{
		private IntPtr _pointer;
		public FilterOutputStreamClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator FilterOutputStreamClass(IntPtr pointer) => new FilterOutputStreamClass(pointer, checkType: true);
		public static explicit operator IntPtr(FilterOutputStreamClass value) => value._pointer;
	}
	public ref struct BufferedOutputStreamClass
	{
		private IntPtr _pointer;
		public BufferedOutputStreamClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator BufferedOutputStreamClass(IntPtr pointer) => new BufferedOutputStreamClass(pointer, checkType: true);
		public static explicit operator IntPtr(BufferedOutputStreamClass value) => value._pointer;
	}
	[Flags]
	public enum BusNameOwnerFlags
	{
		none = 0,
		allow_replacement = 1,
		replace = 2,
		do_not_queue = 4,
	}
	[Flags]
	public enum BusNameWatcherFlags
	{
		none = 0,
		auto_start = 1,
	}
	public enum BusType
	{
		starter = -1,
		none = 0,
		system = 1,
		session = 2,
	}
	public ref struct LoadableIcon
	{
		private IntPtr _pointer;
		public LoadableIcon(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator LoadableIcon(IntPtr pointer) => new LoadableIcon(pointer, checkType: true);
		public static explicit operator IntPtr(LoadableIcon value) => value._pointer;
		public Gio.InputStream load(int size, string type, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_loadable_icon_load(this, size, type, cancellable, out error);
		public void load_async(int size, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_loadable_icon_load_async(this, size, cancellable, callback, user_data);
		public Gio.InputStream load_finish(Gio.AsyncResult res, string type, out GLib.Error error) => Gio.GioInterop.g_loadable_icon_load_finish(this, res, type, out error);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_loadable_icon_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct BytesIcon
	{
		private IntPtr _pointer;
		public BytesIcon(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator BytesIcon(IntPtr pointer) => new BytesIcon(pointer, checkType: true);
		public static explicit operator IntPtr(BytesIcon value) => value._pointer;
		public static implicit operator GObject.Object(BytesIcon value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator BytesIcon(GObject.Object value) => new BytesIcon((IntPtr)value, checkType: true);
		public static Gio.BytesIcon @new(GLib.Bytes bytes) => GioInterop.g_bytes_icon_new(bytes);
		public GLib.Bytes get_bytes() => Gio.GioInterop.g_bytes_icon_get_bytes(this);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_bytes_icon_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct CancellablePrivate
	{
		private IntPtr _pointer;
		public CancellablePrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator CancellablePrivate(IntPtr pointer) => new CancellablePrivate(pointer, checkType: true);
		public static explicit operator IntPtr(CancellablePrivate value) => value._pointer;
	}
	public ref struct CancellableClass
	{
		private IntPtr _pointer;
		public CancellableClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator CancellableClass(IntPtr pointer) => new CancellableClass(pointer, checkType: true);
		public static explicit operator IntPtr(CancellableClass value) => value._pointer;
	}
	public ref struct Converter
	{
		private IntPtr _pointer;
		public Converter(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator Converter(IntPtr pointer) => new Converter(pointer, checkType: true);
		public static explicit operator IntPtr(Converter value) => value._pointer;
		public Gio.ConverterResult convert(System.IntPtr inbuf, ulong inbuf_size, System.IntPtr outbuf, ulong outbuf_size, Gio.ConverterFlags flags, System.IntPtr bytes_read, System.IntPtr bytes_written, out GLib.Error error) => Gio.GioInterop.g_converter_convert(this, inbuf, inbuf_size, outbuf, outbuf_size, flags, bytes_read, bytes_written, out error);
		public void reset() => Gio.GioInterop.g_converter_reset(this);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_converter_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct Initable
	{
		private IntPtr _pointer;
		public Initable(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator Initable(IntPtr pointer) => new Initable(pointer, checkType: true);
		public static explicit operator IntPtr(Initable value) => value._pointer;
		public static GObject.Object newv(GLib.GType object_type, uint n_parameters, System.IntPtr parameters, Gio.Cancellable cancellable, out GLib.Error error) => GioInterop.g_initable_newv(object_type, n_parameters, parameters, cancellable, out error);
		public bool init(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_initable_init(this, cancellable, out error);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_initable_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct CharsetConverter
	{
		private IntPtr _pointer;
		public CharsetConverter(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator CharsetConverter(IntPtr pointer) => new CharsetConverter(pointer, checkType: true);
		public static explicit operator IntPtr(CharsetConverter value) => value._pointer;
		public static implicit operator GObject.Object(CharsetConverter value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator CharsetConverter(GObject.Object value) => new CharsetConverter((IntPtr)value, checkType: true);
		public static Gio.CharsetConverter @new(string to_charset, string from_charset, out GLib.Error error) => GioInterop.g_charset_converter_new(to_charset, from_charset, out error);
		public uint get_num_fallbacks() => Gio.GioInterop.g_charset_converter_get_num_fallbacks(this);
		public bool get_use_fallback() => Gio.GioInterop.g_charset_converter_get_use_fallback(this);
		public void set_use_fallback(bool use_fallback) => Gio.GioInterop.g_charset_converter_set_use_fallback(this, use_fallback);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_charset_converter_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct CharsetConverterClass
	{
		private IntPtr _pointer;
		public CharsetConverterClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator CharsetConverterClass(IntPtr pointer) => new CharsetConverterClass(pointer, checkType: true);
		public static explicit operator IntPtr(CharsetConverterClass value) => value._pointer;
	}
	public enum ConverterResult
	{
		error = 0,
		converted = 1,
		finished = 2,
		flushed = 3,
	}
	[Flags]
	public enum ConverterFlags
	{
		none = 0,
		input_at_end = 1,
		flush = 2,
	}
	public ref struct ConverterIface
	{
		private IntPtr _pointer;
		public ConverterIface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator ConverterIface(IntPtr pointer) => new ConverterIface(pointer, checkType: true);
		public static explicit operator IntPtr(ConverterIface value) => value._pointer;
	}
	public ref struct PollableInputStream
	{
		private IntPtr _pointer;
		public PollableInputStream(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator PollableInputStream(IntPtr pointer) => new PollableInputStream(pointer, checkType: true);
		public static explicit operator IntPtr(PollableInputStream value) => value._pointer;
		public bool can_poll() => Gio.GioInterop.g_pollable_input_stream_can_poll(this);
		public GLib.Source create_source(Gio.Cancellable cancellable) => Gio.GioInterop.g_pollable_input_stream_create_source(this, cancellable);
		public bool is_readable() => Gio.GioInterop.g_pollable_input_stream_is_readable(this);
		public long read_nonblocking(System.IntPtr buffer, ulong count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_pollable_input_stream_read_nonblocking(this, buffer, count, cancellable, out error);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_pollable_input_stream_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct ConverterInputStream
	{
		private IntPtr _pointer;
		public ConverterInputStream(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator ConverterInputStream(IntPtr pointer) => new ConverterInputStream(pointer, checkType: true);
		public static explicit operator IntPtr(ConverterInputStream value) => value._pointer;
		public static implicit operator Gio.FilterInputStream(ConverterInputStream value) => new Gio.FilterInputStream((IntPtr)value, checkType: false);
		public static explicit operator ConverterInputStream(Gio.FilterInputStream value) => new ConverterInputStream((IntPtr)value, checkType: true);
		public static implicit operator Gio.InputStream(ConverterInputStream value) => new Gio.InputStream((IntPtr)value, checkType: false);
		public static explicit operator ConverterInputStream(Gio.InputStream value) => new ConverterInputStream((IntPtr)value, checkType: true);
		public static implicit operator GObject.Object(ConverterInputStream value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator ConverterInputStream(GObject.Object value) => new ConverterInputStream((IntPtr)value, checkType: true);
		public static Gio.InputStream @new(Gio.InputStream base_stream, Gio.Converter converter) => GioInterop.g_converter_input_stream_new(base_stream, converter);
		public Gio.Converter get_converter() => Gio.GioInterop.g_converter_input_stream_get_converter(this);
		public Gio.InputStream get_base_stream() => Gio.GioInterop.g_filter_input_stream_get_base_stream(this);
		public bool get_close_base_stream() => Gio.GioInterop.g_filter_input_stream_get_close_base_stream(this);
		public void set_close_base_stream(bool close_base) => Gio.GioInterop.g_filter_input_stream_set_close_base_stream(this, close_base);
		public void clear_pending() => Gio.GioInterop.g_input_stream_clear_pending(this);
		public bool close(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_close(this, cancellable, out error);
		public void close_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_close_async(this, io_priority, cancellable, callback, user_data);
		public bool close_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_input_stream_close_finish(this, result, out error);
		public bool has_pending() => Gio.GioInterop.g_input_stream_has_pending(this);
		public bool is_closed() => Gio.GioInterop.g_input_stream_is_closed(this);
		public long read(System.IntPtr buffer, ulong count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_read(this, buffer, count, cancellable, out error);
		public bool read_all(System.IntPtr buffer, ulong count, System.IntPtr bytes_read, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_all(this, buffer, count, bytes_read, cancellable, out error);
		public void read_all_async(System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_read_all_async(this, buffer, count, io_priority, cancellable, callback, user_data);
		public bool read_all_finish(Gio.AsyncResult result, System.IntPtr bytes_read, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_all_finish(this, result, bytes_read, out error);
		public void read_async(System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_read_async(this, buffer, count, io_priority, cancellable, callback, user_data);
		public GLib.Bytes read_bytes(ulong count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_bytes(this, count, cancellable, out error);
		public void read_bytes_async(ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_read_bytes_async(this, count, io_priority, cancellable, callback, user_data);
		public GLib.Bytes read_bytes_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_bytes_finish(this, result, out error);
		public long read_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_finish(this, result, out error);
		public bool set_pending(out GLib.Error error) => Gio.GioInterop.g_input_stream_set_pending(this, out error);
		public long skip(ulong count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_skip(this, count, cancellable, out error);
		public void skip_async(ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_skip_async(this, count, io_priority, cancellable, callback, user_data);
		public long skip_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_input_stream_skip_finish(this, result, out error);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_converter_input_stream_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct ConverterInputStreamPrivate
	{
		private IntPtr _pointer;
		public ConverterInputStreamPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator ConverterInputStreamPrivate(IntPtr pointer) => new ConverterInputStreamPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(ConverterInputStreamPrivate value) => value._pointer;
	}
	public ref struct ConverterInputStreamClass
	{
		private IntPtr _pointer;
		public ConverterInputStreamClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator ConverterInputStreamClass(IntPtr pointer) => new ConverterInputStreamClass(pointer, checkType: true);
		public static explicit operator IntPtr(ConverterInputStreamClass value) => value._pointer;
	}
	public ref struct PollableOutputStream
	{
		private IntPtr _pointer;
		public PollableOutputStream(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator PollableOutputStream(IntPtr pointer) => new PollableOutputStream(pointer, checkType: true);
		public static explicit operator IntPtr(PollableOutputStream value) => value._pointer;
		public bool can_poll() => Gio.GioInterop.g_pollable_output_stream_can_poll(this);
		public GLib.Source create_source(Gio.Cancellable cancellable) => Gio.GioInterop.g_pollable_output_stream_create_source(this, cancellable);
		public bool is_writable() => Gio.GioInterop.g_pollable_output_stream_is_writable(this);
		public long write_nonblocking(System.IntPtr buffer, ulong count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_pollable_output_stream_write_nonblocking(this, buffer, count, cancellable, out error);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_pollable_output_stream_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct ConverterOutputStream
	{
		private IntPtr _pointer;
		public ConverterOutputStream(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator ConverterOutputStream(IntPtr pointer) => new ConverterOutputStream(pointer, checkType: true);
		public static explicit operator IntPtr(ConverterOutputStream value) => value._pointer;
		public static implicit operator Gio.FilterOutputStream(ConverterOutputStream value) => new Gio.FilterOutputStream((IntPtr)value, checkType: false);
		public static explicit operator ConverterOutputStream(Gio.FilterOutputStream value) => new ConverterOutputStream((IntPtr)value, checkType: true);
		public static implicit operator Gio.OutputStream(ConverterOutputStream value) => new Gio.OutputStream((IntPtr)value, checkType: false);
		public static explicit operator ConverterOutputStream(Gio.OutputStream value) => new ConverterOutputStream((IntPtr)value, checkType: true);
		public static implicit operator GObject.Object(ConverterOutputStream value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator ConverterOutputStream(GObject.Object value) => new ConverterOutputStream((IntPtr)value, checkType: true);
		public static Gio.OutputStream @new(Gio.OutputStream base_stream, Gio.Converter converter) => GioInterop.g_converter_output_stream_new(base_stream, converter);
		public Gio.Converter get_converter() => Gio.GioInterop.g_converter_output_stream_get_converter(this);
		public Gio.OutputStream get_base_stream() => Gio.GioInterop.g_filter_output_stream_get_base_stream(this);
		public bool get_close_base_stream() => Gio.GioInterop.g_filter_output_stream_get_close_base_stream(this);
		public void set_close_base_stream(bool close_base) => Gio.GioInterop.g_filter_output_stream_set_close_base_stream(this, close_base);
		public void clear_pending() => Gio.GioInterop.g_output_stream_clear_pending(this);
		public bool close(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_close(this, cancellable, out error);
		public void close_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_close_async(this, io_priority, cancellable, callback, user_data);
		public bool close_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_close_finish(this, result, out error);
		public bool flush(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_flush(this, cancellable, out error);
		public void flush_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_flush_async(this, io_priority, cancellable, callback, user_data);
		public bool flush_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_flush_finish(this, result, out error);
		public bool has_pending() => Gio.GioInterop.g_output_stream_has_pending(this);
		public bool is_closed() => Gio.GioInterop.g_output_stream_is_closed(this);
		public bool is_closing() => Gio.GioInterop.g_output_stream_is_closing(this);
		public bool set_pending(out GLib.Error error) => Gio.GioInterop.g_output_stream_set_pending(this, out error);
		public long splice(Gio.InputStream source, Gio.OutputStreamSpliceFlags flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_splice(this, source, flags, cancellable, out error);
		public void splice_async(Gio.InputStream source, Gio.OutputStreamSpliceFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_splice_async(this, source, flags, io_priority, cancellable, callback, user_data);
		public long splice_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_splice_finish(this, result, out error);
		public long write(System.IntPtr buffer, ulong count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_write(this, buffer, count, cancellable, out error);
		public bool write_all(System.IntPtr buffer, ulong count, System.IntPtr bytes_written, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_all(this, buffer, count, bytes_written, cancellable, out error);
		public void write_all_async(System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_write_all_async(this, buffer, count, io_priority, cancellable, callback, user_data);
		public bool write_all_finish(Gio.AsyncResult result, System.IntPtr bytes_written, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_all_finish(this, result, bytes_written, out error);
		public void write_async(System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_write_async(this, buffer, count, io_priority, cancellable, callback, user_data);
		public long write_bytes(GLib.Bytes bytes, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_bytes(this, bytes, cancellable, out error);
		public void write_bytes_async(GLib.Bytes bytes, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_write_bytes_async(this, bytes, io_priority, cancellable, callback, user_data);
		public long write_bytes_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_bytes_finish(this, result, out error);
		public long write_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_finish(this, result, out error);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_converter_output_stream_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct ConverterOutputStreamPrivate
	{
		private IntPtr _pointer;
		public ConverterOutputStreamPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator ConverterOutputStreamPrivate(IntPtr pointer) => new ConverterOutputStreamPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(ConverterOutputStreamPrivate value) => value._pointer;
	}
	public ref struct ConverterOutputStreamClass
	{
		private IntPtr _pointer;
		public ConverterOutputStreamClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator ConverterOutputStreamClass(IntPtr pointer) => new ConverterOutputStreamClass(pointer, checkType: true);
		public static explicit operator IntPtr(ConverterOutputStreamClass value) => value._pointer;
	}
	public ref struct Credentials
	{
		private IntPtr _pointer;
		public Credentials(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator Credentials(IntPtr pointer) => new Credentials(pointer, checkType: true);
		public static explicit operator IntPtr(Credentials value) => value._pointer;
		public static implicit operator GObject.Object(Credentials value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator Credentials(GObject.Object value) => new Credentials((IntPtr)value, checkType: true);
		public static Gio.Credentials @new() => GioInterop.g_credentials_new();
		public System.IntPtr get_native(Gio.CredentialsType native_type) => Gio.GioInterop.g_credentials_get_native(this, native_type);
		public int get_unix_pid(out GLib.Error error) => Gio.GioInterop.g_credentials_get_unix_pid(this, out error);
		public uint get_unix_user(out GLib.Error error) => Gio.GioInterop.g_credentials_get_unix_user(this, out error);
		public bool is_same_user(Gio.Credentials other_credentials, out GLib.Error error) => Gio.GioInterop.g_credentials_is_same_user(this, other_credentials, out error);
		public void set_native(Gio.CredentialsType native_type, System.IntPtr native) => Gio.GioInterop.g_credentials_set_native(this, native_type, native);
		public bool set_unix_user(uint uid, out GLib.Error error) => Gio.GioInterop.g_credentials_set_unix_user(this, uid, out error);
		public string to_string() => Gio.GioInterop.g_credentials_to_string(this);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_credentials_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public enum CredentialsType
	{
		invalid = 0,
		linux_ucred = 1,
		freebsd_cmsgcred = 2,
		openbsd_sockpeercred = 3,
		solaris_ucred = 4,
		netbsd_unpcbid = 5,
	}
	public ref struct CredentialsClass
	{
		private IntPtr _pointer;
		public CredentialsClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator CredentialsClass(IntPtr pointer) => new CredentialsClass(pointer, checkType: true);
		public static explicit operator IntPtr(CredentialsClass value) => value._pointer;
	}
	public ref struct RemoteActionGroup
	{
		private IntPtr _pointer;
		public RemoteActionGroup(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator RemoteActionGroup(IntPtr pointer) => new RemoteActionGroup(pointer, checkType: true);
		public static explicit operator IntPtr(RemoteActionGroup value) => value._pointer;
		public void activate_action_full(string action_name, GLib.Variant parameter, GLib.Variant platform_data) => Gio.GioInterop.g_remote_action_group_activate_action_full(this, action_name, parameter, platform_data);
		public void change_action_state_full(string action_name, GLib.Variant value, GLib.Variant platform_data) => Gio.GioInterop.g_remote_action_group_change_action_state_full(this, action_name, value, platform_data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_remote_action_group_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct DBusActionGroup
	{
		private IntPtr _pointer;
		public DBusActionGroup(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator DBusActionGroup(IntPtr pointer) => new DBusActionGroup(pointer, checkType: true);
		public static explicit operator IntPtr(DBusActionGroup value) => value._pointer;
		public static implicit operator GObject.Object(DBusActionGroup value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator DBusActionGroup(GObject.Object value) => new DBusActionGroup((IntPtr)value, checkType: true);
		public static Gio.DBusActionGroup get(Gio.DBusConnection connection, string bus_name, string object_path) => GioInterop.g_dbus_action_group_get(connection, bus_name, object_path);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_dbus_action_group_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct DBusAnnotationInfo
	{
		private IntPtr _pointer;
		public DBusAnnotationInfo(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DBusAnnotationInfo(IntPtr pointer) => new DBusAnnotationInfo(pointer, checkType: true);
		public static explicit operator IntPtr(DBusAnnotationInfo value) => value._pointer;
		public Gio.DBusAnnotationInfo @ref() => Gio.GioInterop.g_dbus_annotation_info_ref(this);
		public void unref() => Gio.GioInterop.g_dbus_annotation_info_unref(this);
		public static string lookup(System.IntPtr annotations, string name) => GioInterop.g_dbus_annotation_info_lookup(annotations, name);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_dbus_annotation_info_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct DBusArgInfo
	{
		private IntPtr _pointer;
		public DBusArgInfo(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DBusArgInfo(IntPtr pointer) => new DBusArgInfo(pointer, checkType: true);
		public static explicit operator IntPtr(DBusArgInfo value) => value._pointer;
		public Gio.DBusArgInfo @ref() => Gio.GioInterop.g_dbus_arg_info_ref(this);
		public void unref() => Gio.GioInterop.g_dbus_arg_info_unref(this);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_dbus_arg_info_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct DBusAuthObserver
	{
		private IntPtr _pointer;
		public DBusAuthObserver(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator DBusAuthObserver(IntPtr pointer) => new DBusAuthObserver(pointer, checkType: true);
		public static explicit operator IntPtr(DBusAuthObserver value) => value._pointer;
		public static implicit operator GObject.Object(DBusAuthObserver value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator DBusAuthObserver(GObject.Object value) => new DBusAuthObserver((IntPtr)value, checkType: true);
		public static Gio.DBusAuthObserver @new() => GioInterop.g_dbus_auth_observer_new();
		public bool allow_mechanism(string mechanism) => Gio.GioInterop.g_dbus_auth_observer_allow_mechanism(this, mechanism);
		public bool authorize_authenticated_peer(Gio.IOStream stream, Gio.Credentials credentials) => Gio.GioInterop.g_dbus_auth_observer_authorize_authenticated_peer(this, stream, credentials);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_dbus_auth_observer_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct IOStream
	{
		private IntPtr _pointer;
		public IOStream(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator IOStream(IntPtr pointer) => new IOStream(pointer, checkType: true);
		public static explicit operator IntPtr(IOStream value) => value._pointer;
		public static implicit operator GObject.Object(IOStream value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator IOStream(GObject.Object value) => new IOStream((IntPtr)value, checkType: true);
		public static bool splice_finish(Gio.AsyncResult result, out GLib.Error error) => GioInterop.g_io_stream_splice_finish(result, out error);
		public void clear_pending() => Gio.GioInterop.g_io_stream_clear_pending(this);
		public bool close(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_io_stream_close(this, cancellable, out error);
		public void close_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_io_stream_close_async(this, io_priority, cancellable, callback, user_data);
		public bool close_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_io_stream_close_finish(this, result, out error);
		public Gio.InputStream get_input_stream() => Gio.GioInterop.g_io_stream_get_input_stream(this);
		public Gio.OutputStream get_output_stream() => Gio.GioInterop.g_io_stream_get_output_stream(this);
		public bool has_pending() => Gio.GioInterop.g_io_stream_has_pending(this);
		public bool is_closed() => Gio.GioInterop.g_io_stream_is_closed(this);
		public bool set_pending(out GLib.Error error) => Gio.GioInterop.g_io_stream_set_pending(this, out error);
		public void splice_async(Gio.IOStream stream2, Gio.IOStreamSpliceFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_io_stream_splice_async(this, stream2, flags, io_priority, cancellable, callback, user_data);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_io_stream_get_type")]
		public static extern GLib.GType TypeOf();
	}
	[Flags]
	public enum DBusCallFlags
	{
		none = 0,
		no_auto_start = 1,
		allow_interactive_authorization = 2,
	}
	[Flags]
	public enum DBusCapabilityFlags
	{
		none = 0,
		unix_fd_passing = 1,
	}
	[Flags]
	public enum DBusConnectionFlags
	{
		none = 0,
		authentication_client = 1,
		authentication_server = 2,
		authentication_allow_anonymous = 4,
		message_bus_connection = 8,
		delay_message_processing = 16,
	}
	public ref struct UnixFDList
	{
		private IntPtr _pointer;
		public UnixFDList(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator UnixFDList(IntPtr pointer) => new UnixFDList(pointer, checkType: true);
		public static explicit operator IntPtr(UnixFDList value) => value._pointer;
		public static implicit operator GObject.Object(UnixFDList value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator UnixFDList(GObject.Object value) => new UnixFDList((IntPtr)value, checkType: true);
		public static Gio.UnixFDList @new() => GioInterop.g_unix_fd_list_new();
		public static Gio.UnixFDList new_from_array(System.IntPtr fds, int n_fds) => GioInterop.g_unix_fd_list_new_from_array(fds, n_fds);
		public int append(int fd, out GLib.Error error) => Gio.GioInterop.g_unix_fd_list_append(this, fd, out error);
		public int get(int index_, out GLib.Error error) => Gio.GioInterop.g_unix_fd_list_get(this, index_, out error);
		public int get_length() => Gio.GioInterop.g_unix_fd_list_get_length(this);
		public System.IntPtr peek_fds(System.IntPtr length) => Gio.GioInterop.g_unix_fd_list_peek_fds(this, length);
		public System.IntPtr steal_fds(System.IntPtr length) => Gio.GioInterop.g_unix_fd_list_steal_fds(this, length);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_unix_fd_list_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct MenuModel
	{
		private IntPtr _pointer;
		public MenuModel(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator MenuModel(IntPtr pointer) => new MenuModel(pointer, checkType: true);
		public static explicit operator IntPtr(MenuModel value) => value._pointer;
		public static implicit operator GObject.Object(MenuModel value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator MenuModel(GObject.Object value) => new MenuModel((IntPtr)value, checkType: true);
		public GLib.Variant get_item_attribute_value(int item_index, string attribute, GLib.VariantType expected_type) => Gio.GioInterop.g_menu_model_get_item_attribute_value(this, item_index, attribute, expected_type);
		public Gio.MenuModel get_item_link(int item_index, string link) => Gio.GioInterop.g_menu_model_get_item_link(this, item_index, link);
		public int get_n_items() => Gio.GioInterop.g_menu_model_get_n_items(this);
		public bool is_mutable() => Gio.GioInterop.g_menu_model_is_mutable(this);
		public void items_changed(int position, int removed, int added) => Gio.GioInterop.g_menu_model_items_changed(this, position, removed, added);
		public Gio.MenuAttributeIter iterate_item_attributes(int item_index) => Gio.GioInterop.g_menu_model_iterate_item_attributes(this, item_index);
		public Gio.MenuLinkIter iterate_item_links(int item_index) => Gio.GioInterop.g_menu_model_iterate_item_links(this, item_index);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_menu_model_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct DBusInterfaceInfo
	{
		private IntPtr _pointer;
		public DBusInterfaceInfo(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DBusInterfaceInfo(IntPtr pointer) => new DBusInterfaceInfo(pointer, checkType: true);
		public static explicit operator IntPtr(DBusInterfaceInfo value) => value._pointer;
		public void cache_build() => Gio.GioInterop.g_dbus_interface_info_cache_build(this);
		public void cache_release() => Gio.GioInterop.g_dbus_interface_info_cache_release(this);
		public void generate_xml(uint indent, GLib.String string_builder) => Gio.GioInterop.g_dbus_interface_info_generate_xml(this, indent, string_builder);
		public Gio.DBusMethodInfo lookup_method(string name) => Gio.GioInterop.g_dbus_interface_info_lookup_method(this, name);
		public Gio.DBusPropertyInfo lookup_property(string name) => Gio.GioInterop.g_dbus_interface_info_lookup_property(this, name);
		public Gio.DBusSignalInfo lookup_signal(string name) => Gio.GioInterop.g_dbus_interface_info_lookup_signal(this, name);
		public Gio.DBusInterfaceInfo @ref() => Gio.GioInterop.g_dbus_interface_info_ref(this);
		public void unref() => Gio.GioInterop.g_dbus_interface_info_unref(this);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_dbus_interface_info_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct DBusInterfaceVTable
	{
		private IntPtr _pointer;
		public DBusInterfaceVTable(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DBusInterfaceVTable(IntPtr pointer) => new DBusInterfaceVTable(pointer, checkType: true);
		public static explicit operator IntPtr(DBusInterfaceVTable value) => value._pointer;
	}
	public ref struct DBusSubtreeVTable
	{
		private IntPtr _pointer;
		public DBusSubtreeVTable(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DBusSubtreeVTable(IntPtr pointer) => new DBusSubtreeVTable(pointer, checkType: true);
		public static explicit operator IntPtr(DBusSubtreeVTable value) => value._pointer;
	}
	[Flags]
	public enum DBusSubtreeFlags
	{
		none = 0,
		dispatch_to_unenumerated_nodes = 1,
	}
	public ref struct DBusMessage
	{
		private IntPtr _pointer;
		public DBusMessage(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator DBusMessage(IntPtr pointer) => new DBusMessage(pointer, checkType: true);
		public static explicit operator IntPtr(DBusMessage value) => value._pointer;
		public static implicit operator GObject.Object(DBusMessage value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator DBusMessage(GObject.Object value) => new DBusMessage((IntPtr)value, checkType: true);
		public static Gio.DBusMessage @new() => GioInterop.g_dbus_message_new();
		public static Gio.DBusMessage new_from_blob(System.IntPtr blob, ulong blob_len, Gio.DBusCapabilityFlags capabilities, out GLib.Error error) => GioInterop.g_dbus_message_new_from_blob(blob, blob_len, capabilities, out error);
		public static Gio.DBusMessage new_method_call(string name, string path, string interface_, string method) => GioInterop.g_dbus_message_new_method_call(name, path, interface_, method);
		public static Gio.DBusMessage new_signal(string path, string interface_, string signal) => GioInterop.g_dbus_message_new_signal(path, interface_, signal);
		public static long bytes_needed(System.IntPtr blob, ulong blob_len, out GLib.Error error) => GioInterop.g_dbus_message_bytes_needed(blob, blob_len, out error);
		public Gio.DBusMessage copy(out GLib.Error error) => Gio.GioInterop.g_dbus_message_copy(this, out error);
		public string get_arg0() => Gio.GioInterop.g_dbus_message_get_arg0(this);
		public GLib.Variant get_body() => Gio.GioInterop.g_dbus_message_get_body(this);
		public Gio.DBusMessageByteOrder get_byte_order() => Gio.GioInterop.g_dbus_message_get_byte_order(this);
		public string get_destination() => Gio.GioInterop.g_dbus_message_get_destination(this);
		public string get_error_name() => Gio.GioInterop.g_dbus_message_get_error_name(this);
		public Gio.DBusMessageFlags get_flags() => Gio.GioInterop.g_dbus_message_get_flags(this);
		public GLib.Variant get_header(Gio.DBusMessageHeaderField header_field) => Gio.GioInterop.g_dbus_message_get_header(this, header_field);
		public System.IntPtr get_header_fields() => Gio.GioInterop.g_dbus_message_get_header_fields(this);
		public string get_interface() => Gio.GioInterop.g_dbus_message_get_interface(this);
		public bool get_locked() => Gio.GioInterop.g_dbus_message_get_locked(this);
		public string get_member() => Gio.GioInterop.g_dbus_message_get_member(this);
		public Gio.DBusMessageType get_message_type() => Gio.GioInterop.g_dbus_message_get_message_type(this);
		public uint get_num_unix_fds() => Gio.GioInterop.g_dbus_message_get_num_unix_fds(this);
		public string get_path() => Gio.GioInterop.g_dbus_message_get_path(this);
		public uint get_reply_serial() => Gio.GioInterop.g_dbus_message_get_reply_serial(this);
		public string get_sender() => Gio.GioInterop.g_dbus_message_get_sender(this);
		public uint get_serial() => Gio.GioInterop.g_dbus_message_get_serial(this);
		public string get_signature() => Gio.GioInterop.g_dbus_message_get_signature(this);
		public Gio.UnixFDList get_unix_fd_list() => Gio.GioInterop.g_dbus_message_get_unix_fd_list(this);
		public void @lock() => Gio.GioInterop.g_dbus_message_lock(this);
		public Gio.DBusMessage new_method_error_literal(string error_name, string error_message) => Gio.GioInterop.g_dbus_message_new_method_error_literal(this, error_name, error_message);
		public Gio.DBusMessage new_method_reply() => Gio.GioInterop.g_dbus_message_new_method_reply(this);
		public string print(uint indent) => Gio.GioInterop.g_dbus_message_print(this, indent);
		public void set_body(GLib.Variant body) => Gio.GioInterop.g_dbus_message_set_body(this, body);
		public void set_byte_order(Gio.DBusMessageByteOrder byte_order) => Gio.GioInterop.g_dbus_message_set_byte_order(this, byte_order);
		public void set_destination(string value) => Gio.GioInterop.g_dbus_message_set_destination(this, value);
		public void set_error_name(string value) => Gio.GioInterop.g_dbus_message_set_error_name(this, value);
		public void set_flags(Gio.DBusMessageFlags flags) => Gio.GioInterop.g_dbus_message_set_flags(this, flags);
		public void set_header(Gio.DBusMessageHeaderField header_field, GLib.Variant value) => Gio.GioInterop.g_dbus_message_set_header(this, header_field, value);
		public void set_interface(string value) => Gio.GioInterop.g_dbus_message_set_interface(this, value);
		public void set_member(string value) => Gio.GioInterop.g_dbus_message_set_member(this, value);
		public void set_message_type(Gio.DBusMessageType type) => Gio.GioInterop.g_dbus_message_set_message_type(this, type);
		public void set_num_unix_fds(uint value) => Gio.GioInterop.g_dbus_message_set_num_unix_fds(this, value);
		public void set_path(string value) => Gio.GioInterop.g_dbus_message_set_path(this, value);
		public void set_reply_serial(uint value) => Gio.GioInterop.g_dbus_message_set_reply_serial(this, value);
		public void set_sender(string value) => Gio.GioInterop.g_dbus_message_set_sender(this, value);
		public void set_serial(uint serial) => Gio.GioInterop.g_dbus_message_set_serial(this, serial);
		public void set_signature(string value) => Gio.GioInterop.g_dbus_message_set_signature(this, value);
		public void set_unix_fd_list(Gio.UnixFDList fd_list) => Gio.GioInterop.g_dbus_message_set_unix_fd_list(this, fd_list);
		public System.IntPtr to_blob(System.IntPtr out_size, Gio.DBusCapabilityFlags capabilities, out GLib.Error error) => Gio.GioInterop.g_dbus_message_to_blob(this, out_size, capabilities, out error);
		public bool to_gerror(out GLib.Error error) => Gio.GioInterop.g_dbus_message_to_gerror(this, out error);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_dbus_message_get_type")]
		public static extern GLib.GType TypeOf();
	}
	[Flags]
	public enum DBusSendMessageFlags
	{
		none = 0,
		preserve_serial = 1,
	}
	[Flags]
	public enum DBusSignalFlags
	{
		none = 0,
		no_match_rule = 1,
		match_arg0_namespace = 2,
		match_arg0_path = 4,
	}
	public ref struct DBusErrorEntry
	{
		private IntPtr _pointer;
		public DBusErrorEntry(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DBusErrorEntry(IntPtr pointer) => new DBusErrorEntry(pointer, checkType: true);
		public static explicit operator IntPtr(DBusErrorEntry value) => value._pointer;
	}
	public enum DBusError
	{
		failed = 0,
		no_memory = 1,
		service_unknown = 2,
		name_has_no_owner = 3,
		no_reply = 4,
		io_error = 5,
		bad_address = 6,
		not_supported = 7,
		limits_exceeded = 8,
		access_denied = 9,
		auth_failed = 10,
		no_server = 11,
		timeout = 12,
		no_network = 13,
		address_in_use = 14,
		disconnected = 15,
		invalid_args = 16,
		file_not_found = 17,
		file_exists = 18,
		unknown_method = 19,
		timed_out = 20,
		match_rule_not_found = 21,
		match_rule_invalid = 22,
		spawn_exec_failed = 23,
		spawn_fork_failed = 24,
		spawn_child_exited = 25,
		spawn_child_signaled = 26,
		spawn_failed = 27,
		spawn_setup_failed = 28,
		spawn_config_invalid = 29,
		spawn_service_invalid = 30,
		spawn_service_not_found = 31,
		spawn_permissions_invalid = 32,
		spawn_file_invalid = 33,
		spawn_no_memory = 34,
		unix_process_id_unknown = 35,
		invalid_signature = 36,
		invalid_file_content = 37,
		selinux_security_context_unknown = 38,
		adt_audit_data_unknown = 39,
		object_path_in_use = 40,
		unknown_object = 41,
		unknown_interface = 42,
		unknown_property = 43,
		property_read_only = 44,
	}
	public ref struct DBusObject
	{
		private IntPtr _pointer;
		public DBusObject(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DBusObject(IntPtr pointer) => new DBusObject(pointer, checkType: true);
		public static explicit operator IntPtr(DBusObject value) => value._pointer;
		public Gio.DBusInterface get_interface(string interface_name) => Gio.GioInterop.g_dbus_object_get_interface(this, interface_name);
		public System.IntPtr get_interfaces() => Gio.GioInterop.g_dbus_object_get_interfaces(this);
		public string get_object_path() => Gio.GioInterop.g_dbus_object_get_object_path(this);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_dbus_object_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct DBusInterface
	{
		private IntPtr _pointer;
		public DBusInterface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DBusInterface(IntPtr pointer) => new DBusInterface(pointer, checkType: true);
		public static explicit operator IntPtr(DBusInterface value) => value._pointer;
		public Gio.DBusObject dup_object() => Gio.GioInterop.g_dbus_interface_dup_object(this);
		public Gio.DBusInterfaceInfo get_info() => Gio.GioInterop.g_dbus_interface_get_info(this);
		public Gio.DBusObject get_object() => Gio.GioInterop.g_dbus_interface_get_object(this);
		public void set_object(Gio.DBusObject @object) => Gio.GioInterop.g_dbus_interface_set_object(this, @object);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_dbus_interface_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct DBusInterfaceIface
	{
		private IntPtr _pointer;
		public DBusInterfaceIface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DBusInterfaceIface(IntPtr pointer) => new DBusInterfaceIface(pointer, checkType: true);
		public static explicit operator IntPtr(DBusInterfaceIface value) => value._pointer;
	}
	public ref struct DBusMethodInfo
	{
		private IntPtr _pointer;
		public DBusMethodInfo(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DBusMethodInfo(IntPtr pointer) => new DBusMethodInfo(pointer, checkType: true);
		public static explicit operator IntPtr(DBusMethodInfo value) => value._pointer;
		public Gio.DBusMethodInfo @ref() => Gio.GioInterop.g_dbus_method_info_ref(this);
		public void unref() => Gio.GioInterop.g_dbus_method_info_unref(this);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_dbus_method_info_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct DBusSignalInfo
	{
		private IntPtr _pointer;
		public DBusSignalInfo(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DBusSignalInfo(IntPtr pointer) => new DBusSignalInfo(pointer, checkType: true);
		public static explicit operator IntPtr(DBusSignalInfo value) => value._pointer;
		public Gio.DBusSignalInfo @ref() => Gio.GioInterop.g_dbus_signal_info_ref(this);
		public void unref() => Gio.GioInterop.g_dbus_signal_info_unref(this);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_dbus_signal_info_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct DBusPropertyInfo
	{
		private IntPtr _pointer;
		public DBusPropertyInfo(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DBusPropertyInfo(IntPtr pointer) => new DBusPropertyInfo(pointer, checkType: true);
		public static explicit operator IntPtr(DBusPropertyInfo value) => value._pointer;
		public Gio.DBusPropertyInfo @ref() => Gio.GioInterop.g_dbus_property_info_ref(this);
		public void unref() => Gio.GioInterop.g_dbus_property_info_unref(this);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_dbus_property_info_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct DBusMethodInvocation
	{
		private IntPtr _pointer;
		public DBusMethodInvocation(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator DBusMethodInvocation(IntPtr pointer) => new DBusMethodInvocation(pointer, checkType: true);
		public static explicit operator IntPtr(DBusMethodInvocation value) => value._pointer;
		public static implicit operator GObject.Object(DBusMethodInvocation value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator DBusMethodInvocation(GObject.Object value) => new DBusMethodInvocation((IntPtr)value, checkType: true);
		public Gio.DBusConnection get_connection() => Gio.GioInterop.g_dbus_method_invocation_get_connection(this);
		public string get_interface_name() => Gio.GioInterop.g_dbus_method_invocation_get_interface_name(this);
		public Gio.DBusMessage get_message() => Gio.GioInterop.g_dbus_method_invocation_get_message(this);
		public Gio.DBusMethodInfo get_method_info() => Gio.GioInterop.g_dbus_method_invocation_get_method_info(this);
		public string get_method_name() => Gio.GioInterop.g_dbus_method_invocation_get_method_name(this);
		public string get_object_path() => Gio.GioInterop.g_dbus_method_invocation_get_object_path(this);
		public GLib.Variant get_parameters() => Gio.GioInterop.g_dbus_method_invocation_get_parameters(this);
		public Gio.DBusPropertyInfo get_property_info() => Gio.GioInterop.g_dbus_method_invocation_get_property_info(this);
		public string get_sender() => Gio.GioInterop.g_dbus_method_invocation_get_sender(this);
		public System.IntPtr get_user_data() => Gio.GioInterop.g_dbus_method_invocation_get_user_data(this);
		public void return_dbus_error(string error_name, string error_message) => Gio.GioInterop.g_dbus_method_invocation_return_dbus_error(this, error_name, error_message);
		public void return_error_literal(uint domain, int code, string message) => Gio.GioInterop.g_dbus_method_invocation_return_error_literal(this, domain, code, message);
		public void return_gerror(GLib.Error error) => Gio.GioInterop.g_dbus_method_invocation_return_gerror(this, error);
		public void return_value(GLib.Variant parameters) => Gio.GioInterop.g_dbus_method_invocation_return_value(this, parameters);
		public void return_value_with_unix_fd_list(GLib.Variant parameters, Gio.UnixFDList fd_list) => Gio.GioInterop.g_dbus_method_invocation_return_value_with_unix_fd_list(this, parameters, fd_list);
		public void take_error(GLib.Error error) => Gio.GioInterop.g_dbus_method_invocation_take_error(this, error);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_dbus_method_invocation_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct DBusInterfaceSkeleton
	{
		private IntPtr _pointer;
		public DBusInterfaceSkeleton(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator DBusInterfaceSkeleton(IntPtr pointer) => new DBusInterfaceSkeleton(pointer, checkType: true);
		public static explicit operator IntPtr(DBusInterfaceSkeleton value) => value._pointer;
		public static implicit operator GObject.Object(DBusInterfaceSkeleton value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator DBusInterfaceSkeleton(GObject.Object value) => new DBusInterfaceSkeleton((IntPtr)value, checkType: true);
		public bool export(Gio.DBusConnection connection, string object_path, out GLib.Error error) => Gio.GioInterop.g_dbus_interface_skeleton_export(this, connection, object_path, out error);
		public void flush() => Gio.GioInterop.g_dbus_interface_skeleton_flush(this);
		public Gio.DBusConnection get_connection() => Gio.GioInterop.g_dbus_interface_skeleton_get_connection(this);
		public System.IntPtr get_connections() => Gio.GioInterop.g_dbus_interface_skeleton_get_connections(this);
		public Gio.DBusInterfaceSkeletonFlags get_flags() => Gio.GioInterop.g_dbus_interface_skeleton_get_flags(this);
		public Gio.DBusInterfaceInfo get_info() => Gio.GioInterop.g_dbus_interface_skeleton_get_info(this);
		public string get_object_path() => Gio.GioInterop.g_dbus_interface_skeleton_get_object_path(this);
		public GLib.Variant get_properties() => Gio.GioInterop.g_dbus_interface_skeleton_get_properties(this);
		public Gio.DBusInterfaceVTable get_vtable() => Gio.GioInterop.g_dbus_interface_skeleton_get_vtable(this);
		public bool has_connection(Gio.DBusConnection connection) => Gio.GioInterop.g_dbus_interface_skeleton_has_connection(this, connection);
		public void set_flags(Gio.DBusInterfaceSkeletonFlags flags) => Gio.GioInterop.g_dbus_interface_skeleton_set_flags(this, flags);
		public void unexport() => Gio.GioInterop.g_dbus_interface_skeleton_unexport(this);
		public void unexport_from_connection(Gio.DBusConnection connection) => Gio.GioInterop.g_dbus_interface_skeleton_unexport_from_connection(this, connection);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_dbus_interface_skeleton_get_type")]
		public static extern GLib.GType TypeOf();
	}
	[Flags]
	public enum DBusInterfaceSkeletonFlags
	{
		none = 0,
		handle_method_invocations_in_thread = 1,
	}
	public ref struct DBusInterfaceSkeletonPrivate
	{
		private IntPtr _pointer;
		public DBusInterfaceSkeletonPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DBusInterfaceSkeletonPrivate(IntPtr pointer) => new DBusInterfaceSkeletonPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(DBusInterfaceSkeletonPrivate value) => value._pointer;
	}
	public ref struct DBusInterfaceSkeletonClass
	{
		private IntPtr _pointer;
		public DBusInterfaceSkeletonClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DBusInterfaceSkeletonClass(IntPtr pointer) => new DBusInterfaceSkeletonClass(pointer, checkType: true);
		public static explicit operator IntPtr(DBusInterfaceSkeletonClass value) => value._pointer;
	}
	public ref struct DBusMenuModel
	{
		private IntPtr _pointer;
		public DBusMenuModel(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator DBusMenuModel(IntPtr pointer) => new DBusMenuModel(pointer, checkType: true);
		public static explicit operator IntPtr(DBusMenuModel value) => value._pointer;
		public static implicit operator Gio.MenuModel(DBusMenuModel value) => new Gio.MenuModel((IntPtr)value, checkType: false);
		public static explicit operator DBusMenuModel(Gio.MenuModel value) => new DBusMenuModel((IntPtr)value, checkType: true);
		public static implicit operator GObject.Object(DBusMenuModel value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator DBusMenuModel(GObject.Object value) => new DBusMenuModel((IntPtr)value, checkType: true);
		public static Gio.DBusMenuModel get(Gio.DBusConnection connection, string bus_name, string object_path) => GioInterop.g_dbus_menu_model_get(connection, bus_name, object_path);
		public GLib.Variant get_item_attribute_value(int item_index, string attribute, GLib.VariantType expected_type) => Gio.GioInterop.g_menu_model_get_item_attribute_value(this, item_index, attribute, expected_type);
		public Gio.MenuModel get_item_link(int item_index, string link) => Gio.GioInterop.g_menu_model_get_item_link(this, item_index, link);
		public int get_n_items() => Gio.GioInterop.g_menu_model_get_n_items(this);
		public bool is_mutable() => Gio.GioInterop.g_menu_model_is_mutable(this);
		public void items_changed(int position, int removed, int added) => Gio.GioInterop.g_menu_model_items_changed(this, position, removed, added);
		public Gio.MenuAttributeIter iterate_item_attributes(int item_index) => Gio.GioInterop.g_menu_model_iterate_item_attributes(this, item_index);
		public Gio.MenuLinkIter iterate_item_links(int item_index) => Gio.GioInterop.g_menu_model_iterate_item_links(this, item_index);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_dbus_menu_model_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public enum DBusMessageByteOrder
	{
		big_endian = 66,
		little_endian = 108,
	}
	[Flags]
	public enum DBusMessageFlags
	{
		none = 0,
		no_reply_expected = 1,
		no_auto_start = 2,
		allow_interactive_authorization = 4,
	}
	public enum DBusMessageHeaderField
	{
		invalid = 0,
		path = 1,
		@interface = 2,
		member = 3,
		error_name = 4,
		reply_serial = 5,
		destination = 6,
		sender = 7,
		signature = 8,
		num_unix_fds = 9,
	}
	public enum DBusMessageType
	{
		invalid = 0,
		method_call = 1,
		method_return = 2,
		error = 3,
		signal = 4,
	}
	public ref struct DBusNodeInfo
	{
		private IntPtr _pointer;
		public DBusNodeInfo(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DBusNodeInfo(IntPtr pointer) => new DBusNodeInfo(pointer, checkType: true);
		public static explicit operator IntPtr(DBusNodeInfo value) => value._pointer;
		public static Gio.DBusNodeInfo new_for_xml(string xml_data, out GLib.Error error) => GioInterop.g_dbus_node_info_new_for_xml(xml_data, out error);
		public void generate_xml(uint indent, GLib.String string_builder) => Gio.GioInterop.g_dbus_node_info_generate_xml(this, indent, string_builder);
		public Gio.DBusInterfaceInfo lookup_interface(string name) => Gio.GioInterop.g_dbus_node_info_lookup_interface(this, name);
		public Gio.DBusNodeInfo @ref() => Gio.GioInterop.g_dbus_node_info_ref(this);
		public void unref() => Gio.GioInterop.g_dbus_node_info_unref(this);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_dbus_node_info_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct DBusObjectIface
	{
		private IntPtr _pointer;
		public DBusObjectIface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DBusObjectIface(IntPtr pointer) => new DBusObjectIface(pointer, checkType: true);
		public static explicit operator IntPtr(DBusObjectIface value) => value._pointer;
	}
	public ref struct DBusObjectManager
	{
		private IntPtr _pointer;
		public DBusObjectManager(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DBusObjectManager(IntPtr pointer) => new DBusObjectManager(pointer, checkType: true);
		public static explicit operator IntPtr(DBusObjectManager value) => value._pointer;
		public Gio.DBusInterface get_interface(string object_path, string interface_name) => Gio.GioInterop.g_dbus_object_manager_get_interface(this, object_path, interface_name);
		public Gio.DBusObject get_object(string object_path) => Gio.GioInterop.g_dbus_object_manager_get_object(this, object_path);
		public string get_object_path() => Gio.GioInterop.g_dbus_object_manager_get_object_path(this);
		public System.IntPtr get_objects() => Gio.GioInterop.g_dbus_object_manager_get_objects(this);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_dbus_object_manager_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct DBusObjectManagerClient
	{
		private IntPtr _pointer;
		public DBusObjectManagerClient(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator DBusObjectManagerClient(IntPtr pointer) => new DBusObjectManagerClient(pointer, checkType: true);
		public static explicit operator IntPtr(DBusObjectManagerClient value) => value._pointer;
		public static implicit operator GObject.Object(DBusObjectManagerClient value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator DBusObjectManagerClient(GObject.Object value) => new DBusObjectManagerClient((IntPtr)value, checkType: true);
		public static Gio.DBusObjectManagerClient new_finish(Gio.AsyncResult res, out GLib.Error error) => GioInterop.g_dbus_object_manager_client_new_finish(res, out error);
		public static Gio.DBusObjectManagerClient new_for_bus_finish(Gio.AsyncResult res, out GLib.Error error) => GioInterop.g_dbus_object_manager_client_new_for_bus_finish(res, out error);
		public static Gio.DBusObjectManagerClient new_for_bus_sync(Gio.BusType bus_type, Gio.DBusObjectManagerClientFlags flags, string name, string object_path, System.IntPtr get_proxy_type_func, System.IntPtr get_proxy_type_user_data, System.IntPtr get_proxy_type_destroy_notify, Gio.Cancellable cancellable, out GLib.Error error) => GioInterop.g_dbus_object_manager_client_new_for_bus_sync(bus_type, flags, name, object_path, get_proxy_type_func, get_proxy_type_user_data, get_proxy_type_destroy_notify, cancellable, out error);
		public static Gio.DBusObjectManagerClient new_sync(Gio.DBusConnection connection, Gio.DBusObjectManagerClientFlags flags, string name, string object_path, System.IntPtr get_proxy_type_func, System.IntPtr get_proxy_type_user_data, System.IntPtr get_proxy_type_destroy_notify, Gio.Cancellable cancellable, out GLib.Error error) => GioInterop.g_dbus_object_manager_client_new_sync(connection, flags, name, object_path, get_proxy_type_func, get_proxy_type_user_data, get_proxy_type_destroy_notify, cancellable, out error);
		public static void @new(Gio.DBusConnection connection, Gio.DBusObjectManagerClientFlags flags, string name, string object_path, System.IntPtr get_proxy_type_func, System.IntPtr get_proxy_type_user_data, System.IntPtr get_proxy_type_destroy_notify, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => GioInterop.g_dbus_object_manager_client_new(connection, flags, name, object_path, get_proxy_type_func, get_proxy_type_user_data, get_proxy_type_destroy_notify, cancellable, callback, user_data);
		public static void new_for_bus(Gio.BusType bus_type, Gio.DBusObjectManagerClientFlags flags, string name, string object_path, System.IntPtr get_proxy_type_func, System.IntPtr get_proxy_type_user_data, System.IntPtr get_proxy_type_destroy_notify, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => GioInterop.g_dbus_object_manager_client_new_for_bus(bus_type, flags, name, object_path, get_proxy_type_func, get_proxy_type_user_data, get_proxy_type_destroy_notify, cancellable, callback, user_data);
		public Gio.DBusConnection get_connection() => Gio.GioInterop.g_dbus_object_manager_client_get_connection(this);
		public Gio.DBusObjectManagerClientFlags get_flags() => Gio.GioInterop.g_dbus_object_manager_client_get_flags(this);
		public string get_name() => Gio.GioInterop.g_dbus_object_manager_client_get_name(this);
		public string get_name_owner() => Gio.GioInterop.g_dbus_object_manager_client_get_name_owner(this);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_dbus_object_manager_client_get_type")]
		public static extern GLib.GType TypeOf();
	}
	[Flags]
	public enum DBusObjectManagerClientFlags
	{
		none = 0,
		do_not_auto_start = 1,
	}
	public ref struct DBusObjectManagerClientPrivate
	{
		private IntPtr _pointer;
		public DBusObjectManagerClientPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DBusObjectManagerClientPrivate(IntPtr pointer) => new DBusObjectManagerClientPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(DBusObjectManagerClientPrivate value) => value._pointer;
	}
	public ref struct DBusObjectProxy
	{
		private IntPtr _pointer;
		public DBusObjectProxy(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator DBusObjectProxy(IntPtr pointer) => new DBusObjectProxy(pointer, checkType: true);
		public static explicit operator IntPtr(DBusObjectProxy value) => value._pointer;
		public static implicit operator GObject.Object(DBusObjectProxy value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator DBusObjectProxy(GObject.Object value) => new DBusObjectProxy((IntPtr)value, checkType: true);
		public static Gio.DBusObjectProxy @new(Gio.DBusConnection connection, string object_path) => GioInterop.g_dbus_object_proxy_new(connection, object_path);
		public Gio.DBusConnection get_connection() => Gio.GioInterop.g_dbus_object_proxy_get_connection(this);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_dbus_object_proxy_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct DBusProxy
	{
		private IntPtr _pointer;
		public DBusProxy(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator DBusProxy(IntPtr pointer) => new DBusProxy(pointer, checkType: true);
		public static explicit operator IntPtr(DBusProxy value) => value._pointer;
		public static implicit operator GObject.Object(DBusProxy value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator DBusProxy(GObject.Object value) => new DBusProxy((IntPtr)value, checkType: true);
		public static Gio.DBusProxy new_finish(Gio.AsyncResult res, out GLib.Error error) => GioInterop.g_dbus_proxy_new_finish(res, out error);
		public static Gio.DBusProxy new_for_bus_finish(Gio.AsyncResult res, out GLib.Error error) => GioInterop.g_dbus_proxy_new_for_bus_finish(res, out error);
		public static Gio.DBusProxy new_for_bus_sync(Gio.BusType bus_type, Gio.DBusProxyFlags flags, Gio.DBusInterfaceInfo info, string name, string object_path, string interface_name, Gio.Cancellable cancellable, out GLib.Error error) => GioInterop.g_dbus_proxy_new_for_bus_sync(bus_type, flags, info, name, object_path, interface_name, cancellable, out error);
		public static Gio.DBusProxy new_sync(Gio.DBusConnection connection, Gio.DBusProxyFlags flags, Gio.DBusInterfaceInfo info, string name, string object_path, string interface_name, Gio.Cancellable cancellable, out GLib.Error error) => GioInterop.g_dbus_proxy_new_sync(connection, flags, info, name, object_path, interface_name, cancellable, out error);
		public static void @new(Gio.DBusConnection connection, Gio.DBusProxyFlags flags, Gio.DBusInterfaceInfo info, string name, string object_path, string interface_name, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => GioInterop.g_dbus_proxy_new(connection, flags, info, name, object_path, interface_name, cancellable, callback, user_data);
		public static void new_for_bus(Gio.BusType bus_type, Gio.DBusProxyFlags flags, Gio.DBusInterfaceInfo info, string name, string object_path, string interface_name, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => GioInterop.g_dbus_proxy_new_for_bus(bus_type, flags, info, name, object_path, interface_name, cancellable, callback, user_data);
		public void call(string method_name, GLib.Variant parameters, Gio.DBusCallFlags flags, int timeout_msec, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_dbus_proxy_call(this, method_name, parameters, flags, timeout_msec, cancellable, callback, user_data);
		public GLib.Variant call_finish(Gio.AsyncResult res, out GLib.Error error) => Gio.GioInterop.g_dbus_proxy_call_finish(this, res, out error);
		public GLib.Variant call_sync(string method_name, GLib.Variant parameters, Gio.DBusCallFlags flags, int timeout_msec, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_dbus_proxy_call_sync(this, method_name, parameters, flags, timeout_msec, cancellable, out error);
		public void call_with_unix_fd_list(string method_name, GLib.Variant parameters, Gio.DBusCallFlags flags, int timeout_msec, Gio.UnixFDList fd_list, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_dbus_proxy_call_with_unix_fd_list(this, method_name, parameters, flags, timeout_msec, fd_list, cancellable, callback, user_data);
		public GLib.Variant call_with_unix_fd_list_finish(out Gio.UnixFDList out_fd_list, Gio.AsyncResult res, out GLib.Error error) => Gio.GioInterop.g_dbus_proxy_call_with_unix_fd_list_finish(this, out out_fd_list, res, out error);
		public GLib.Variant call_with_unix_fd_list_sync(string method_name, GLib.Variant parameters, Gio.DBusCallFlags flags, int timeout_msec, Gio.UnixFDList fd_list, out Gio.UnixFDList out_fd_list, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_dbus_proxy_call_with_unix_fd_list_sync(this, method_name, parameters, flags, timeout_msec, fd_list, out out_fd_list, cancellable, out error);
		public GLib.Variant get_cached_property(string property_name) => Gio.GioInterop.g_dbus_proxy_get_cached_property(this, property_name);
		public System.IntPtr get_cached_property_names() => Gio.GioInterop.g_dbus_proxy_get_cached_property_names(this);
		public Gio.DBusConnection get_connection() => Gio.GioInterop.g_dbus_proxy_get_connection(this);
		public int get_default_timeout() => Gio.GioInterop.g_dbus_proxy_get_default_timeout(this);
		public Gio.DBusProxyFlags get_flags() => Gio.GioInterop.g_dbus_proxy_get_flags(this);
		public Gio.DBusInterfaceInfo get_interface_info() => Gio.GioInterop.g_dbus_proxy_get_interface_info(this);
		public string get_interface_name() => Gio.GioInterop.g_dbus_proxy_get_interface_name(this);
		public string get_name() => Gio.GioInterop.g_dbus_proxy_get_name(this);
		public string get_name_owner() => Gio.GioInterop.g_dbus_proxy_get_name_owner(this);
		public string get_object_path() => Gio.GioInterop.g_dbus_proxy_get_object_path(this);
		public void set_cached_property(string property_name, GLib.Variant value) => Gio.GioInterop.g_dbus_proxy_set_cached_property(this, property_name, value);
		public void set_default_timeout(int timeout_msec) => Gio.GioInterop.g_dbus_proxy_set_default_timeout(this, timeout_msec);
		public void set_interface_info(Gio.DBusInterfaceInfo info) => Gio.GioInterop.g_dbus_proxy_set_interface_info(this, info);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_dbus_proxy_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct DBusObjectManagerClientClass
	{
		private IntPtr _pointer;
		public DBusObjectManagerClientClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DBusObjectManagerClientClass(IntPtr pointer) => new DBusObjectManagerClientClass(pointer, checkType: true);
		public static explicit operator IntPtr(DBusObjectManagerClientClass value) => value._pointer;
	}
	public ref struct DBusObjectManagerIface
	{
		private IntPtr _pointer;
		public DBusObjectManagerIface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DBusObjectManagerIface(IntPtr pointer) => new DBusObjectManagerIface(pointer, checkType: true);
		public static explicit operator IntPtr(DBusObjectManagerIface value) => value._pointer;
	}
	public ref struct DBusObjectManagerServer
	{
		private IntPtr _pointer;
		public DBusObjectManagerServer(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator DBusObjectManagerServer(IntPtr pointer) => new DBusObjectManagerServer(pointer, checkType: true);
		public static explicit operator IntPtr(DBusObjectManagerServer value) => value._pointer;
		public static implicit operator GObject.Object(DBusObjectManagerServer value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator DBusObjectManagerServer(GObject.Object value) => new DBusObjectManagerServer((IntPtr)value, checkType: true);
		public static Gio.DBusObjectManagerServer @new(string object_path) => GioInterop.g_dbus_object_manager_server_new(object_path);
		public void export(Gio.DBusObjectSkeleton @object) => Gio.GioInterop.g_dbus_object_manager_server_export(this, @object);
		public void export_uniquely(Gio.DBusObjectSkeleton @object) => Gio.GioInterop.g_dbus_object_manager_server_export_uniquely(this, @object);
		public Gio.DBusConnection get_connection() => Gio.GioInterop.g_dbus_object_manager_server_get_connection(this);
		public bool is_exported(Gio.DBusObjectSkeleton @object) => Gio.GioInterop.g_dbus_object_manager_server_is_exported(this, @object);
		public void set_connection(Gio.DBusConnection connection) => Gio.GioInterop.g_dbus_object_manager_server_set_connection(this, connection);
		public bool unexport(string object_path) => Gio.GioInterop.g_dbus_object_manager_server_unexport(this, object_path);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_dbus_object_manager_server_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct DBusObjectSkeleton
	{
		private IntPtr _pointer;
		public DBusObjectSkeleton(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator DBusObjectSkeleton(IntPtr pointer) => new DBusObjectSkeleton(pointer, checkType: true);
		public static explicit operator IntPtr(DBusObjectSkeleton value) => value._pointer;
		public static implicit operator GObject.Object(DBusObjectSkeleton value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator DBusObjectSkeleton(GObject.Object value) => new DBusObjectSkeleton((IntPtr)value, checkType: true);
		public static Gio.DBusObjectSkeleton @new(string object_path) => GioInterop.g_dbus_object_skeleton_new(object_path);
		public void add_interface(Gio.DBusInterfaceSkeleton interface_) => Gio.GioInterop.g_dbus_object_skeleton_add_interface(this, interface_);
		public void flush() => Gio.GioInterop.g_dbus_object_skeleton_flush(this);
		public void remove_interface(Gio.DBusInterfaceSkeleton interface_) => Gio.GioInterop.g_dbus_object_skeleton_remove_interface(this, interface_);
		public void remove_interface_by_name(string interface_name) => Gio.GioInterop.g_dbus_object_skeleton_remove_interface_by_name(this, interface_name);
		public void set_object_path(string object_path) => Gio.GioInterop.g_dbus_object_skeleton_set_object_path(this, object_path);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_dbus_object_skeleton_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct DBusObjectManagerServerPrivate
	{
		private IntPtr _pointer;
		public DBusObjectManagerServerPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DBusObjectManagerServerPrivate(IntPtr pointer) => new DBusObjectManagerServerPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(DBusObjectManagerServerPrivate value) => value._pointer;
	}
	public ref struct DBusObjectManagerServerClass
	{
		private IntPtr _pointer;
		public DBusObjectManagerServerClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DBusObjectManagerServerClass(IntPtr pointer) => new DBusObjectManagerServerClass(pointer, checkType: true);
		public static explicit operator IntPtr(DBusObjectManagerServerClass value) => value._pointer;
	}
	public ref struct DBusObjectProxyPrivate
	{
		private IntPtr _pointer;
		public DBusObjectProxyPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DBusObjectProxyPrivate(IntPtr pointer) => new DBusObjectProxyPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(DBusObjectProxyPrivate value) => value._pointer;
	}
	public ref struct DBusObjectProxyClass
	{
		private IntPtr _pointer;
		public DBusObjectProxyClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DBusObjectProxyClass(IntPtr pointer) => new DBusObjectProxyClass(pointer, checkType: true);
		public static explicit operator IntPtr(DBusObjectProxyClass value) => value._pointer;
	}
	public ref struct DBusObjectSkeletonPrivate
	{
		private IntPtr _pointer;
		public DBusObjectSkeletonPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DBusObjectSkeletonPrivate(IntPtr pointer) => new DBusObjectSkeletonPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(DBusObjectSkeletonPrivate value) => value._pointer;
	}
	public ref struct DBusObjectSkeletonClass
	{
		private IntPtr _pointer;
		public DBusObjectSkeletonClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DBusObjectSkeletonClass(IntPtr pointer) => new DBusObjectSkeletonClass(pointer, checkType: true);
		public static explicit operator IntPtr(DBusObjectSkeletonClass value) => value._pointer;
	}
	[Flags]
	public enum DBusPropertyInfoFlags
	{
		none = 0,
		readable = 1,
		writable = 2,
	}
	[Flags]
	public enum DBusProxyFlags
	{
		none = 0,
		do_not_load_properties = 1,
		do_not_connect_signals = 2,
		do_not_auto_start = 4,
		get_invalidated_properties = 8,
		do_not_auto_start_at_construction = 16,
	}
	public ref struct DBusProxyPrivate
	{
		private IntPtr _pointer;
		public DBusProxyPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DBusProxyPrivate(IntPtr pointer) => new DBusProxyPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(DBusProxyPrivate value) => value._pointer;
	}
	public ref struct DBusProxyClass
	{
		private IntPtr _pointer;
		public DBusProxyClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DBusProxyClass(IntPtr pointer) => new DBusProxyClass(pointer, checkType: true);
		public static explicit operator IntPtr(DBusProxyClass value) => value._pointer;
	}
	public ref struct DBusServer
	{
		private IntPtr _pointer;
		public DBusServer(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator DBusServer(IntPtr pointer) => new DBusServer(pointer, checkType: true);
		public static explicit operator IntPtr(DBusServer value) => value._pointer;
		public static implicit operator GObject.Object(DBusServer value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator DBusServer(GObject.Object value) => new DBusServer((IntPtr)value, checkType: true);
		public static Gio.DBusServer new_sync(string address, Gio.DBusServerFlags flags, string guid, Gio.DBusAuthObserver observer, Gio.Cancellable cancellable, out GLib.Error error) => GioInterop.g_dbus_server_new_sync(address, flags, guid, observer, cancellable, out error);
		public string get_client_address() => Gio.GioInterop.g_dbus_server_get_client_address(this);
		public Gio.DBusServerFlags get_flags() => Gio.GioInterop.g_dbus_server_get_flags(this);
		public string get_guid() => Gio.GioInterop.g_dbus_server_get_guid(this);
		public bool is_active() => Gio.GioInterop.g_dbus_server_is_active(this);
		public void start() => Gio.GioInterop.g_dbus_server_start(this);
		public void stop() => Gio.GioInterop.g_dbus_server_stop(this);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_dbus_server_get_type")]
		public static extern GLib.GType TypeOf();
	}
	[Flags]
	public enum DBusServerFlags
	{
		none = 0,
		run_in_thread = 1,
		authentication_allow_anonymous = 2,
	}
	public ref struct DataInputStream
	{
		private IntPtr _pointer;
		public DataInputStream(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator DataInputStream(IntPtr pointer) => new DataInputStream(pointer, checkType: true);
		public static explicit operator IntPtr(DataInputStream value) => value._pointer;
		public static implicit operator Gio.BufferedInputStream(DataInputStream value) => new Gio.BufferedInputStream((IntPtr)value, checkType: false);
		public static explicit operator DataInputStream(Gio.BufferedInputStream value) => new DataInputStream((IntPtr)value, checkType: true);
		public static implicit operator Gio.FilterInputStream(DataInputStream value) => new Gio.FilterInputStream((IntPtr)value, checkType: false);
		public static explicit operator DataInputStream(Gio.FilterInputStream value) => new DataInputStream((IntPtr)value, checkType: true);
		public static implicit operator Gio.InputStream(DataInputStream value) => new Gio.InputStream((IntPtr)value, checkType: false);
		public static explicit operator DataInputStream(Gio.InputStream value) => new DataInputStream((IntPtr)value, checkType: true);
		public static implicit operator GObject.Object(DataInputStream value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator DataInputStream(GObject.Object value) => new DataInputStream((IntPtr)value, checkType: true);
		public static Gio.DataInputStream @new(Gio.InputStream base_stream) => GioInterop.g_data_input_stream_new(base_stream);
		public Gio.DataStreamByteOrder get_byte_order() => Gio.GioInterop.g_data_input_stream_get_byte_order(this);
		public Gio.DataStreamNewlineType get_newline_type() => Gio.GioInterop.g_data_input_stream_get_newline_type(this);
		public byte read_byte(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_data_input_stream_read_byte(this, cancellable, out error);
		public short read_int16(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_data_input_stream_read_int16(this, cancellable, out error);
		public int read_int32(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_data_input_stream_read_int32(this, cancellable, out error);
		public long read_int64(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_data_input_stream_read_int64(this, cancellable, out error);
		public System.IntPtr read_line(System.IntPtr length, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_data_input_stream_read_line(this, length, cancellable, out error);
		public void read_line_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_data_input_stream_read_line_async(this, io_priority, cancellable, callback, user_data);
		public System.IntPtr read_line_finish(Gio.AsyncResult result, System.IntPtr length, out GLib.Error error) => Gio.GioInterop.g_data_input_stream_read_line_finish(this, result, length, out error);
		public string read_line_finish_utf8(Gio.AsyncResult result, System.IntPtr length, out GLib.Error error) => Gio.GioInterop.g_data_input_stream_read_line_finish_utf8(this, result, length, out error);
		public string read_line_utf8(System.IntPtr length, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_data_input_stream_read_line_utf8(this, length, cancellable, out error);
		public ushort read_uint16(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_data_input_stream_read_uint16(this, cancellable, out error);
		public uint read_uint32(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_data_input_stream_read_uint32(this, cancellable, out error);
		public ulong read_uint64(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_data_input_stream_read_uint64(this, cancellable, out error);
		public string read_until(string stop_chars, System.IntPtr length, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_data_input_stream_read_until(this, stop_chars, length, cancellable, out error);
		public void read_until_async(string stop_chars, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_data_input_stream_read_until_async(this, stop_chars, io_priority, cancellable, callback, user_data);
		public string read_until_finish(Gio.AsyncResult result, System.IntPtr length, out GLib.Error error) => Gio.GioInterop.g_data_input_stream_read_until_finish(this, result, length, out error);
		public string read_upto(string stop_chars, long stop_chars_len, System.IntPtr length, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_data_input_stream_read_upto(this, stop_chars, stop_chars_len, length, cancellable, out error);
		public void read_upto_async(string stop_chars, long stop_chars_len, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_data_input_stream_read_upto_async(this, stop_chars, stop_chars_len, io_priority, cancellable, callback, user_data);
		public string read_upto_finish(Gio.AsyncResult result, System.IntPtr length, out GLib.Error error) => Gio.GioInterop.g_data_input_stream_read_upto_finish(this, result, length, out error);
		public void set_byte_order(Gio.DataStreamByteOrder order) => Gio.GioInterop.g_data_input_stream_set_byte_order(this, order);
		public void set_newline_type(Gio.DataStreamNewlineType type) => Gio.GioInterop.g_data_input_stream_set_newline_type(this, type);
		public long fill(long count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_buffered_input_stream_fill(this, count, cancellable, out error);
		public void fill_async(long count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_buffered_input_stream_fill_async(this, count, io_priority, cancellable, callback, user_data);
		public long fill_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_buffered_input_stream_fill_finish(this, result, out error);
		public ulong get_available() => Gio.GioInterop.g_buffered_input_stream_get_available(this);
		public ulong get_buffer_size() => Gio.GioInterop.g_buffered_input_stream_get_buffer_size(this);
		public ulong peek(System.IntPtr buffer, ulong offset, ulong count) => Gio.GioInterop.g_buffered_input_stream_peek(this, buffer, offset, count);
		public System.IntPtr peek_buffer(System.IntPtr count) => Gio.GioInterop.g_buffered_input_stream_peek_buffer(this, count);
		public void set_buffer_size(ulong size) => Gio.GioInterop.g_buffered_input_stream_set_buffer_size(this, size);
		public Gio.InputStream get_base_stream() => Gio.GioInterop.g_filter_input_stream_get_base_stream(this);
		public bool get_close_base_stream() => Gio.GioInterop.g_filter_input_stream_get_close_base_stream(this);
		public void set_close_base_stream(bool close_base) => Gio.GioInterop.g_filter_input_stream_set_close_base_stream(this, close_base);
		public void clear_pending() => Gio.GioInterop.g_input_stream_clear_pending(this);
		public bool close(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_close(this, cancellable, out error);
		public void close_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_close_async(this, io_priority, cancellable, callback, user_data);
		public bool close_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_input_stream_close_finish(this, result, out error);
		public bool has_pending() => Gio.GioInterop.g_input_stream_has_pending(this);
		public bool is_closed() => Gio.GioInterop.g_input_stream_is_closed(this);
		public long read(System.IntPtr buffer, ulong count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_read(this, buffer, count, cancellable, out error);
		public bool read_all(System.IntPtr buffer, ulong count, System.IntPtr bytes_read, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_all(this, buffer, count, bytes_read, cancellable, out error);
		public void read_all_async(System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_read_all_async(this, buffer, count, io_priority, cancellable, callback, user_data);
		public bool read_all_finish(Gio.AsyncResult result, System.IntPtr bytes_read, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_all_finish(this, result, bytes_read, out error);
		public void read_async(System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_read_async(this, buffer, count, io_priority, cancellable, callback, user_data);
		public GLib.Bytes read_bytes(ulong count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_bytes(this, count, cancellable, out error);
		public void read_bytes_async(ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_read_bytes_async(this, count, io_priority, cancellable, callback, user_data);
		public GLib.Bytes read_bytes_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_bytes_finish(this, result, out error);
		public long read_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_finish(this, result, out error);
		public bool set_pending(out GLib.Error error) => Gio.GioInterop.g_input_stream_set_pending(this, out error);
		public long skip(ulong count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_skip(this, count, cancellable, out error);
		public void skip_async(ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_skip_async(this, count, io_priority, cancellable, callback, user_data);
		public long skip_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_input_stream_skip_finish(this, result, out error);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_data_input_stream_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public enum DataStreamByteOrder
	{
		big_endian = 0,
		little_endian = 1,
		host_endian = 2,
	}
	public enum DataStreamNewlineType
	{
		lf = 0,
		cr = 1,
		cr_lf = 2,
		any = 3,
	}
	public ref struct DataInputStreamPrivate
	{
		private IntPtr _pointer;
		public DataInputStreamPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DataInputStreamPrivate(IntPtr pointer) => new DataInputStreamPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(DataInputStreamPrivate value) => value._pointer;
	}
	public ref struct DataInputStreamClass
	{
		private IntPtr _pointer;
		public DataInputStreamClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DataInputStreamClass(IntPtr pointer) => new DataInputStreamClass(pointer, checkType: true);
		public static explicit operator IntPtr(DataInputStreamClass value) => value._pointer;
	}
	public ref struct DataOutputStream
	{
		private IntPtr _pointer;
		public DataOutputStream(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator DataOutputStream(IntPtr pointer) => new DataOutputStream(pointer, checkType: true);
		public static explicit operator IntPtr(DataOutputStream value) => value._pointer;
		public static implicit operator Gio.FilterOutputStream(DataOutputStream value) => new Gio.FilterOutputStream((IntPtr)value, checkType: false);
		public static explicit operator DataOutputStream(Gio.FilterOutputStream value) => new DataOutputStream((IntPtr)value, checkType: true);
		public static implicit operator Gio.OutputStream(DataOutputStream value) => new Gio.OutputStream((IntPtr)value, checkType: false);
		public static explicit operator DataOutputStream(Gio.OutputStream value) => new DataOutputStream((IntPtr)value, checkType: true);
		public static implicit operator GObject.Object(DataOutputStream value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator DataOutputStream(GObject.Object value) => new DataOutputStream((IntPtr)value, checkType: true);
		public static Gio.DataOutputStream @new(Gio.OutputStream base_stream) => GioInterop.g_data_output_stream_new(base_stream);
		public Gio.DataStreamByteOrder get_byte_order() => Gio.GioInterop.g_data_output_stream_get_byte_order(this);
		public bool put_byte(byte data, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_data_output_stream_put_byte(this, data, cancellable, out error);
		public bool put_int16(short data, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_data_output_stream_put_int16(this, data, cancellable, out error);
		public bool put_int32(int data, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_data_output_stream_put_int32(this, data, cancellable, out error);
		public bool put_int64(long data, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_data_output_stream_put_int64(this, data, cancellable, out error);
		public bool put_string(string str, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_data_output_stream_put_string(this, str, cancellable, out error);
		public bool put_uint16(ushort data, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_data_output_stream_put_uint16(this, data, cancellable, out error);
		public bool put_uint32(uint data, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_data_output_stream_put_uint32(this, data, cancellable, out error);
		public bool put_uint64(ulong data, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_data_output_stream_put_uint64(this, data, cancellable, out error);
		public void set_byte_order(Gio.DataStreamByteOrder order) => Gio.GioInterop.g_data_output_stream_set_byte_order(this, order);
		public Gio.OutputStream get_base_stream() => Gio.GioInterop.g_filter_output_stream_get_base_stream(this);
		public bool get_close_base_stream() => Gio.GioInterop.g_filter_output_stream_get_close_base_stream(this);
		public void set_close_base_stream(bool close_base) => Gio.GioInterop.g_filter_output_stream_set_close_base_stream(this, close_base);
		public void clear_pending() => Gio.GioInterop.g_output_stream_clear_pending(this);
		public bool close(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_close(this, cancellable, out error);
		public void close_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_close_async(this, io_priority, cancellable, callback, user_data);
		public bool close_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_close_finish(this, result, out error);
		public bool flush(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_flush(this, cancellable, out error);
		public void flush_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_flush_async(this, io_priority, cancellable, callback, user_data);
		public bool flush_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_flush_finish(this, result, out error);
		public bool has_pending() => Gio.GioInterop.g_output_stream_has_pending(this);
		public bool is_closed() => Gio.GioInterop.g_output_stream_is_closed(this);
		public bool is_closing() => Gio.GioInterop.g_output_stream_is_closing(this);
		public bool set_pending(out GLib.Error error) => Gio.GioInterop.g_output_stream_set_pending(this, out error);
		public long splice(Gio.InputStream source, Gio.OutputStreamSpliceFlags flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_splice(this, source, flags, cancellable, out error);
		public void splice_async(Gio.InputStream source, Gio.OutputStreamSpliceFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_splice_async(this, source, flags, io_priority, cancellable, callback, user_data);
		public long splice_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_splice_finish(this, result, out error);
		public long write(System.IntPtr buffer, ulong count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_write(this, buffer, count, cancellable, out error);
		public bool write_all(System.IntPtr buffer, ulong count, System.IntPtr bytes_written, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_all(this, buffer, count, bytes_written, cancellable, out error);
		public void write_all_async(System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_write_all_async(this, buffer, count, io_priority, cancellable, callback, user_data);
		public bool write_all_finish(Gio.AsyncResult result, System.IntPtr bytes_written, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_all_finish(this, result, bytes_written, out error);
		public void write_async(System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_write_async(this, buffer, count, io_priority, cancellable, callback, user_data);
		public long write_bytes(GLib.Bytes bytes, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_bytes(this, bytes, cancellable, out error);
		public void write_bytes_async(GLib.Bytes bytes, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_write_bytes_async(this, bytes, io_priority, cancellable, callback, user_data);
		public long write_bytes_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_bytes_finish(this, result, out error);
		public long write_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_finish(this, result, out error);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_data_output_stream_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct DataOutputStreamPrivate
	{
		private IntPtr _pointer;
		public DataOutputStreamPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DataOutputStreamPrivate(IntPtr pointer) => new DataOutputStreamPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(DataOutputStreamPrivate value) => value._pointer;
	}
	public ref struct DataOutputStreamClass
	{
		private IntPtr _pointer;
		public DataOutputStreamClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DataOutputStreamClass(IntPtr pointer) => new DataOutputStreamClass(pointer, checkType: true);
		public static explicit operator IntPtr(DataOutputStreamClass value) => value._pointer;
	}
	public ref struct DatagramBased
	{
		private IntPtr _pointer;
		public DatagramBased(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DatagramBased(IntPtr pointer) => new DatagramBased(pointer, checkType: true);
		public static explicit operator IntPtr(DatagramBased value) => value._pointer;
		public GLib.IOCondition condition_check(GLib.IOCondition condition) => Gio.GioInterop.g_datagram_based_condition_check(this, condition);
		public bool condition_wait(GLib.IOCondition condition, long timeout, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_datagram_based_condition_wait(this, condition, timeout, cancellable, out error);
		public GLib.Source create_source(GLib.IOCondition condition, Gio.Cancellable cancellable) => Gio.GioInterop.g_datagram_based_create_source(this, condition, cancellable);
		public int receive_messages(System.IntPtr messages, uint num_messages, int flags, long timeout, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_datagram_based_receive_messages(this, messages, num_messages, flags, timeout, cancellable, out error);
		public int send_messages(System.IntPtr messages, uint num_messages, int flags, long timeout, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_datagram_based_send_messages(this, messages, num_messages, flags, timeout, cancellable, out error);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_datagram_based_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct InputMessage
	{
		private IntPtr _pointer;
		public InputMessage(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator InputMessage(IntPtr pointer) => new InputMessage(pointer, checkType: true);
		public static explicit operator IntPtr(InputMessage value) => value._pointer;
	}
	public ref struct OutputMessage
	{
		private IntPtr _pointer;
		public OutputMessage(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator OutputMessage(IntPtr pointer) => new OutputMessage(pointer, checkType: true);
		public static explicit operator IntPtr(OutputMessage value) => value._pointer;
	}
	public ref struct DatagramBasedInterface
	{
		private IntPtr _pointer;
		public DatagramBasedInterface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DatagramBasedInterface(IntPtr pointer) => new DatagramBasedInterface(pointer, checkType: true);
		public static explicit operator IntPtr(DatagramBasedInterface value) => value._pointer;
	}
	public ref struct DesktopAppInfo
	{
		private IntPtr _pointer;
		public DesktopAppInfo(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator DesktopAppInfo(IntPtr pointer) => new DesktopAppInfo(pointer, checkType: true);
		public static explicit operator IntPtr(DesktopAppInfo value) => value._pointer;
		public static implicit operator GObject.Object(DesktopAppInfo value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator DesktopAppInfo(GObject.Object value) => new DesktopAppInfo((IntPtr)value, checkType: true);
		public static Gio.DesktopAppInfo @new(string desktop_id) => GioInterop.g_desktop_app_info_new(desktop_id);
		public static Gio.DesktopAppInfo new_from_filename(System.IntPtr filename) => GioInterop.g_desktop_app_info_new_from_filename(filename);
		public static Gio.DesktopAppInfo new_from_keyfile(GLib.KeyFile key_file) => GioInterop.g_desktop_app_info_new_from_keyfile(key_file);
		public static System.IntPtr get_implementations(string @interface) => GioInterop.g_desktop_app_info_get_implementations(@interface);
		public static System.IntPtr search(string search_string) => GioInterop.g_desktop_app_info_search(search_string);
		public static void set_desktop_env(string desktop_env) => GioInterop.g_desktop_app_info_set_desktop_env(desktop_env);
		public string get_action_name(string action_name) => Gio.GioInterop.g_desktop_app_info_get_action_name(this, action_name);
		public bool get_boolean(string key) => Gio.GioInterop.g_desktop_app_info_get_boolean(this, key);
		public string get_categories() => Gio.GioInterop.g_desktop_app_info_get_categories(this);
		public System.IntPtr get_filename() => Gio.GioInterop.g_desktop_app_info_get_filename(this);
		public string get_generic_name() => Gio.GioInterop.g_desktop_app_info_get_generic_name(this);
		public bool get_is_hidden() => Gio.GioInterop.g_desktop_app_info_get_is_hidden(this);
		public System.IntPtr get_keywords() => Gio.GioInterop.g_desktop_app_info_get_keywords(this);
		public bool get_nodisplay() => Gio.GioInterop.g_desktop_app_info_get_nodisplay(this);
		public bool get_show_in(string desktop_env) => Gio.GioInterop.g_desktop_app_info_get_show_in(this, desktop_env);
		public string get_startup_wm_class() => Gio.GioInterop.g_desktop_app_info_get_startup_wm_class(this);
		public string get_string(string key) => Gio.GioInterop.g_desktop_app_info_get_string(this, key);
		public bool has_key(string key) => Gio.GioInterop.g_desktop_app_info_has_key(this, key);
		public void launch_action(string action_name, Gio.AppLaunchContext launch_context) => Gio.GioInterop.g_desktop_app_info_launch_action(this, action_name, launch_context);
		public bool launch_uris_as_manager(System.IntPtr uris, Gio.AppLaunchContext launch_context, GLib.SpawnFlags spawn_flags, System.IntPtr user_setup, System.IntPtr user_setup_data, System.IntPtr pid_callback, System.IntPtr pid_callback_data, out GLib.Error error) => Gio.GioInterop.g_desktop_app_info_launch_uris_as_manager(this, uris, launch_context, spawn_flags, user_setup, user_setup_data, pid_callback, pid_callback_data, out error);
		public System.IntPtr list_actions() => Gio.GioInterop.g_desktop_app_info_list_actions(this);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_desktop_app_info_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct DesktopAppInfoClass
	{
		private IntPtr _pointer;
		public DesktopAppInfoClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DesktopAppInfoClass(IntPtr pointer) => new DesktopAppInfoClass(pointer, checkType: true);
		public static explicit operator IntPtr(DesktopAppInfoClass value) => value._pointer;
	}
	public ref struct DesktopAppInfoLookup
	{
		private IntPtr _pointer;
		public DesktopAppInfoLookup(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DesktopAppInfoLookup(IntPtr pointer) => new DesktopAppInfoLookup(pointer, checkType: true);
		public static explicit operator IntPtr(DesktopAppInfoLookup value) => value._pointer;
		public Gio.AppInfo get_default_for_uri_scheme(string uri_scheme) => Gio.GioInterop.g_desktop_app_info_lookup_get_default_for_uri_scheme(this, uri_scheme);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_desktop_app_info_lookup_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct DesktopAppInfoLookupIface
	{
		private IntPtr _pointer;
		public DesktopAppInfoLookupIface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DesktopAppInfoLookupIface(IntPtr pointer) => new DesktopAppInfoLookupIface(pointer, checkType: true);
		public static explicit operator IntPtr(DesktopAppInfoLookupIface value) => value._pointer;
	}
	public ref struct Drive
	{
		private IntPtr _pointer;
		public Drive(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator Drive(IntPtr pointer) => new Drive(pointer, checkType: true);
		public static explicit operator IntPtr(Drive value) => value._pointer;
		public bool can_eject() => Gio.GioInterop.g_drive_can_eject(this);
		public bool can_poll_for_media() => Gio.GioInterop.g_drive_can_poll_for_media(this);
		public bool can_start() => Gio.GioInterop.g_drive_can_start(this);
		public bool can_start_degraded() => Gio.GioInterop.g_drive_can_start_degraded(this);
		public bool can_stop() => Gio.GioInterop.g_drive_can_stop(this);
		public void eject(Gio.MountUnmountFlags flags, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_drive_eject(this, flags, cancellable, callback, user_data);
		public bool eject_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_drive_eject_finish(this, result, out error);
		public void eject_with_operation(Gio.MountUnmountFlags flags, Gio.MountOperation mount_operation, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_drive_eject_with_operation(this, flags, mount_operation, cancellable, callback, user_data);
		public bool eject_with_operation_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_drive_eject_with_operation_finish(this, result, out error);
		public System.IntPtr enumerate_identifiers() => Gio.GioInterop.g_drive_enumerate_identifiers(this);
		public Gio.Icon get_icon() => Gio.GioInterop.g_drive_get_icon(this);
		public string get_identifier(string kind) => Gio.GioInterop.g_drive_get_identifier(this, kind);
		public string get_name() => Gio.GioInterop.g_drive_get_name(this);
		public string get_sort_key() => Gio.GioInterop.g_drive_get_sort_key(this);
		public Gio.DriveStartStopType get_start_stop_type() => Gio.GioInterop.g_drive_get_start_stop_type(this);
		public Gio.Icon get_symbolic_icon() => Gio.GioInterop.g_drive_get_symbolic_icon(this);
		public System.IntPtr get_volumes() => Gio.GioInterop.g_drive_get_volumes(this);
		public bool has_media() => Gio.GioInterop.g_drive_has_media(this);
		public bool has_volumes() => Gio.GioInterop.g_drive_has_volumes(this);
		public bool is_media_check_automatic() => Gio.GioInterop.g_drive_is_media_check_automatic(this);
		public bool is_media_removable() => Gio.GioInterop.g_drive_is_media_removable(this);
		public bool is_removable() => Gio.GioInterop.g_drive_is_removable(this);
		public void poll_for_media(Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_drive_poll_for_media(this, cancellable, callback, user_data);
		public bool poll_for_media_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_drive_poll_for_media_finish(this, result, out error);
		public void start(Gio.DriveStartFlags flags, Gio.MountOperation mount_operation, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_drive_start(this, flags, mount_operation, cancellable, callback, user_data);
		public bool start_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_drive_start_finish(this, result, out error);
		public void stop(Gio.MountUnmountFlags flags, Gio.MountOperation mount_operation, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_drive_stop(this, flags, mount_operation, cancellable, callback, user_data);
		public bool stop_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_drive_stop_finish(this, result, out error);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_drive_get_type")]
		public static extern GLib.GType TypeOf();
	}
	[Flags]
	public enum MountUnmountFlags
	{
		none = 0,
		force = 1,
	}
	public ref struct MountOperation
	{
		private IntPtr _pointer;
		public MountOperation(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator MountOperation(IntPtr pointer) => new MountOperation(pointer, checkType: true);
		public static explicit operator IntPtr(MountOperation value) => value._pointer;
		public static implicit operator GObject.Object(MountOperation value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator MountOperation(GObject.Object value) => new MountOperation((IntPtr)value, checkType: true);
		public static Gio.MountOperation @new() => GioInterop.g_mount_operation_new();
		public bool get_anonymous() => Gio.GioInterop.g_mount_operation_get_anonymous(this);
		public int get_choice() => Gio.GioInterop.g_mount_operation_get_choice(this);
		public string get_domain() => Gio.GioInterop.g_mount_operation_get_domain(this);
		public string get_password() => Gio.GioInterop.g_mount_operation_get_password(this);
		public Gio.PasswordSave get_password_save() => Gio.GioInterop.g_mount_operation_get_password_save(this);
		public string get_username() => Gio.GioInterop.g_mount_operation_get_username(this);
		public void reply(Gio.MountOperationResult result) => Gio.GioInterop.g_mount_operation_reply(this, result);
		public void set_anonymous(bool anonymous) => Gio.GioInterop.g_mount_operation_set_anonymous(this, anonymous);
		public void set_choice(int choice) => Gio.GioInterop.g_mount_operation_set_choice(this, choice);
		public void set_domain(string domain) => Gio.GioInterop.g_mount_operation_set_domain(this, domain);
		public void set_password(string password) => Gio.GioInterop.g_mount_operation_set_password(this, password);
		public void set_password_save(Gio.PasswordSave save) => Gio.GioInterop.g_mount_operation_set_password_save(this, save);
		public void set_username(string username) => Gio.GioInterop.g_mount_operation_set_username(this, username);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_mount_operation_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public enum DriveStartStopType
	{
		unknown = 0,
		shutdown = 1,
		network = 2,
		multidisk = 3,
		password = 4,
	}
	public ref struct Volume
	{
		private IntPtr _pointer;
		public Volume(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator Volume(IntPtr pointer) => new Volume(pointer, checkType: true);
		public static explicit operator IntPtr(Volume value) => value._pointer;
		public bool can_eject() => Gio.GioInterop.g_volume_can_eject(this);
		public bool can_mount() => Gio.GioInterop.g_volume_can_mount(this);
		public void eject(Gio.MountUnmountFlags flags, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_volume_eject(this, flags, cancellable, callback, user_data);
		public bool eject_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_volume_eject_finish(this, result, out error);
		public void eject_with_operation(Gio.MountUnmountFlags flags, Gio.MountOperation mount_operation, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_volume_eject_with_operation(this, flags, mount_operation, cancellable, callback, user_data);
		public bool eject_with_operation_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_volume_eject_with_operation_finish(this, result, out error);
		public System.IntPtr enumerate_identifiers() => Gio.GioInterop.g_volume_enumerate_identifiers(this);
		public Gio.File get_activation_root() => Gio.GioInterop.g_volume_get_activation_root(this);
		public Gio.Drive get_drive() => Gio.GioInterop.g_volume_get_drive(this);
		public Gio.Icon get_icon() => Gio.GioInterop.g_volume_get_icon(this);
		public string get_identifier(string kind) => Gio.GioInterop.g_volume_get_identifier(this, kind);
		public Gio.Mount get_mount() => Gio.GioInterop.g_volume_get_mount(this);
		public string get_name() => Gio.GioInterop.g_volume_get_name(this);
		public string get_sort_key() => Gio.GioInterop.g_volume_get_sort_key(this);
		public Gio.Icon get_symbolic_icon() => Gio.GioInterop.g_volume_get_symbolic_icon(this);
		public string get_uuid() => Gio.GioInterop.g_volume_get_uuid(this);
		public void mount(Gio.MountMountFlags flags, Gio.MountOperation mount_operation, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_volume_mount(this, flags, mount_operation, cancellable, callback, user_data);
		public bool mount_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_volume_mount_finish(this, result, out error);
		public bool should_automount() => Gio.GioInterop.g_volume_should_automount(this);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_volume_get_type")]
		public static extern GLib.GType TypeOf();
	}
	[Flags]
	public enum DriveStartFlags
	{
		none = 0,
	}
	public ref struct DriveIface
	{
		private IntPtr _pointer;
		public DriveIface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DriveIface(IntPtr pointer) => new DriveIface(pointer, checkType: true);
		public static explicit operator IntPtr(DriveIface value) => value._pointer;
	}
	public ref struct DtlsConnection
	{
		private IntPtr _pointer;
		public DtlsConnection(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DtlsConnection(IntPtr pointer) => new DtlsConnection(pointer, checkType: true);
		public static explicit operator IntPtr(DtlsConnection value) => value._pointer;
		public bool close(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_dtls_connection_close(this, cancellable, out error);
		public void close_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_dtls_connection_close_async(this, io_priority, cancellable, callback, user_data);
		public bool close_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_dtls_connection_close_finish(this, result, out error);
		public bool emit_accept_certificate(Gio.TlsCertificate peer_cert, Gio.TlsCertificateFlags errors) => Gio.GioInterop.g_dtls_connection_emit_accept_certificate(this, peer_cert, errors);
		public Gio.TlsCertificate get_certificate() => Gio.GioInterop.g_dtls_connection_get_certificate(this);
		public Gio.TlsDatabase get_database() => Gio.GioInterop.g_dtls_connection_get_database(this);
		public Gio.TlsInteraction get_interaction() => Gio.GioInterop.g_dtls_connection_get_interaction(this);
		public Gio.TlsCertificate get_peer_certificate() => Gio.GioInterop.g_dtls_connection_get_peer_certificate(this);
		public Gio.TlsCertificateFlags get_peer_certificate_errors() => Gio.GioInterop.g_dtls_connection_get_peer_certificate_errors(this);
		public Gio.TlsRehandshakeMode get_rehandshake_mode() => Gio.GioInterop.g_dtls_connection_get_rehandshake_mode(this);
		public bool get_require_close_notify() => Gio.GioInterop.g_dtls_connection_get_require_close_notify(this);
		public bool handshake(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_dtls_connection_handshake(this, cancellable, out error);
		public void handshake_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_dtls_connection_handshake_async(this, io_priority, cancellable, callback, user_data);
		public bool handshake_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_dtls_connection_handshake_finish(this, result, out error);
		public void set_certificate(Gio.TlsCertificate certificate) => Gio.GioInterop.g_dtls_connection_set_certificate(this, certificate);
		public void set_database(Gio.TlsDatabase database) => Gio.GioInterop.g_dtls_connection_set_database(this, database);
		public void set_interaction(Gio.TlsInteraction interaction) => Gio.GioInterop.g_dtls_connection_set_interaction(this, interaction);
		public void set_rehandshake_mode(Gio.TlsRehandshakeMode mode) => Gio.GioInterop.g_dtls_connection_set_rehandshake_mode(this, mode);
		public void set_require_close_notify(bool require_close_notify) => Gio.GioInterop.g_dtls_connection_set_require_close_notify(this, require_close_notify);
		public bool shutdown(bool shutdown_read, bool shutdown_write, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_dtls_connection_shutdown(this, shutdown_read, shutdown_write, cancellable, out error);
		public void shutdown_async(bool shutdown_read, bool shutdown_write, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_dtls_connection_shutdown_async(this, shutdown_read, shutdown_write, io_priority, cancellable, callback, user_data);
		public bool shutdown_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_dtls_connection_shutdown_finish(this, result, out error);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_dtls_connection_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct DtlsClientConnection
	{
		private IntPtr _pointer;
		public DtlsClientConnection(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DtlsClientConnection(IntPtr pointer) => new DtlsClientConnection(pointer, checkType: true);
		public static explicit operator IntPtr(DtlsClientConnection value) => value._pointer;
		public static Gio.DtlsClientConnection @new(Gio.DatagramBased base_socket, Gio.SocketConnectable server_identity, out GLib.Error error) => GioInterop.g_dtls_client_connection_new(base_socket, server_identity, out error);
		public System.IntPtr get_accepted_cas() => Gio.GioInterop.g_dtls_client_connection_get_accepted_cas(this);
		public Gio.SocketConnectable get_server_identity() => Gio.GioInterop.g_dtls_client_connection_get_server_identity(this);
		public Gio.TlsCertificateFlags get_validation_flags() => Gio.GioInterop.g_dtls_client_connection_get_validation_flags(this);
		public void set_server_identity(Gio.SocketConnectable identity) => Gio.GioInterop.g_dtls_client_connection_set_server_identity(this, identity);
		public void set_validation_flags(Gio.TlsCertificateFlags flags) => Gio.GioInterop.g_dtls_client_connection_set_validation_flags(this, flags);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_dtls_client_connection_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct SocketConnectable
	{
		private IntPtr _pointer;
		public SocketConnectable(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator SocketConnectable(IntPtr pointer) => new SocketConnectable(pointer, checkType: true);
		public static explicit operator IntPtr(SocketConnectable value) => value._pointer;
		public Gio.SocketAddressEnumerator enumerate() => Gio.GioInterop.g_socket_connectable_enumerate(this);
		public Gio.SocketAddressEnumerator proxy_enumerate() => Gio.GioInterop.g_socket_connectable_proxy_enumerate(this);
		public string to_string() => Gio.GioInterop.g_socket_connectable_to_string(this);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_socket_connectable_get_type")]
		public static extern GLib.GType TypeOf();
	}
	[Flags]
	public enum TlsCertificateFlags
	{
		unknown_ca = 1,
		bad_identity = 2,
		not_activated = 4,
		expired = 8,
		revoked = 16,
		insecure = 32,
		generic_error = 64,
		validate_all = 127,
	}
	public ref struct DtlsClientConnectionInterface
	{
		private IntPtr _pointer;
		public DtlsClientConnectionInterface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DtlsClientConnectionInterface(IntPtr pointer) => new DtlsClientConnectionInterface(pointer, checkType: true);
		public static explicit operator IntPtr(DtlsClientConnectionInterface value) => value._pointer;
	}
	public ref struct TlsCertificate
	{
		private IntPtr _pointer;
		public TlsCertificate(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator TlsCertificate(IntPtr pointer) => new TlsCertificate(pointer, checkType: true);
		public static explicit operator IntPtr(TlsCertificate value) => value._pointer;
		public static implicit operator GObject.Object(TlsCertificate value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator TlsCertificate(GObject.Object value) => new TlsCertificate((IntPtr)value, checkType: true);
		public static Gio.TlsCertificate new_from_file(System.IntPtr file, out GLib.Error error) => GioInterop.g_tls_certificate_new_from_file(file, out error);
		public static Gio.TlsCertificate new_from_files(System.IntPtr cert_file, System.IntPtr key_file, out GLib.Error error) => GioInterop.g_tls_certificate_new_from_files(cert_file, key_file, out error);
		public static Gio.TlsCertificate new_from_pem(string data, long length, out GLib.Error error) => GioInterop.g_tls_certificate_new_from_pem(data, length, out error);
		public static System.IntPtr list_new_from_file(System.IntPtr file, out GLib.Error error) => GioInterop.g_tls_certificate_list_new_from_file(file, out error);
		public Gio.TlsCertificate get_issuer() => Gio.GioInterop.g_tls_certificate_get_issuer(this);
		public bool is_same(Gio.TlsCertificate cert_two) => Gio.GioInterop.g_tls_certificate_is_same(this, cert_two);
		public Gio.TlsCertificateFlags verify(Gio.SocketConnectable identity, Gio.TlsCertificate trusted_ca) => Gio.GioInterop.g_tls_certificate_verify(this, identity, trusted_ca);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_tls_certificate_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct TlsDatabase
	{
		private IntPtr _pointer;
		public TlsDatabase(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator TlsDatabase(IntPtr pointer) => new TlsDatabase(pointer, checkType: true);
		public static explicit operator IntPtr(TlsDatabase value) => value._pointer;
		public static implicit operator GObject.Object(TlsDatabase value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator TlsDatabase(GObject.Object value) => new TlsDatabase((IntPtr)value, checkType: true);
		public string create_certificate_handle(Gio.TlsCertificate certificate) => Gio.GioInterop.g_tls_database_create_certificate_handle(this, certificate);
		public Gio.TlsCertificate lookup_certificate_for_handle(string handle, Gio.TlsInteraction interaction, Gio.TlsDatabaseLookupFlags flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_tls_database_lookup_certificate_for_handle(this, handle, interaction, flags, cancellable, out error);
		public void lookup_certificate_for_handle_async(string handle, Gio.TlsInteraction interaction, Gio.TlsDatabaseLookupFlags flags, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_tls_database_lookup_certificate_for_handle_async(this, handle, interaction, flags, cancellable, callback, user_data);
		public Gio.TlsCertificate lookup_certificate_for_handle_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_tls_database_lookup_certificate_for_handle_finish(this, result, out error);
		public Gio.TlsCertificate lookup_certificate_issuer(Gio.TlsCertificate certificate, Gio.TlsInteraction interaction, Gio.TlsDatabaseLookupFlags flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_tls_database_lookup_certificate_issuer(this, certificate, interaction, flags, cancellable, out error);
		public void lookup_certificate_issuer_async(Gio.TlsCertificate certificate, Gio.TlsInteraction interaction, Gio.TlsDatabaseLookupFlags flags, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_tls_database_lookup_certificate_issuer_async(this, certificate, interaction, flags, cancellable, callback, user_data);
		public Gio.TlsCertificate lookup_certificate_issuer_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_tls_database_lookup_certificate_issuer_finish(this, result, out error);
		public System.IntPtr lookup_certificates_issued_by(GLib.ByteArray issuer_raw_dn, Gio.TlsInteraction interaction, Gio.TlsDatabaseLookupFlags flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_tls_database_lookup_certificates_issued_by(this, issuer_raw_dn, interaction, flags, cancellable, out error);
		public void lookup_certificates_issued_by_async(GLib.ByteArray issuer_raw_dn, Gio.TlsInteraction interaction, Gio.TlsDatabaseLookupFlags flags, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_tls_database_lookup_certificates_issued_by_async(this, issuer_raw_dn, interaction, flags, cancellable, callback, user_data);
		public System.IntPtr lookup_certificates_issued_by_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_tls_database_lookup_certificates_issued_by_finish(this, result, out error);
		public Gio.TlsCertificateFlags verify_chain(Gio.TlsCertificate chain, string purpose, Gio.SocketConnectable identity, Gio.TlsInteraction interaction, Gio.TlsDatabaseVerifyFlags flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_tls_database_verify_chain(this, chain, purpose, identity, interaction, flags, cancellable, out error);
		public void verify_chain_async(Gio.TlsCertificate chain, string purpose, Gio.SocketConnectable identity, Gio.TlsInteraction interaction, Gio.TlsDatabaseVerifyFlags flags, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_tls_database_verify_chain_async(this, chain, purpose, identity, interaction, flags, cancellable, callback, user_data);
		public Gio.TlsCertificateFlags verify_chain_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_tls_database_verify_chain_finish(this, result, out error);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_tls_database_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct TlsInteraction
	{
		private IntPtr _pointer;
		public TlsInteraction(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator TlsInteraction(IntPtr pointer) => new TlsInteraction(pointer, checkType: true);
		public static explicit operator IntPtr(TlsInteraction value) => value._pointer;
		public static implicit operator GObject.Object(TlsInteraction value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator TlsInteraction(GObject.Object value) => new TlsInteraction((IntPtr)value, checkType: true);
		public Gio.TlsInteractionResult ask_password(Gio.TlsPassword password, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_tls_interaction_ask_password(this, password, cancellable, out error);
		public void ask_password_async(Gio.TlsPassword password, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_tls_interaction_ask_password_async(this, password, cancellable, callback, user_data);
		public Gio.TlsInteractionResult ask_password_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_tls_interaction_ask_password_finish(this, result, out error);
		public Gio.TlsInteractionResult invoke_ask_password(Gio.TlsPassword password, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_tls_interaction_invoke_ask_password(this, password, cancellable, out error);
		public Gio.TlsInteractionResult invoke_request_certificate(Gio.TlsConnection connection, Gio.TlsCertificateRequestFlags flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_tls_interaction_invoke_request_certificate(this, connection, flags, cancellable, out error);
		public Gio.TlsInteractionResult request_certificate(Gio.TlsConnection connection, Gio.TlsCertificateRequestFlags flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_tls_interaction_request_certificate(this, connection, flags, cancellable, out error);
		public void request_certificate_async(Gio.TlsConnection connection, Gio.TlsCertificateRequestFlags flags, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_tls_interaction_request_certificate_async(this, connection, flags, cancellable, callback, user_data);
		public Gio.TlsInteractionResult request_certificate_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_tls_interaction_request_certificate_finish(this, result, out error);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_tls_interaction_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public enum TlsRehandshakeMode
	{
		never = 0,
		safely = 1,
		unsafely = 2,
	}
	public ref struct DtlsConnectionInterface
	{
		private IntPtr _pointer;
		public DtlsConnectionInterface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DtlsConnectionInterface(IntPtr pointer) => new DtlsConnectionInterface(pointer, checkType: true);
		public static explicit operator IntPtr(DtlsConnectionInterface value) => value._pointer;
	}
	public ref struct DtlsServerConnection
	{
		private IntPtr _pointer;
		public DtlsServerConnection(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DtlsServerConnection(IntPtr pointer) => new DtlsServerConnection(pointer, checkType: true);
		public static explicit operator IntPtr(DtlsServerConnection value) => value._pointer;
		public static Gio.DtlsServerConnection @new(Gio.DatagramBased base_socket, Gio.TlsCertificate certificate, out GLib.Error error) => GioInterop.g_dtls_server_connection_new(base_socket, certificate, out error);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_dtls_server_connection_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public enum TlsAuthenticationMode
	{
		none = 0,
		requested = 1,
		required = 2,
	}
	public ref struct DtlsServerConnectionInterface
	{
		private IntPtr _pointer;
		public DtlsServerConnectionInterface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator DtlsServerConnectionInterface(IntPtr pointer) => new DtlsServerConnectionInterface(pointer, checkType: true);
		public static explicit operator IntPtr(DtlsServerConnectionInterface value) => value._pointer;
	}
	public ref struct Emblem
	{
		private IntPtr _pointer;
		public Emblem(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator Emblem(IntPtr pointer) => new Emblem(pointer, checkType: true);
		public static explicit operator IntPtr(Emblem value) => value._pointer;
		public static implicit operator GObject.Object(Emblem value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator Emblem(GObject.Object value) => new Emblem((IntPtr)value, checkType: true);
		public static Gio.Emblem @new(Gio.Icon icon) => GioInterop.g_emblem_new(icon);
		public static Gio.Emblem new_with_origin(Gio.Icon icon, Gio.EmblemOrigin origin) => GioInterop.g_emblem_new_with_origin(icon, origin);
		public Gio.Icon get_icon() => Gio.GioInterop.g_emblem_get_icon(this);
		public Gio.EmblemOrigin get_origin() => Gio.GioInterop.g_emblem_get_origin(this);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_emblem_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public enum EmblemOrigin
	{
		unknown = 0,
		device = 1,
		livemetadata = 2,
		tag = 3,
	}
	public ref struct EmblemClass
	{
		private IntPtr _pointer;
		public EmblemClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator EmblemClass(IntPtr pointer) => new EmblemClass(pointer, checkType: true);
		public static explicit operator IntPtr(EmblemClass value) => value._pointer;
	}
	public ref struct EmblemedIcon
	{
		private IntPtr _pointer;
		public EmblemedIcon(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator EmblemedIcon(IntPtr pointer) => new EmblemedIcon(pointer, checkType: true);
		public static explicit operator IntPtr(EmblemedIcon value) => value._pointer;
		public static implicit operator GObject.Object(EmblemedIcon value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator EmblemedIcon(GObject.Object value) => new EmblemedIcon((IntPtr)value, checkType: true);
		public static Gio.EmblemedIcon @new(Gio.Icon icon, Gio.Emblem emblem) => GioInterop.g_emblemed_icon_new(icon, emblem);
		public void add_emblem(Gio.Emblem emblem) => Gio.GioInterop.g_emblemed_icon_add_emblem(this, emblem);
		public void clear_emblems() => Gio.GioInterop.g_emblemed_icon_clear_emblems(this);
		public System.IntPtr get_emblems() => Gio.GioInterop.g_emblemed_icon_get_emblems(this);
		public Gio.Icon get_icon() => Gio.GioInterop.g_emblemed_icon_get_icon(this);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_emblemed_icon_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct EmblemedIconPrivate
	{
		private IntPtr _pointer;
		public EmblemedIconPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator EmblemedIconPrivate(IntPtr pointer) => new EmblemedIconPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(EmblemedIconPrivate value) => value._pointer;
	}
	public ref struct EmblemedIconClass
	{
		private IntPtr _pointer;
		public EmblemedIconClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator EmblemedIconClass(IntPtr pointer) => new EmblemedIconClass(pointer, checkType: true);
		public static explicit operator IntPtr(EmblemedIconClass value) => value._pointer;
	}
	public ref struct FileIOStream
	{
		private IntPtr _pointer;
		public FileIOStream(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator FileIOStream(IntPtr pointer) => new FileIOStream(pointer, checkType: true);
		public static explicit operator IntPtr(FileIOStream value) => value._pointer;
		public static implicit operator Gio.IOStream(FileIOStream value) => new Gio.IOStream((IntPtr)value, checkType: false);
		public static explicit operator FileIOStream(Gio.IOStream value) => new FileIOStream((IntPtr)value, checkType: true);
		public static implicit operator GObject.Object(FileIOStream value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator FileIOStream(GObject.Object value) => new FileIOStream((IntPtr)value, checkType: true);
		public string get_etag() => Gio.GioInterop.g_file_io_stream_get_etag(this);
		public Gio.FileInfo query_info(string attributes, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_io_stream_query_info(this, attributes, cancellable, out error);
		public void query_info_async(string attributes, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_io_stream_query_info_async(this, attributes, io_priority, cancellable, callback, user_data);
		public Gio.FileInfo query_info_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_file_io_stream_query_info_finish(this, result, out error);
		public void clear_pending() => Gio.GioInterop.g_io_stream_clear_pending(this);
		public bool close(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_io_stream_close(this, cancellable, out error);
		public void close_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_io_stream_close_async(this, io_priority, cancellable, callback, user_data);
		public bool close_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_io_stream_close_finish(this, result, out error);
		public Gio.InputStream get_input_stream() => Gio.GioInterop.g_io_stream_get_input_stream(this);
		public Gio.OutputStream get_output_stream() => Gio.GioInterop.g_io_stream_get_output_stream(this);
		public bool has_pending() => Gio.GioInterop.g_io_stream_has_pending(this);
		public bool is_closed() => Gio.GioInterop.g_io_stream_is_closed(this);
		public bool set_pending(out GLib.Error error) => Gio.GioInterop.g_io_stream_set_pending(this, out error);
		public void splice_async(Gio.IOStream stream2, Gio.IOStreamSpliceFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_io_stream_splice_async(this, stream2, flags, io_priority, cancellable, callback, user_data);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_file_io_stream_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct FileOutputStream
	{
		private IntPtr _pointer;
		public FileOutputStream(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator FileOutputStream(IntPtr pointer) => new FileOutputStream(pointer, checkType: true);
		public static explicit operator IntPtr(FileOutputStream value) => value._pointer;
		public static implicit operator Gio.OutputStream(FileOutputStream value) => new Gio.OutputStream((IntPtr)value, checkType: false);
		public static explicit operator FileOutputStream(Gio.OutputStream value) => new FileOutputStream((IntPtr)value, checkType: true);
		public static implicit operator GObject.Object(FileOutputStream value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator FileOutputStream(GObject.Object value) => new FileOutputStream((IntPtr)value, checkType: true);
		public string get_etag() => Gio.GioInterop.g_file_output_stream_get_etag(this);
		public Gio.FileInfo query_info(string attributes, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_output_stream_query_info(this, attributes, cancellable, out error);
		public void query_info_async(string attributes, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_output_stream_query_info_async(this, attributes, io_priority, cancellable, callback, user_data);
		public Gio.FileInfo query_info_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_file_output_stream_query_info_finish(this, result, out error);
		public void clear_pending() => Gio.GioInterop.g_output_stream_clear_pending(this);
		public bool close(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_close(this, cancellable, out error);
		public void close_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_close_async(this, io_priority, cancellable, callback, user_data);
		public bool close_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_close_finish(this, result, out error);
		public bool flush(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_flush(this, cancellable, out error);
		public void flush_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_flush_async(this, io_priority, cancellable, callback, user_data);
		public bool flush_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_flush_finish(this, result, out error);
		public bool has_pending() => Gio.GioInterop.g_output_stream_has_pending(this);
		public bool is_closed() => Gio.GioInterop.g_output_stream_is_closed(this);
		public bool is_closing() => Gio.GioInterop.g_output_stream_is_closing(this);
		public bool set_pending(out GLib.Error error) => Gio.GioInterop.g_output_stream_set_pending(this, out error);
		public long splice(Gio.InputStream source, Gio.OutputStreamSpliceFlags flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_splice(this, source, flags, cancellable, out error);
		public void splice_async(Gio.InputStream source, Gio.OutputStreamSpliceFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_splice_async(this, source, flags, io_priority, cancellable, callback, user_data);
		public long splice_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_splice_finish(this, result, out error);
		public long write(System.IntPtr buffer, ulong count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_write(this, buffer, count, cancellable, out error);
		public bool write_all(System.IntPtr buffer, ulong count, System.IntPtr bytes_written, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_all(this, buffer, count, bytes_written, cancellable, out error);
		public void write_all_async(System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_write_all_async(this, buffer, count, io_priority, cancellable, callback, user_data);
		public bool write_all_finish(Gio.AsyncResult result, System.IntPtr bytes_written, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_all_finish(this, result, bytes_written, out error);
		public void write_async(System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_write_async(this, buffer, count, io_priority, cancellable, callback, user_data);
		public long write_bytes(GLib.Bytes bytes, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_bytes(this, bytes, cancellable, out error);
		public void write_bytes_async(GLib.Bytes bytes, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_write_bytes_async(this, bytes, io_priority, cancellable, callback, user_data);
		public long write_bytes_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_bytes_finish(this, result, out error);
		public long write_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_finish(this, result, out error);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_file_output_stream_get_type")]
		public static extern GLib.GType TypeOf();
	}
	[Flags]
	public enum FileCreateFlags
	{
		none = 0,
		@private = 1,
		replace_destination = 2,
	}
	[Flags]
	public enum FileCopyFlags
	{
		none = 0,
		overwrite = 1,
		backup = 2,
		nofollow_symlinks = 4,
		all_metadata = 8,
		no_fallback_for_move = 16,
		target_default_perms = 32,
	}
	public ref struct FileEnumerator
	{
		private IntPtr _pointer;
		public FileEnumerator(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator FileEnumerator(IntPtr pointer) => new FileEnumerator(pointer, checkType: true);
		public static explicit operator IntPtr(FileEnumerator value) => value._pointer;
		public static implicit operator GObject.Object(FileEnumerator value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator FileEnumerator(GObject.Object value) => new FileEnumerator((IntPtr)value, checkType: true);
		public bool close(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_enumerator_close(this, cancellable, out error);
		public void close_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_enumerator_close_async(this, io_priority, cancellable, callback, user_data);
		public bool close_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_file_enumerator_close_finish(this, result, out error);
		public Gio.File get_child(Gio.FileInfo info) => Gio.GioInterop.g_file_enumerator_get_child(this, info);
		public Gio.File get_container() => Gio.GioInterop.g_file_enumerator_get_container(this);
		public bool has_pending() => Gio.GioInterop.g_file_enumerator_has_pending(this);
		public bool is_closed() => Gio.GioInterop.g_file_enumerator_is_closed(this);
		public bool iterate(out Gio.FileInfo out_info, out Gio.File out_child, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_enumerator_iterate(this, out out_info, out out_child, cancellable, out error);
		public Gio.FileInfo next_file(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_enumerator_next_file(this, cancellable, out error);
		public void next_files_async(int num_files, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_enumerator_next_files_async(this, num_files, io_priority, cancellable, callback, user_data);
		public System.IntPtr next_files_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_file_enumerator_next_files_finish(this, result, out error);
		public void set_pending(bool pending) => Gio.GioInterop.g_file_enumerator_set_pending(this, pending);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_file_enumerator_get_type")]
		public static extern GLib.GType TypeOf();
	}
	[Flags]
	public enum FileQueryInfoFlags
	{
		none = 0,
		nofollow_symlinks = 1,
	}
	public ref struct Mount
	{
		private IntPtr _pointer;
		public Mount(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator Mount(IntPtr pointer) => new Mount(pointer, checkType: true);
		public static explicit operator IntPtr(Mount value) => value._pointer;
		public bool can_eject() => Gio.GioInterop.g_mount_can_eject(this);
		public bool can_unmount() => Gio.GioInterop.g_mount_can_unmount(this);
		public void eject(Gio.MountUnmountFlags flags, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_mount_eject(this, flags, cancellable, callback, user_data);
		public bool eject_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_mount_eject_finish(this, result, out error);
		public void eject_with_operation(Gio.MountUnmountFlags flags, Gio.MountOperation mount_operation, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_mount_eject_with_operation(this, flags, mount_operation, cancellable, callback, user_data);
		public bool eject_with_operation_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_mount_eject_with_operation_finish(this, result, out error);
		public Gio.File get_default_location() => Gio.GioInterop.g_mount_get_default_location(this);
		public Gio.Drive get_drive() => Gio.GioInterop.g_mount_get_drive(this);
		public Gio.Icon get_icon() => Gio.GioInterop.g_mount_get_icon(this);
		public string get_name() => Gio.GioInterop.g_mount_get_name(this);
		public Gio.File get_root() => Gio.GioInterop.g_mount_get_root(this);
		public string get_sort_key() => Gio.GioInterop.g_mount_get_sort_key(this);
		public Gio.Icon get_symbolic_icon() => Gio.GioInterop.g_mount_get_symbolic_icon(this);
		public string get_uuid() => Gio.GioInterop.g_mount_get_uuid(this);
		public Gio.Volume get_volume() => Gio.GioInterop.g_mount_get_volume(this);
		public void guess_content_type(bool force_rescan, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_mount_guess_content_type(this, force_rescan, cancellable, callback, user_data);
		public System.IntPtr guess_content_type_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_mount_guess_content_type_finish(this, result, out error);
		public System.IntPtr guess_content_type_sync(bool force_rescan, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_mount_guess_content_type_sync(this, force_rescan, cancellable, out error);
		public bool is_shadowed() => Gio.GioInterop.g_mount_is_shadowed(this);
		public void remount(Gio.MountMountFlags flags, Gio.MountOperation mount_operation, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_mount_remount(this, flags, mount_operation, cancellable, callback, user_data);
		public bool remount_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_mount_remount_finish(this, result, out error);
		public void shadow() => Gio.GioInterop.g_mount_shadow(this);
		public void unmount(Gio.MountUnmountFlags flags, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_mount_unmount(this, flags, cancellable, callback, user_data);
		public bool unmount_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_mount_unmount_finish(this, result, out error);
		public void unmount_with_operation(Gio.MountUnmountFlags flags, Gio.MountOperation mount_operation, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_mount_unmount_with_operation(this, flags, mount_operation, cancellable, callback, user_data);
		public bool unmount_with_operation_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_mount_unmount_with_operation_finish(this, result, out error);
		public void unshadow() => Gio.GioInterop.g_mount_unshadow(this);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_mount_get_type")]
		public static extern GLib.GType TypeOf();
	}
	[Flags]
	public enum FileMeasureFlags
	{
		none = 0,
		report_any_error = 2,
		apparent_size = 4,
		no_xdev = 8,
	}
	public ref struct FileMonitor
	{
		private IntPtr _pointer;
		public FileMonitor(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator FileMonitor(IntPtr pointer) => new FileMonitor(pointer, checkType: true);
		public static explicit operator IntPtr(FileMonitor value) => value._pointer;
		public static implicit operator GObject.Object(FileMonitor value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator FileMonitor(GObject.Object value) => new FileMonitor((IntPtr)value, checkType: true);
		public bool cancel() => Gio.GioInterop.g_file_monitor_cancel(this);
		public void emit_event(Gio.File child, Gio.File other_file, Gio.FileMonitorEvent event_type) => Gio.GioInterop.g_file_monitor_emit_event(this, child, other_file, event_type);
		public bool is_cancelled() => Gio.GioInterop.g_file_monitor_is_cancelled(this);
		public void set_rate_limit(int limit_msecs) => Gio.GioInterop.g_file_monitor_set_rate_limit(this, limit_msecs);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_file_monitor_get_type")]
		public static extern GLib.GType TypeOf();
	}
	[Flags]
	public enum FileMonitorFlags
	{
		none = 0,
		watch_mounts = 1,
		send_moved = 2,
		watch_hard_links = 4,
		watch_moves = 8,
	}
	[Flags]
	public enum MountMountFlags
	{
		none = 0,
	}
	public enum FileType
	{
		unknown = 0,
		regular = 1,
		directory = 2,
		symbolic_link = 3,
		special = 4,
		shortcut = 5,
		mountable = 6,
	}
	public ref struct FileInfo
	{
		private IntPtr _pointer;
		public FileInfo(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator FileInfo(IntPtr pointer) => new FileInfo(pointer, checkType: true);
		public static explicit operator IntPtr(FileInfo value) => value._pointer;
		public static implicit operator GObject.Object(FileInfo value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator FileInfo(GObject.Object value) => new FileInfo((IntPtr)value, checkType: true);
		public static Gio.FileInfo @new() => GioInterop.g_file_info_new();
		public void clear_status() => Gio.GioInterop.g_file_info_clear_status(this);
		public void copy_into(Gio.FileInfo dest_info) => Gio.GioInterop.g_file_info_copy_into(this, dest_info);
		public Gio.FileInfo dup() => Gio.GioInterop.g_file_info_dup(this);
		public string get_attribute_as_string(string attribute) => Gio.GioInterop.g_file_info_get_attribute_as_string(this, attribute);
		public bool get_attribute_boolean(string attribute) => Gio.GioInterop.g_file_info_get_attribute_boolean(this, attribute);
		public string get_attribute_byte_string(string attribute) => Gio.GioInterop.g_file_info_get_attribute_byte_string(this, attribute);
		public bool get_attribute_data(string attribute, out Gio.FileAttributeType type, System.IntPtr value_pp, out Gio.FileAttributeStatus status) => Gio.GioInterop.g_file_info_get_attribute_data(this, attribute, out type, value_pp, out status);
		public int get_attribute_int32(string attribute) => Gio.GioInterop.g_file_info_get_attribute_int32(this, attribute);
		public long get_attribute_int64(string attribute) => Gio.GioInterop.g_file_info_get_attribute_int64(this, attribute);
		public GObject.Object get_attribute_object(string attribute) => Gio.GioInterop.g_file_info_get_attribute_object(this, attribute);
		public Gio.FileAttributeStatus get_attribute_status(string attribute) => Gio.GioInterop.g_file_info_get_attribute_status(this, attribute);
		public string get_attribute_string(string attribute) => Gio.GioInterop.g_file_info_get_attribute_string(this, attribute);
		public System.IntPtr get_attribute_stringv(string attribute) => Gio.GioInterop.g_file_info_get_attribute_stringv(this, attribute);
		public Gio.FileAttributeType get_attribute_type(string attribute) => Gio.GioInterop.g_file_info_get_attribute_type(this, attribute);
		public uint get_attribute_uint32(string attribute) => Gio.GioInterop.g_file_info_get_attribute_uint32(this, attribute);
		public ulong get_attribute_uint64(string attribute) => Gio.GioInterop.g_file_info_get_attribute_uint64(this, attribute);
		public string get_content_type() => Gio.GioInterop.g_file_info_get_content_type(this);
		public GLib.DateTime get_deletion_date() => Gio.GioInterop.g_file_info_get_deletion_date(this);
		public string get_display_name() => Gio.GioInterop.g_file_info_get_display_name(this);
		public string get_edit_name() => Gio.GioInterop.g_file_info_get_edit_name(this);
		public string get_etag() => Gio.GioInterop.g_file_info_get_etag(this);
		public Gio.FileType get_file_type() => Gio.GioInterop.g_file_info_get_file_type(this);
		public Gio.Icon get_icon() => Gio.GioInterop.g_file_info_get_icon(this);
		public bool get_is_backup() => Gio.GioInterop.g_file_info_get_is_backup(this);
		public bool get_is_hidden() => Gio.GioInterop.g_file_info_get_is_hidden(this);
		public bool get_is_symlink() => Gio.GioInterop.g_file_info_get_is_symlink(this);
		public System.IntPtr get_name() => Gio.GioInterop.g_file_info_get_name(this);
		public long get_size() => Gio.GioInterop.g_file_info_get_size(this);
		public int get_sort_order() => Gio.GioInterop.g_file_info_get_sort_order(this);
		public Gio.Icon get_symbolic_icon() => Gio.GioInterop.g_file_info_get_symbolic_icon(this);
		public string get_symlink_target() => Gio.GioInterop.g_file_info_get_symlink_target(this);
		public bool has_attribute(string attribute) => Gio.GioInterop.g_file_info_has_attribute(this, attribute);
		public bool has_namespace(string name_space) => Gio.GioInterop.g_file_info_has_namespace(this, name_space);
		public System.IntPtr list_attributes(string name_space) => Gio.GioInterop.g_file_info_list_attributes(this, name_space);
		public void remove_attribute(string attribute) => Gio.GioInterop.g_file_info_remove_attribute(this, attribute);
		public void set_attribute(string attribute, Gio.FileAttributeType type, System.IntPtr value_p) => Gio.GioInterop.g_file_info_set_attribute(this, attribute, type, value_p);
		public void set_attribute_boolean(string attribute, bool attr_value) => Gio.GioInterop.g_file_info_set_attribute_boolean(this, attribute, attr_value);
		public void set_attribute_byte_string(string attribute, string attr_value) => Gio.GioInterop.g_file_info_set_attribute_byte_string(this, attribute, attr_value);
		public void set_attribute_int32(string attribute, int attr_value) => Gio.GioInterop.g_file_info_set_attribute_int32(this, attribute, attr_value);
		public void set_attribute_int64(string attribute, long attr_value) => Gio.GioInterop.g_file_info_set_attribute_int64(this, attribute, attr_value);
		public void set_attribute_mask(Gio.FileAttributeMatcher mask) => Gio.GioInterop.g_file_info_set_attribute_mask(this, mask);
		public void set_attribute_object(string attribute, GObject.Object attr_value) => Gio.GioInterop.g_file_info_set_attribute_object(this, attribute, attr_value);
		public bool set_attribute_status(string attribute, Gio.FileAttributeStatus status) => Gio.GioInterop.g_file_info_set_attribute_status(this, attribute, status);
		public void set_attribute_string(string attribute, string attr_value) => Gio.GioInterop.g_file_info_set_attribute_string(this, attribute, attr_value);
		public void set_attribute_stringv(string attribute, System.IntPtr attr_value) => Gio.GioInterop.g_file_info_set_attribute_stringv(this, attribute, attr_value);
		public void set_attribute_uint32(string attribute, uint attr_value) => Gio.GioInterop.g_file_info_set_attribute_uint32(this, attribute, attr_value);
		public void set_attribute_uint64(string attribute, ulong attr_value) => Gio.GioInterop.g_file_info_set_attribute_uint64(this, attribute, attr_value);
		public void set_content_type(string content_type) => Gio.GioInterop.g_file_info_set_content_type(this, content_type);
		public void set_display_name(string display_name) => Gio.GioInterop.g_file_info_set_display_name(this, display_name);
		public void set_edit_name(string edit_name) => Gio.GioInterop.g_file_info_set_edit_name(this, edit_name);
		public void set_file_type(Gio.FileType type) => Gio.GioInterop.g_file_info_set_file_type(this, type);
		public void set_icon(Gio.Icon icon) => Gio.GioInterop.g_file_info_set_icon(this, icon);
		public void set_is_hidden(bool is_hidden) => Gio.GioInterop.g_file_info_set_is_hidden(this, is_hidden);
		public void set_is_symlink(bool is_symlink) => Gio.GioInterop.g_file_info_set_is_symlink(this, is_symlink);
		public void set_modification_time(GLib.TimeVal mtime) => Gio.GioInterop.g_file_info_set_modification_time(this, mtime);
		public void set_name(System.IntPtr name) => Gio.GioInterop.g_file_info_set_name(this, name);
		public void set_size(long size) => Gio.GioInterop.g_file_info_set_size(this, size);
		public void set_sort_order(int sort_order) => Gio.GioInterop.g_file_info_set_sort_order(this, sort_order);
		public void set_symbolic_icon(Gio.Icon icon) => Gio.GioInterop.g_file_info_set_symbolic_icon(this, icon);
		public void set_symlink_target(string symlink_target) => Gio.GioInterop.g_file_info_set_symlink_target(this, symlink_target);
		public void unset_attribute_mask() => Gio.GioInterop.g_file_info_unset_attribute_mask(this);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_file_info_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct FileAttributeInfoList
	{
		private IntPtr _pointer;
		public FileAttributeInfoList(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator FileAttributeInfoList(IntPtr pointer) => new FileAttributeInfoList(pointer, checkType: true);
		public static explicit operator IntPtr(FileAttributeInfoList value) => value._pointer;
		public static Gio.FileAttributeInfoList @new() => GioInterop.g_file_attribute_info_list_new();
		public void add(string name, Gio.FileAttributeType type, Gio.FileAttributeInfoFlags flags) => Gio.GioInterop.g_file_attribute_info_list_add(this, name, type, flags);
		public Gio.FileAttributeInfoList dup() => Gio.GioInterop.g_file_attribute_info_list_dup(this);
		public Gio.FileAttributeInfo lookup(string name) => Gio.GioInterop.g_file_attribute_info_list_lookup(this, name);
		public Gio.FileAttributeInfoList @ref() => Gio.GioInterop.g_file_attribute_info_list_ref(this);
		public void unref() => Gio.GioInterop.g_file_attribute_info_list_unref(this);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_file_attribute_info_list_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct FileInputStream
	{
		private IntPtr _pointer;
		public FileInputStream(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator FileInputStream(IntPtr pointer) => new FileInputStream(pointer, checkType: true);
		public static explicit operator IntPtr(FileInputStream value) => value._pointer;
		public static implicit operator Gio.InputStream(FileInputStream value) => new Gio.InputStream((IntPtr)value, checkType: false);
		public static explicit operator FileInputStream(Gio.InputStream value) => new FileInputStream((IntPtr)value, checkType: true);
		public static implicit operator GObject.Object(FileInputStream value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator FileInputStream(GObject.Object value) => new FileInputStream((IntPtr)value, checkType: true);
		public Gio.FileInfo query_info(string attributes, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_file_input_stream_query_info(this, attributes, cancellable, out error);
		public void query_info_async(string attributes, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_file_input_stream_query_info_async(this, attributes, io_priority, cancellable, callback, user_data);
		public Gio.FileInfo query_info_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_file_input_stream_query_info_finish(this, result, out error);
		public void clear_pending() => Gio.GioInterop.g_input_stream_clear_pending(this);
		public bool close(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_close(this, cancellable, out error);
		public void close_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_close_async(this, io_priority, cancellable, callback, user_data);
		public bool close_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_input_stream_close_finish(this, result, out error);
		public bool has_pending() => Gio.GioInterop.g_input_stream_has_pending(this);
		public bool is_closed() => Gio.GioInterop.g_input_stream_is_closed(this);
		public long read(System.IntPtr buffer, ulong count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_read(this, buffer, count, cancellable, out error);
		public bool read_all(System.IntPtr buffer, ulong count, System.IntPtr bytes_read, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_all(this, buffer, count, bytes_read, cancellable, out error);
		public void read_all_async(System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_read_all_async(this, buffer, count, io_priority, cancellable, callback, user_data);
		public bool read_all_finish(Gio.AsyncResult result, System.IntPtr bytes_read, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_all_finish(this, result, bytes_read, out error);
		public void read_async(System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_read_async(this, buffer, count, io_priority, cancellable, callback, user_data);
		public GLib.Bytes read_bytes(ulong count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_bytes(this, count, cancellable, out error);
		public void read_bytes_async(ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_read_bytes_async(this, count, io_priority, cancellable, callback, user_data);
		public GLib.Bytes read_bytes_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_bytes_finish(this, result, out error);
		public long read_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_finish(this, result, out error);
		public bool set_pending(out GLib.Error error) => Gio.GioInterop.g_input_stream_set_pending(this, out error);
		public long skip(ulong count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_skip(this, count, cancellable, out error);
		public void skip_async(ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_skip_async(this, count, io_priority, cancellable, callback, user_data);
		public long skip_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_input_stream_skip_finish(this, result, out error);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_file_input_stream_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public enum FileAttributeType
	{
		invalid = 0,
		@string = 1,
		byte_string = 2,
		boolean = 3,
		uint32 = 4,
		int32 = 5,
		uint64 = 6,
		int64 = 7,
		@object = 8,
		stringv = 9,
	}
	[Flags]
	public enum FileAttributeInfoFlags
	{
		none = 0,
		copy_with_file = 1,
		copy_when_moved = 2,
	}
	public ref struct FileAttributeInfo
	{
		private IntPtr _pointer;
		public FileAttributeInfo(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator FileAttributeInfo(IntPtr pointer) => new FileAttributeInfo(pointer, checkType: true);
		public static explicit operator IntPtr(FileAttributeInfo value) => value._pointer;
	}
	public ref struct FileAttributeMatcher
	{
		private IntPtr _pointer;
		public FileAttributeMatcher(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator FileAttributeMatcher(IntPtr pointer) => new FileAttributeMatcher(pointer, checkType: true);
		public static explicit operator IntPtr(FileAttributeMatcher value) => value._pointer;
		public static Gio.FileAttributeMatcher @new(string attributes) => GioInterop.g_file_attribute_matcher_new(attributes);
		public bool enumerate_namespace(string ns) => Gio.GioInterop.g_file_attribute_matcher_enumerate_namespace(this, ns);
		public string enumerate_next() => Gio.GioInterop.g_file_attribute_matcher_enumerate_next(this);
		public bool matches(string attribute) => Gio.GioInterop.g_file_attribute_matcher_matches(this, attribute);
		public bool matches_only(string attribute) => Gio.GioInterop.g_file_attribute_matcher_matches_only(this, attribute);
		public Gio.FileAttributeMatcher @ref() => Gio.GioInterop.g_file_attribute_matcher_ref(this);
		public Gio.FileAttributeMatcher subtract(Gio.FileAttributeMatcher subtract) => Gio.GioInterop.g_file_attribute_matcher_subtract(this, subtract);
		public string to_string() => Gio.GioInterop.g_file_attribute_matcher_to_string(this);
		public void unref() => Gio.GioInterop.g_file_attribute_matcher_unref(this);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_file_attribute_matcher_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public enum FileAttributeStatus
	{
		unset = 0,
		set = 1,
		error_setting = 2,
	}
	public ref struct FileDescriptorBased
	{
		private IntPtr _pointer;
		public FileDescriptorBased(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator FileDescriptorBased(IntPtr pointer) => new FileDescriptorBased(pointer, checkType: true);
		public static explicit operator IntPtr(FileDescriptorBased value) => value._pointer;
		public int get_fd() => Gio.GioInterop.g_file_descriptor_based_get_fd(this);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_file_descriptor_based_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct FileDescriptorBasedIface
	{
		private IntPtr _pointer;
		public FileDescriptorBasedIface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator FileDescriptorBasedIface(IntPtr pointer) => new FileDescriptorBasedIface(pointer, checkType: true);
		public static explicit operator IntPtr(FileDescriptorBasedIface value) => value._pointer;
	}
	public ref struct FileEnumeratorPrivate
	{
		private IntPtr _pointer;
		public FileEnumeratorPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator FileEnumeratorPrivate(IntPtr pointer) => new FileEnumeratorPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(FileEnumeratorPrivate value) => value._pointer;
	}
	public ref struct FileEnumeratorClass
	{
		private IntPtr _pointer;
		public FileEnumeratorClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator FileEnumeratorClass(IntPtr pointer) => new FileEnumeratorClass(pointer, checkType: true);
		public static explicit operator IntPtr(FileEnumeratorClass value) => value._pointer;
	}
	public ref struct FileIOStreamPrivate
	{
		private IntPtr _pointer;
		public FileIOStreamPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator FileIOStreamPrivate(IntPtr pointer) => new FileIOStreamPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(FileIOStreamPrivate value) => value._pointer;
	}
	public ref struct IOStreamClass
	{
		private IntPtr _pointer;
		public IOStreamClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator IOStreamClass(IntPtr pointer) => new IOStreamClass(pointer, checkType: true);
		public static explicit operator IntPtr(IOStreamClass value) => value._pointer;
	}
	public ref struct FileIOStreamClass
	{
		private IntPtr _pointer;
		public FileIOStreamClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator FileIOStreamClass(IntPtr pointer) => new FileIOStreamClass(pointer, checkType: true);
		public static explicit operator IntPtr(FileIOStreamClass value) => value._pointer;
	}
	public ref struct FileIcon
	{
		private IntPtr _pointer;
		public FileIcon(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator FileIcon(IntPtr pointer) => new FileIcon(pointer, checkType: true);
		public static explicit operator IntPtr(FileIcon value) => value._pointer;
		public static implicit operator GObject.Object(FileIcon value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator FileIcon(GObject.Object value) => new FileIcon((IntPtr)value, checkType: true);
		public static Gio.FileIcon @new(Gio.File file) => GioInterop.g_file_icon_new(file);
		public Gio.File get_file() => Gio.GioInterop.g_file_icon_get_file(this);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_file_icon_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct FileIconClass
	{
		private IntPtr _pointer;
		public FileIconClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator FileIconClass(IntPtr pointer) => new FileIconClass(pointer, checkType: true);
		public static explicit operator IntPtr(FileIconClass value) => value._pointer;
	}
	public ref struct FileIface
	{
		private IntPtr _pointer;
		public FileIface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator FileIface(IntPtr pointer) => new FileIface(pointer, checkType: true);
		public static explicit operator IntPtr(FileIface value) => value._pointer;
	}
	public ref struct FileInfoClass
	{
		private IntPtr _pointer;
		public FileInfoClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator FileInfoClass(IntPtr pointer) => new FileInfoClass(pointer, checkType: true);
		public static explicit operator IntPtr(FileInfoClass value) => value._pointer;
	}
	public ref struct FileInputStreamPrivate
	{
		private IntPtr _pointer;
		public FileInputStreamPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator FileInputStreamPrivate(IntPtr pointer) => new FileInputStreamPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(FileInputStreamPrivate value) => value._pointer;
	}
	public ref struct InputStreamClass
	{
		private IntPtr _pointer;
		public InputStreamClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator InputStreamClass(IntPtr pointer) => new InputStreamClass(pointer, checkType: true);
		public static explicit operator IntPtr(InputStreamClass value) => value._pointer;
	}
	public ref struct FileInputStreamClass
	{
		private IntPtr _pointer;
		public FileInputStreamClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator FileInputStreamClass(IntPtr pointer) => new FileInputStreamClass(pointer, checkType: true);
		public static explicit operator IntPtr(FileInputStreamClass value) => value._pointer;
	}
	public enum FileMonitorEvent
	{
		changed = 0,
		changes_done_hint = 1,
		deleted = 2,
		created = 3,
		attribute_changed = 4,
		pre_unmount = 5,
		unmounted = 6,
		moved = 7,
		renamed = 8,
		moved_in = 9,
		moved_out = 10,
	}
	public ref struct FileMonitorPrivate
	{
		private IntPtr _pointer;
		public FileMonitorPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator FileMonitorPrivate(IntPtr pointer) => new FileMonitorPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(FileMonitorPrivate value) => value._pointer;
	}
	public ref struct FileMonitorClass
	{
		private IntPtr _pointer;
		public FileMonitorClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator FileMonitorClass(IntPtr pointer) => new FileMonitorClass(pointer, checkType: true);
		public static explicit operator IntPtr(FileMonitorClass value) => value._pointer;
	}
	public ref struct FileOutputStreamPrivate
	{
		private IntPtr _pointer;
		public FileOutputStreamPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator FileOutputStreamPrivate(IntPtr pointer) => new FileOutputStreamPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(FileOutputStreamPrivate value) => value._pointer;
	}
	public ref struct OutputStreamClass
	{
		private IntPtr _pointer;
		public OutputStreamClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator OutputStreamClass(IntPtr pointer) => new OutputStreamClass(pointer, checkType: true);
		public static explicit operator IntPtr(OutputStreamClass value) => value._pointer;
	}
	public ref struct FileOutputStreamClass
	{
		private IntPtr _pointer;
		public FileOutputStreamClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator FileOutputStreamClass(IntPtr pointer) => new FileOutputStreamClass(pointer, checkType: true);
		public static explicit operator IntPtr(FileOutputStreamClass value) => value._pointer;
	}
	public ref struct FilenameCompleter
	{
		private IntPtr _pointer;
		public FilenameCompleter(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator FilenameCompleter(IntPtr pointer) => new FilenameCompleter(pointer, checkType: true);
		public static explicit operator IntPtr(FilenameCompleter value) => value._pointer;
		public static implicit operator GObject.Object(FilenameCompleter value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator FilenameCompleter(GObject.Object value) => new FilenameCompleter((IntPtr)value, checkType: true);
		public static Gio.FilenameCompleter @new() => GioInterop.g_filename_completer_new();
		public string get_completion_suffix(string initial_text) => Gio.GioInterop.g_filename_completer_get_completion_suffix(this, initial_text);
		public System.IntPtr get_completions(string initial_text) => Gio.GioInterop.g_filename_completer_get_completions(this, initial_text);
		public void set_dirs_only(bool dirs_only) => Gio.GioInterop.g_filename_completer_set_dirs_only(this, dirs_only);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_filename_completer_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct FilenameCompleterClass
	{
		private IntPtr _pointer;
		public FilenameCompleterClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator FilenameCompleterClass(IntPtr pointer) => new FilenameCompleterClass(pointer, checkType: true);
		public static explicit operator IntPtr(FilenameCompleterClass value) => value._pointer;
	}
	public enum FilesystemPreviewType
	{
		if_always = 0,
		if_local = 1,
		never = 2,
	}
	public enum IOErrorEnum
	{
		failed = 0,
		not_found = 1,
		exists = 2,
		is_directory = 3,
		not_directory = 4,
		not_empty = 5,
		not_regular_file = 6,
		not_symbolic_link = 7,
		not_mountable_file = 8,
		filename_too_long = 9,
		invalid_filename = 10,
		too_many_links = 11,
		no_space = 12,
		invalid_argument = 13,
		permission_denied = 14,
		not_supported = 15,
		not_mounted = 16,
		already_mounted = 17,
		closed = 18,
		cancelled = 19,
		pending = 20,
		read_only = 21,
		cant_create_backup = 22,
		wrong_etag = 23,
		timed_out = 24,
		would_recurse = 25,
		busy = 26,
		would_block = 27,
		host_not_found = 28,
		would_merge = 29,
		failed_handled = 30,
		too_many_open_files = 31,
		not_initialized = 32,
		address_in_use = 33,
		partial_input = 34,
		invalid_data = 35,
		dbus_error = 36,
		host_unreachable = 37,
		network_unreachable = 38,
		connection_refused = 39,
		proxy_failed = 40,
		proxy_auth_failed = 41,
		proxy_need_auth = 42,
		proxy_not_allowed = 43,
		broken_pipe = 44,
		connection_closed = 44,
		not_connected = 45,
		message_too_large = 46,
	}
	public ref struct IOExtension
	{
		private IntPtr _pointer;
		public IOExtension(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator IOExtension(IntPtr pointer) => new IOExtension(pointer, checkType: true);
		public static explicit operator IntPtr(IOExtension value) => value._pointer;
		public string get_name() => Gio.GioInterop.g_io_extension_get_name(this);
		public int get_priority() => Gio.GioInterop.g_io_extension_get_priority(this);
		public GLib.GType get_type() => Gio.GioInterop.g_io_extension_get_type(this);
		public GObject.TypeClass ref_class() => Gio.GioInterop.g_io_extension_ref_class(this);
	}
	public ref struct IOExtensionPoint
	{
		private IntPtr _pointer;
		public IOExtensionPoint(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator IOExtensionPoint(IntPtr pointer) => new IOExtensionPoint(pointer, checkType: true);
		public static explicit operator IntPtr(IOExtensionPoint value) => value._pointer;
		public Gio.IOExtension get_extension_by_name(string name) => Gio.GioInterop.g_io_extension_point_get_extension_by_name(this, name);
		public System.IntPtr get_extensions() => Gio.GioInterop.g_io_extension_point_get_extensions(this);
		public GLib.GType get_required_type() => Gio.GioInterop.g_io_extension_point_get_required_type(this);
		public void set_required_type(GLib.GType type) => Gio.GioInterop.g_io_extension_point_set_required_type(this, type);
		public static Gio.IOExtension implement(string extension_point_name, GLib.GType type, string extension_name, int priority) => GioInterop.g_io_extension_point_implement(extension_point_name, type, extension_name, priority);
		public static Gio.IOExtensionPoint lookup(string name) => GioInterop.g_io_extension_point_lookup(name);
		public static Gio.IOExtensionPoint register(string name) => GioInterop.g_io_extension_point_register(name);
	}
	public ref struct IOModule
	{
		private IntPtr _pointer;
		public IOModule(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator IOModule(IntPtr pointer) => new IOModule(pointer, checkType: true);
		public static explicit operator IntPtr(IOModule value) => value._pointer;
		public static implicit operator GObject.TypeModule(IOModule value) => new GObject.TypeModule((IntPtr)value, checkType: false);
		public static explicit operator IOModule(GObject.TypeModule value) => new IOModule((IntPtr)value, checkType: true);
		public static implicit operator GObject.Object(IOModule value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator IOModule(GObject.Object value) => new IOModule((IntPtr)value, checkType: true);
		public static Gio.IOModule @new(System.IntPtr filename) => GioInterop.g_io_module_new(filename);
		public static System.IntPtr query() => GioInterop.g_io_module_query();
		public void load() => Gio.GioInterop.g_io_module_load(this);
		public void unload() => Gio.GioInterop.g_io_module_unload(this);
		public void add_interface(GLib.GType instance_type, GLib.GType interface_type, GObject.InterfaceInfo interface_info) => GObject.GObjectInterop.g_type_module_add_interface(this, instance_type, interface_type, interface_info);
		public GLib.GType register_enum(string name, GObject.EnumValue const_static_values) => GObject.GObjectInterop.g_type_module_register_enum(this, name, const_static_values);
		public GLib.GType register_flags(string name, GObject.FlagsValue const_static_values) => GObject.GObjectInterop.g_type_module_register_flags(this, name, const_static_values);
		public GLib.GType register_type(GLib.GType parent_type, string type_name, GObject.TypeInfo type_info, GObject.TypeFlags flags) => GObject.GObjectInterop.g_type_module_register_type(this, parent_type, type_name, type_info, flags);
		public void set_name(string name) => GObject.GObjectInterop.g_type_module_set_name(this, name);
		public void unuse() => GObject.GObjectInterop.g_type_module_unuse(this);
		public bool use() => GObject.GObjectInterop.g_type_module_use(this);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_io_module_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct IOModuleClass
	{
		private IntPtr _pointer;
		public IOModuleClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator IOModuleClass(IntPtr pointer) => new IOModuleClass(pointer, checkType: true);
		public static explicit operator IntPtr(IOModuleClass value) => value._pointer;
	}
	public ref struct IOModuleScope
	{
		private IntPtr _pointer;
		public IOModuleScope(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator IOModuleScope(IntPtr pointer) => new IOModuleScope(pointer, checkType: true);
		public static explicit operator IntPtr(IOModuleScope value) => value._pointer;
		public void block(string basename) => Gio.GioInterop.g_io_module_scope_block(this, basename);
		public void free() => Gio.GioInterop.g_io_module_scope_free(this);
		public static Gio.IOModuleScope @new(Gio.IOModuleScopeFlags flags) => GioInterop.g_io_module_scope_new(flags);
	}
	public enum IOModuleScopeFlags
	{
		none = 0,
		block_duplicates = 1,
	}
	public ref struct IOSchedulerJob
	{
		private IntPtr _pointer;
		public IOSchedulerJob(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator IOSchedulerJob(IntPtr pointer) => new IOSchedulerJob(pointer, checkType: true);
		public static explicit operator IntPtr(IOSchedulerJob value) => value._pointer;
		public bool send_to_mainloop(System.IntPtr func, System.IntPtr user_data, System.IntPtr notify) => Gio.GioInterop.g_io_scheduler_job_send_to_mainloop(this, func, user_data, notify);
		public void send_to_mainloop_async(System.IntPtr func, System.IntPtr user_data, System.IntPtr notify) => Gio.GioInterop.g_io_scheduler_job_send_to_mainloop_async(this, func, user_data, notify);
	}
	[Flags]
	public enum IOStreamSpliceFlags
	{
		none = 0,
		close_stream1 = 1,
		close_stream2 = 2,
		wait_for_both = 4,
	}
	public ref struct IOStreamPrivate
	{
		private IntPtr _pointer;
		public IOStreamPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator IOStreamPrivate(IntPtr pointer) => new IOStreamPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(IOStreamPrivate value) => value._pointer;
	}
	public ref struct IOStreamAdapter
	{
		private IntPtr _pointer;
		public IOStreamAdapter(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator IOStreamAdapter(IntPtr pointer) => new IOStreamAdapter(pointer, checkType: true);
		public static explicit operator IntPtr(IOStreamAdapter value) => value._pointer;
	}
	public ref struct IconIface
	{
		private IntPtr _pointer;
		public IconIface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator IconIface(IntPtr pointer) => new IconIface(pointer, checkType: true);
		public static explicit operator IntPtr(IconIface value) => value._pointer;
	}
	public ref struct InetAddress
	{
		private IntPtr _pointer;
		public InetAddress(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator InetAddress(IntPtr pointer) => new InetAddress(pointer, checkType: true);
		public static explicit operator IntPtr(InetAddress value) => value._pointer;
		public static implicit operator GObject.Object(InetAddress value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator InetAddress(GObject.Object value) => new InetAddress((IntPtr)value, checkType: true);
		public static Gio.InetAddress new_any(Gio.SocketFamily family) => GioInterop.g_inet_address_new_any(family);
		public static Gio.InetAddress new_from_bytes(System.IntPtr bytes, Gio.SocketFamily family) => GioInterop.g_inet_address_new_from_bytes(bytes, family);
		public static Gio.InetAddress new_from_string(string @string) => GioInterop.g_inet_address_new_from_string(@string);
		public static Gio.InetAddress new_loopback(Gio.SocketFamily family) => GioInterop.g_inet_address_new_loopback(family);
		public bool equal(Gio.InetAddress other_address) => Gio.GioInterop.g_inet_address_equal(this, other_address);
		public Gio.SocketFamily get_family() => Gio.GioInterop.g_inet_address_get_family(this);
		public bool get_is_any() => Gio.GioInterop.g_inet_address_get_is_any(this);
		public bool get_is_link_local() => Gio.GioInterop.g_inet_address_get_is_link_local(this);
		public bool get_is_loopback() => Gio.GioInterop.g_inet_address_get_is_loopback(this);
		public bool get_is_mc_global() => Gio.GioInterop.g_inet_address_get_is_mc_global(this);
		public bool get_is_mc_link_local() => Gio.GioInterop.g_inet_address_get_is_mc_link_local(this);
		public bool get_is_mc_node_local() => Gio.GioInterop.g_inet_address_get_is_mc_node_local(this);
		public bool get_is_mc_org_local() => Gio.GioInterop.g_inet_address_get_is_mc_org_local(this);
		public bool get_is_mc_site_local() => Gio.GioInterop.g_inet_address_get_is_mc_site_local(this);
		public bool get_is_multicast() => Gio.GioInterop.g_inet_address_get_is_multicast(this);
		public bool get_is_site_local() => Gio.GioInterop.g_inet_address_get_is_site_local(this);
		public ulong get_native_size() => Gio.GioInterop.g_inet_address_get_native_size(this);
		public System.IntPtr to_bytes() => Gio.GioInterop.g_inet_address_to_bytes(this);
		public string to_string() => Gio.GioInterop.g_inet_address_to_string(this);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_inet_address_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public enum SocketFamily
	{
		invalid = 0,
		unix = 1,
		ipv4 = 2,
		ipv6 = 10,
	}
	public ref struct InetAddressPrivate
	{
		private IntPtr _pointer;
		public InetAddressPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator InetAddressPrivate(IntPtr pointer) => new InetAddressPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(InetAddressPrivate value) => value._pointer;
	}
	public ref struct InetAddressClass
	{
		private IntPtr _pointer;
		public InetAddressClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator InetAddressClass(IntPtr pointer) => new InetAddressClass(pointer, checkType: true);
		public static explicit operator IntPtr(InetAddressClass value) => value._pointer;
	}
	public ref struct InetAddressMask
	{
		private IntPtr _pointer;
		public InetAddressMask(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator InetAddressMask(IntPtr pointer) => new InetAddressMask(pointer, checkType: true);
		public static explicit operator IntPtr(InetAddressMask value) => value._pointer;
		public static implicit operator GObject.Object(InetAddressMask value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator InetAddressMask(GObject.Object value) => new InetAddressMask((IntPtr)value, checkType: true);
		public static Gio.InetAddressMask @new(Gio.InetAddress addr, uint length, out GLib.Error error) => GioInterop.g_inet_address_mask_new(addr, length, out error);
		public static Gio.InetAddressMask new_from_string(string mask_string, out GLib.Error error) => GioInterop.g_inet_address_mask_new_from_string(mask_string, out error);
		public bool equal(Gio.InetAddressMask mask2) => Gio.GioInterop.g_inet_address_mask_equal(this, mask2);
		public Gio.InetAddress get_address() => Gio.GioInterop.g_inet_address_mask_get_address(this);
		public Gio.SocketFamily get_family() => Gio.GioInterop.g_inet_address_mask_get_family(this);
		public uint get_length() => Gio.GioInterop.g_inet_address_mask_get_length(this);
		public bool matches(Gio.InetAddress address) => Gio.GioInterop.g_inet_address_mask_matches(this, address);
		public string to_string() => Gio.GioInterop.g_inet_address_mask_to_string(this);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_inet_address_mask_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct InetAddressMaskPrivate
	{
		private IntPtr _pointer;
		public InetAddressMaskPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator InetAddressMaskPrivate(IntPtr pointer) => new InetAddressMaskPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(InetAddressMaskPrivate value) => value._pointer;
	}
	public ref struct InetAddressMaskClass
	{
		private IntPtr _pointer;
		public InetAddressMaskClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator InetAddressMaskClass(IntPtr pointer) => new InetAddressMaskClass(pointer, checkType: true);
		public static explicit operator IntPtr(InetAddressMaskClass value) => value._pointer;
	}
	public ref struct SocketAddress
	{
		private IntPtr _pointer;
		public SocketAddress(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator SocketAddress(IntPtr pointer) => new SocketAddress(pointer, checkType: true);
		public static explicit operator IntPtr(SocketAddress value) => value._pointer;
		public static implicit operator GObject.Object(SocketAddress value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator SocketAddress(GObject.Object value) => new SocketAddress((IntPtr)value, checkType: true);
		public static Gio.SocketAddress new_from_native(System.IntPtr native, ulong len) => GioInterop.g_socket_address_new_from_native(native, len);
		public Gio.SocketFamily get_family() => Gio.GioInterop.g_socket_address_get_family(this);
		public long get_native_size() => Gio.GioInterop.g_socket_address_get_native_size(this);
		public bool to_native(System.IntPtr dest, ulong destlen, out GLib.Error error) => Gio.GioInterop.g_socket_address_to_native(this, dest, destlen, out error);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_socket_address_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct InetSocketAddress
	{
		private IntPtr _pointer;
		public InetSocketAddress(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator InetSocketAddress(IntPtr pointer) => new InetSocketAddress(pointer, checkType: true);
		public static explicit operator IntPtr(InetSocketAddress value) => value._pointer;
		public static implicit operator Gio.SocketAddress(InetSocketAddress value) => new Gio.SocketAddress((IntPtr)value, checkType: false);
		public static explicit operator InetSocketAddress(Gio.SocketAddress value) => new InetSocketAddress((IntPtr)value, checkType: true);
		public static implicit operator GObject.Object(InetSocketAddress value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator InetSocketAddress(GObject.Object value) => new InetSocketAddress((IntPtr)value, checkType: true);
		public static Gio.SocketAddress @new(Gio.InetAddress address, ushort port) => GioInterop.g_inet_socket_address_new(address, port);
		public static Gio.SocketAddress new_from_string(string address, uint port) => GioInterop.g_inet_socket_address_new_from_string(address, port);
		public Gio.InetAddress get_address() => Gio.GioInterop.g_inet_socket_address_get_address(this);
		public uint get_flowinfo() => Gio.GioInterop.g_inet_socket_address_get_flowinfo(this);
		public ushort get_port() => Gio.GioInterop.g_inet_socket_address_get_port(this);
		public uint get_scope_id() => Gio.GioInterop.g_inet_socket_address_get_scope_id(this);
		public Gio.SocketFamily get_family() => Gio.GioInterop.g_socket_address_get_family(this);
		public long get_native_size() => Gio.GioInterop.g_socket_address_get_native_size(this);
		public bool to_native(System.IntPtr dest, ulong destlen, out GLib.Error error) => Gio.GioInterop.g_socket_address_to_native(this, dest, destlen, out error);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_inet_socket_address_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct InetSocketAddressPrivate
	{
		private IntPtr _pointer;
		public InetSocketAddressPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator InetSocketAddressPrivate(IntPtr pointer) => new InetSocketAddressPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(InetSocketAddressPrivate value) => value._pointer;
	}
	public ref struct SocketAddressClass
	{
		private IntPtr _pointer;
		public SocketAddressClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator SocketAddressClass(IntPtr pointer) => new SocketAddressClass(pointer, checkType: true);
		public static explicit operator IntPtr(SocketAddressClass value) => value._pointer;
	}
	public ref struct InetSocketAddressClass
	{
		private IntPtr _pointer;
		public InetSocketAddressClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator InetSocketAddressClass(IntPtr pointer) => new InetSocketAddressClass(pointer, checkType: true);
		public static explicit operator IntPtr(InetSocketAddressClass value) => value._pointer;
	}
	public ref struct InitableIface
	{
		private IntPtr _pointer;
		public InitableIface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator InitableIface(IntPtr pointer) => new InitableIface(pointer, checkType: true);
		public static explicit operator IntPtr(InitableIface value) => value._pointer;
	}
	public ref struct InputVector
	{
		private IntPtr _pointer;
		public InputVector(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator InputVector(IntPtr pointer) => new InputVector(pointer, checkType: true);
		public static explicit operator IntPtr(InputVector value) => value._pointer;
	}
	public ref struct SocketControlMessage
	{
		private IntPtr _pointer;
		public SocketControlMessage(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator SocketControlMessage(IntPtr pointer) => new SocketControlMessage(pointer, checkType: true);
		public static explicit operator IntPtr(SocketControlMessage value) => value._pointer;
		public static implicit operator GObject.Object(SocketControlMessage value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator SocketControlMessage(GObject.Object value) => new SocketControlMessage((IntPtr)value, checkType: true);
		public static Gio.SocketControlMessage deserialize(int level, int type, ulong size, System.IntPtr data) => GioInterop.g_socket_control_message_deserialize(level, type, size, data);
		public int get_level() => Gio.GioInterop.g_socket_control_message_get_level(this);
		public int get_msg_type() => Gio.GioInterop.g_socket_control_message_get_msg_type(this);
		public ulong get_size() => Gio.GioInterop.g_socket_control_message_get_size(this);
		public void serialize(System.IntPtr data) => Gio.GioInterop.g_socket_control_message_serialize(this, data);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_socket_control_message_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct InputStreamPrivate
	{
		private IntPtr _pointer;
		public InputStreamPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator InputStreamPrivate(IntPtr pointer) => new InputStreamPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(InputStreamPrivate value) => value._pointer;
	}
	public ref struct ListModel
	{
		private IntPtr _pointer;
		public ListModel(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator ListModel(IntPtr pointer) => new ListModel(pointer, checkType: true);
		public static explicit operator IntPtr(ListModel value) => value._pointer;
		public GObject.Object get_item(uint position) => Gio.GioInterop.g_list_model_get_item(this, position);
		public GLib.GType get_item_type() => Gio.GioInterop.g_list_model_get_item_type(this);
		public uint get_n_items() => Gio.GioInterop.g_list_model_get_n_items(this);
		public GObject.Object get_object(uint position) => Gio.GioInterop.g_list_model_get_object(this, position);
		public void items_changed(uint position, uint removed, uint added) => Gio.GioInterop.g_list_model_items_changed(this, position, removed, added);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_list_model_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct ListModelInterface
	{
		private IntPtr _pointer;
		public ListModelInterface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator ListModelInterface(IntPtr pointer) => new ListModelInterface(pointer, checkType: true);
		public static explicit operator IntPtr(ListModelInterface value) => value._pointer;
	}
	public ref struct ListStore
	{
		private IntPtr _pointer;
		public ListStore(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator ListStore(IntPtr pointer) => new ListStore(pointer, checkType: true);
		public static explicit operator IntPtr(ListStore value) => value._pointer;
		public static implicit operator GObject.Object(ListStore value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator ListStore(GObject.Object value) => new ListStore((IntPtr)value, checkType: true);
		public static Gio.ListStore @new(GLib.GType item_type) => GioInterop.g_list_store_new(item_type);
		public void append(GObject.Object item) => Gio.GioInterop.g_list_store_append(this, item);
		public void insert(uint position, GObject.Object item) => Gio.GioInterop.g_list_store_insert(this, position, item);
		public uint insert_sorted(GObject.Object item, System.IntPtr compare_func, System.IntPtr user_data) => Gio.GioInterop.g_list_store_insert_sorted(this, item, compare_func, user_data);
		public void remove(uint position) => Gio.GioInterop.g_list_store_remove(this, position);
		public void remove_all() => Gio.GioInterop.g_list_store_remove_all(this);
		public void sort(System.IntPtr compare_func, System.IntPtr user_data) => Gio.GioInterop.g_list_store_sort(this, compare_func, user_data);
		public void splice(uint position, uint n_removals, System.IntPtr additions, uint n_additions) => Gio.GioInterop.g_list_store_splice(this, position, n_removals, additions, n_additions);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_list_store_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct ListStoreClass
	{
		private IntPtr _pointer;
		public ListStoreClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator ListStoreClass(IntPtr pointer) => new ListStoreClass(pointer, checkType: true);
		public static explicit operator IntPtr(ListStoreClass value) => value._pointer;
	}
	public ref struct LoadableIconIface
	{
		private IntPtr _pointer;
		public LoadableIconIface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator LoadableIconIface(IntPtr pointer) => new LoadableIconIface(pointer, checkType: true);
		public static explicit operator IntPtr(LoadableIconIface value) => value._pointer;
	}
	public ref struct MemoryInputStream
	{
		private IntPtr _pointer;
		public MemoryInputStream(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator MemoryInputStream(IntPtr pointer) => new MemoryInputStream(pointer, checkType: true);
		public static explicit operator IntPtr(MemoryInputStream value) => value._pointer;
		public static implicit operator Gio.InputStream(MemoryInputStream value) => new Gio.InputStream((IntPtr)value, checkType: false);
		public static explicit operator MemoryInputStream(Gio.InputStream value) => new MemoryInputStream((IntPtr)value, checkType: true);
		public static implicit operator GObject.Object(MemoryInputStream value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator MemoryInputStream(GObject.Object value) => new MemoryInputStream((IntPtr)value, checkType: true);
		public static Gio.InputStream @new() => GioInterop.g_memory_input_stream_new();
		public static Gio.InputStream new_from_bytes(GLib.Bytes bytes) => GioInterop.g_memory_input_stream_new_from_bytes(bytes);
		public static Gio.InputStream new_from_data(System.IntPtr data, long len, System.IntPtr destroy) => GioInterop.g_memory_input_stream_new_from_data(data, len, destroy);
		public void add_bytes(GLib.Bytes bytes) => Gio.GioInterop.g_memory_input_stream_add_bytes(this, bytes);
		public void add_data(System.IntPtr data, long len, System.IntPtr destroy) => Gio.GioInterop.g_memory_input_stream_add_data(this, data, len, destroy);
		public void clear_pending() => Gio.GioInterop.g_input_stream_clear_pending(this);
		public bool close(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_close(this, cancellable, out error);
		public void close_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_close_async(this, io_priority, cancellable, callback, user_data);
		public bool close_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_input_stream_close_finish(this, result, out error);
		public bool has_pending() => Gio.GioInterop.g_input_stream_has_pending(this);
		public bool is_closed() => Gio.GioInterop.g_input_stream_is_closed(this);
		public long read(System.IntPtr buffer, ulong count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_read(this, buffer, count, cancellable, out error);
		public bool read_all(System.IntPtr buffer, ulong count, System.IntPtr bytes_read, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_all(this, buffer, count, bytes_read, cancellable, out error);
		public void read_all_async(System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_read_all_async(this, buffer, count, io_priority, cancellable, callback, user_data);
		public bool read_all_finish(Gio.AsyncResult result, System.IntPtr bytes_read, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_all_finish(this, result, bytes_read, out error);
		public void read_async(System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_read_async(this, buffer, count, io_priority, cancellable, callback, user_data);
		public GLib.Bytes read_bytes(ulong count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_bytes(this, count, cancellable, out error);
		public void read_bytes_async(ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_read_bytes_async(this, count, io_priority, cancellable, callback, user_data);
		public GLib.Bytes read_bytes_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_bytes_finish(this, result, out error);
		public long read_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_finish(this, result, out error);
		public bool set_pending(out GLib.Error error) => Gio.GioInterop.g_input_stream_set_pending(this, out error);
		public long skip(ulong count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_skip(this, count, cancellable, out error);
		public void skip_async(ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_skip_async(this, count, io_priority, cancellable, callback, user_data);
		public long skip_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_input_stream_skip_finish(this, result, out error);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_memory_input_stream_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct MemoryInputStreamPrivate
	{
		private IntPtr _pointer;
		public MemoryInputStreamPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator MemoryInputStreamPrivate(IntPtr pointer) => new MemoryInputStreamPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(MemoryInputStreamPrivate value) => value._pointer;
	}
	public ref struct MemoryInputStreamClass
	{
		private IntPtr _pointer;
		public MemoryInputStreamClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator MemoryInputStreamClass(IntPtr pointer) => new MemoryInputStreamClass(pointer, checkType: true);
		public static explicit operator IntPtr(MemoryInputStreamClass value) => value._pointer;
	}
	public ref struct MemoryOutputStream
	{
		private IntPtr _pointer;
		public MemoryOutputStream(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator MemoryOutputStream(IntPtr pointer) => new MemoryOutputStream(pointer, checkType: true);
		public static explicit operator IntPtr(MemoryOutputStream value) => value._pointer;
		public static implicit operator Gio.OutputStream(MemoryOutputStream value) => new Gio.OutputStream((IntPtr)value, checkType: false);
		public static explicit operator MemoryOutputStream(Gio.OutputStream value) => new MemoryOutputStream((IntPtr)value, checkType: true);
		public static implicit operator GObject.Object(MemoryOutputStream value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator MemoryOutputStream(GObject.Object value) => new MemoryOutputStream((IntPtr)value, checkType: true);
		public static Gio.OutputStream @new(System.IntPtr data, ulong size, System.IntPtr realloc_function, System.IntPtr destroy_function) => GioInterop.g_memory_output_stream_new(data, size, realloc_function, destroy_function);
		public static Gio.OutputStream new_resizable() => GioInterop.g_memory_output_stream_new_resizable();
		public System.IntPtr get_data() => Gio.GioInterop.g_memory_output_stream_get_data(this);
		public ulong get_data_size() => Gio.GioInterop.g_memory_output_stream_get_data_size(this);
		public ulong get_size() => Gio.GioInterop.g_memory_output_stream_get_size(this);
		public GLib.Bytes steal_as_bytes() => Gio.GioInterop.g_memory_output_stream_steal_as_bytes(this);
		public System.IntPtr steal_data() => Gio.GioInterop.g_memory_output_stream_steal_data(this);
		public void clear_pending() => Gio.GioInterop.g_output_stream_clear_pending(this);
		public bool close(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_close(this, cancellable, out error);
		public void close_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_close_async(this, io_priority, cancellable, callback, user_data);
		public bool close_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_close_finish(this, result, out error);
		public bool flush(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_flush(this, cancellable, out error);
		public void flush_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_flush_async(this, io_priority, cancellable, callback, user_data);
		public bool flush_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_flush_finish(this, result, out error);
		public bool has_pending() => Gio.GioInterop.g_output_stream_has_pending(this);
		public bool is_closed() => Gio.GioInterop.g_output_stream_is_closed(this);
		public bool is_closing() => Gio.GioInterop.g_output_stream_is_closing(this);
		public bool set_pending(out GLib.Error error) => Gio.GioInterop.g_output_stream_set_pending(this, out error);
		public long splice(Gio.InputStream source, Gio.OutputStreamSpliceFlags flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_splice(this, source, flags, cancellable, out error);
		public void splice_async(Gio.InputStream source, Gio.OutputStreamSpliceFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_splice_async(this, source, flags, io_priority, cancellable, callback, user_data);
		public long splice_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_splice_finish(this, result, out error);
		public long write(System.IntPtr buffer, ulong count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_write(this, buffer, count, cancellable, out error);
		public bool write_all(System.IntPtr buffer, ulong count, System.IntPtr bytes_written, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_all(this, buffer, count, bytes_written, cancellable, out error);
		public void write_all_async(System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_write_all_async(this, buffer, count, io_priority, cancellable, callback, user_data);
		public bool write_all_finish(Gio.AsyncResult result, System.IntPtr bytes_written, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_all_finish(this, result, bytes_written, out error);
		public void write_async(System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_write_async(this, buffer, count, io_priority, cancellable, callback, user_data);
		public long write_bytes(GLib.Bytes bytes, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_bytes(this, bytes, cancellable, out error);
		public void write_bytes_async(GLib.Bytes bytes, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_write_bytes_async(this, bytes, io_priority, cancellable, callback, user_data);
		public long write_bytes_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_bytes_finish(this, result, out error);
		public long write_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_finish(this, result, out error);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_memory_output_stream_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct MemoryOutputStreamPrivate
	{
		private IntPtr _pointer;
		public MemoryOutputStreamPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator MemoryOutputStreamPrivate(IntPtr pointer) => new MemoryOutputStreamPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(MemoryOutputStreamPrivate value) => value._pointer;
	}
	public ref struct MemoryOutputStreamClass
	{
		private IntPtr _pointer;
		public MemoryOutputStreamClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator MemoryOutputStreamClass(IntPtr pointer) => new MemoryOutputStreamClass(pointer, checkType: true);
		public static explicit operator IntPtr(MemoryOutputStreamClass value) => value._pointer;
	}
	public ref struct Menu
	{
		private IntPtr _pointer;
		public Menu(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator Menu(IntPtr pointer) => new Menu(pointer, checkType: true);
		public static explicit operator IntPtr(Menu value) => value._pointer;
		public static implicit operator Gio.MenuModel(Menu value) => new Gio.MenuModel((IntPtr)value, checkType: false);
		public static explicit operator Menu(Gio.MenuModel value) => new Menu((IntPtr)value, checkType: true);
		public static implicit operator GObject.Object(Menu value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator Menu(GObject.Object value) => new Menu((IntPtr)value, checkType: true);
		public static Gio.Menu @new() => GioInterop.g_menu_new();
		public void append(string label, string detailed_action) => Gio.GioInterop.g_menu_append(this, label, detailed_action);
		public void append_item(Gio.MenuItem item) => Gio.GioInterop.g_menu_append_item(this, item);
		public void append_section(string label, Gio.MenuModel section) => Gio.GioInterop.g_menu_append_section(this, label, section);
		public void append_submenu(string label, Gio.MenuModel submenu) => Gio.GioInterop.g_menu_append_submenu(this, label, submenu);
		public void freeze() => Gio.GioInterop.g_menu_freeze(this);
		public void insert(int position, string label, string detailed_action) => Gio.GioInterop.g_menu_insert(this, position, label, detailed_action);
		public void insert_item(int position, Gio.MenuItem item) => Gio.GioInterop.g_menu_insert_item(this, position, item);
		public void insert_section(int position, string label, Gio.MenuModel section) => Gio.GioInterop.g_menu_insert_section(this, position, label, section);
		public void insert_submenu(int position, string label, Gio.MenuModel submenu) => Gio.GioInterop.g_menu_insert_submenu(this, position, label, submenu);
		public void prepend(string label, string detailed_action) => Gio.GioInterop.g_menu_prepend(this, label, detailed_action);
		public void prepend_item(Gio.MenuItem item) => Gio.GioInterop.g_menu_prepend_item(this, item);
		public void prepend_section(string label, Gio.MenuModel section) => Gio.GioInterop.g_menu_prepend_section(this, label, section);
		public void prepend_submenu(string label, Gio.MenuModel submenu) => Gio.GioInterop.g_menu_prepend_submenu(this, label, submenu);
		public void remove(int position) => Gio.GioInterop.g_menu_remove(this, position);
		public void remove_all() => Gio.GioInterop.g_menu_remove_all(this);
		public GLib.Variant get_item_attribute_value(int item_index, string attribute, GLib.VariantType expected_type) => Gio.GioInterop.g_menu_model_get_item_attribute_value(this, item_index, attribute, expected_type);
		public Gio.MenuModel get_item_link(int item_index, string link) => Gio.GioInterop.g_menu_model_get_item_link(this, item_index, link);
		public int get_n_items() => Gio.GioInterop.g_menu_model_get_n_items(this);
		public bool is_mutable() => Gio.GioInterop.g_menu_model_is_mutable(this);
		public void items_changed(int position, int removed, int added) => Gio.GioInterop.g_menu_model_items_changed(this, position, removed, added);
		public Gio.MenuAttributeIter iterate_item_attributes(int item_index) => Gio.GioInterop.g_menu_model_iterate_item_attributes(this, item_index);
		public Gio.MenuLinkIter iterate_item_links(int item_index) => Gio.GioInterop.g_menu_model_iterate_item_links(this, item_index);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_menu_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct MenuItem
	{
		private IntPtr _pointer;
		public MenuItem(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator MenuItem(IntPtr pointer) => new MenuItem(pointer, checkType: true);
		public static explicit operator IntPtr(MenuItem value) => value._pointer;
		public static implicit operator GObject.Object(MenuItem value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator MenuItem(GObject.Object value) => new MenuItem((IntPtr)value, checkType: true);
		public static Gio.MenuItem @new(string label, string detailed_action) => GioInterop.g_menu_item_new(label, detailed_action);
		public static Gio.MenuItem new_from_model(Gio.MenuModel model, int item_index) => GioInterop.g_menu_item_new_from_model(model, item_index);
		public static Gio.MenuItem new_section(string label, Gio.MenuModel section) => GioInterop.g_menu_item_new_section(label, section);
		public static Gio.MenuItem new_submenu(string label, Gio.MenuModel submenu) => GioInterop.g_menu_item_new_submenu(label, submenu);
		public GLib.Variant get_attribute_value(string attribute, GLib.VariantType expected_type) => Gio.GioInterop.g_menu_item_get_attribute_value(this, attribute, expected_type);
		public Gio.MenuModel get_link(string link) => Gio.GioInterop.g_menu_item_get_link(this, link);
		public void set_action_and_target_value(string action, GLib.Variant target_value) => Gio.GioInterop.g_menu_item_set_action_and_target_value(this, action, target_value);
		public void set_attribute_value(string attribute, GLib.Variant value) => Gio.GioInterop.g_menu_item_set_attribute_value(this, attribute, value);
		public void set_detailed_action(string detailed_action) => Gio.GioInterop.g_menu_item_set_detailed_action(this, detailed_action);
		public void set_icon(Gio.Icon icon) => Gio.GioInterop.g_menu_item_set_icon(this, icon);
		public void set_label(string label) => Gio.GioInterop.g_menu_item_set_label(this, label);
		public void set_link(string link, Gio.MenuModel model) => Gio.GioInterop.g_menu_item_set_link(this, link, model);
		public void set_section(Gio.MenuModel section) => Gio.GioInterop.g_menu_item_set_section(this, section);
		public void set_submenu(Gio.MenuModel submenu) => Gio.GioInterop.g_menu_item_set_submenu(this, submenu);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_menu_item_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct MenuAttributeIter
	{
		private IntPtr _pointer;
		public MenuAttributeIter(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator MenuAttributeIter(IntPtr pointer) => new MenuAttributeIter(pointer, checkType: true);
		public static explicit operator IntPtr(MenuAttributeIter value) => value._pointer;
		public static implicit operator GObject.Object(MenuAttributeIter value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator MenuAttributeIter(GObject.Object value) => new MenuAttributeIter((IntPtr)value, checkType: true);
		public string get_name() => Gio.GioInterop.g_menu_attribute_iter_get_name(this);
		public bool get_next(string out_name, out GLib.Variant value) => Gio.GioInterop.g_menu_attribute_iter_get_next(this, out_name, out value);
		public GLib.Variant get_value() => Gio.GioInterop.g_menu_attribute_iter_get_value(this);
		public bool next() => Gio.GioInterop.g_menu_attribute_iter_next(this);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_menu_attribute_iter_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct MenuAttributeIterPrivate
	{
		private IntPtr _pointer;
		public MenuAttributeIterPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator MenuAttributeIterPrivate(IntPtr pointer) => new MenuAttributeIterPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(MenuAttributeIterPrivate value) => value._pointer;
	}
	public ref struct MenuAttributeIterClass
	{
		private IntPtr _pointer;
		public MenuAttributeIterClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator MenuAttributeIterClass(IntPtr pointer) => new MenuAttributeIterClass(pointer, checkType: true);
		public static explicit operator IntPtr(MenuAttributeIterClass value) => value._pointer;
	}
	public ref struct MenuLinkIter
	{
		private IntPtr _pointer;
		public MenuLinkIter(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator MenuLinkIter(IntPtr pointer) => new MenuLinkIter(pointer, checkType: true);
		public static explicit operator IntPtr(MenuLinkIter value) => value._pointer;
		public static implicit operator GObject.Object(MenuLinkIter value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator MenuLinkIter(GObject.Object value) => new MenuLinkIter((IntPtr)value, checkType: true);
		public string get_name() => Gio.GioInterop.g_menu_link_iter_get_name(this);
		public bool get_next(string out_link, out Gio.MenuModel value) => Gio.GioInterop.g_menu_link_iter_get_next(this, out_link, out value);
		public Gio.MenuModel get_value() => Gio.GioInterop.g_menu_link_iter_get_value(this);
		public bool next() => Gio.GioInterop.g_menu_link_iter_next(this);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_menu_link_iter_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct MenuLinkIterPrivate
	{
		private IntPtr _pointer;
		public MenuLinkIterPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator MenuLinkIterPrivate(IntPtr pointer) => new MenuLinkIterPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(MenuLinkIterPrivate value) => value._pointer;
	}
	public ref struct MenuLinkIterClass
	{
		private IntPtr _pointer;
		public MenuLinkIterClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator MenuLinkIterClass(IntPtr pointer) => new MenuLinkIterClass(pointer, checkType: true);
		public static explicit operator IntPtr(MenuLinkIterClass value) => value._pointer;
	}
	public ref struct MenuModelPrivate
	{
		private IntPtr _pointer;
		public MenuModelPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator MenuModelPrivate(IntPtr pointer) => new MenuModelPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(MenuModelPrivate value) => value._pointer;
	}
	public ref struct MenuModelClass
	{
		private IntPtr _pointer;
		public MenuModelClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator MenuModelClass(IntPtr pointer) => new MenuModelClass(pointer, checkType: true);
		public static explicit operator IntPtr(MenuModelClass value) => value._pointer;
	}
	public ref struct MountIface
	{
		private IntPtr _pointer;
		public MountIface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator MountIface(IntPtr pointer) => new MountIface(pointer, checkType: true);
		public static explicit operator IntPtr(MountIface value) => value._pointer;
	}
	public enum PasswordSave
	{
		never = 0,
		for_session = 1,
		permanently = 2,
	}
	public enum MountOperationResult
	{
		handled = 0,
		aborted = 1,
		unhandled = 2,
	}
	public ref struct MountOperationPrivate
	{
		private IntPtr _pointer;
		public MountOperationPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator MountOperationPrivate(IntPtr pointer) => new MountOperationPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(MountOperationPrivate value) => value._pointer;
	}
	public ref struct MountOperationClass
	{
		private IntPtr _pointer;
		public MountOperationClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator MountOperationClass(IntPtr pointer) => new MountOperationClass(pointer, checkType: true);
		public static explicit operator IntPtr(MountOperationClass value) => value._pointer;
	}
	public ref struct NativeSocketAddress
	{
		private IntPtr _pointer;
		public NativeSocketAddress(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator NativeSocketAddress(IntPtr pointer) => new NativeSocketAddress(pointer, checkType: true);
		public static explicit operator IntPtr(NativeSocketAddress value) => value._pointer;
	}
	public ref struct VolumeMonitor
	{
		private IntPtr _pointer;
		public VolumeMonitor(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator VolumeMonitor(IntPtr pointer) => new VolumeMonitor(pointer, checkType: true);
		public static explicit operator IntPtr(VolumeMonitor value) => value._pointer;
		public static implicit operator GObject.Object(VolumeMonitor value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator VolumeMonitor(GObject.Object value) => new VolumeMonitor((IntPtr)value, checkType: true);
		public static Gio.Volume adopt_orphan_mount(Gio.Mount mount) => GioInterop.g_volume_monitor_adopt_orphan_mount(mount);
		public static Gio.VolumeMonitor get() => GioInterop.g_volume_monitor_get();
		public System.IntPtr get_connected_drives() => Gio.GioInterop.g_volume_monitor_get_connected_drives(this);
		public Gio.Mount get_mount_for_uuid(string uuid) => Gio.GioInterop.g_volume_monitor_get_mount_for_uuid(this, uuid);
		public System.IntPtr get_mounts() => Gio.GioInterop.g_volume_monitor_get_mounts(this);
		public Gio.Volume get_volume_for_uuid(string uuid) => Gio.GioInterop.g_volume_monitor_get_volume_for_uuid(this, uuid);
		public System.IntPtr get_volumes() => Gio.GioInterop.g_volume_monitor_get_volumes(this);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_volume_monitor_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct NativeVolumeMonitor
	{
		private IntPtr _pointer;
		public NativeVolumeMonitor(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator NativeVolumeMonitor(IntPtr pointer) => new NativeVolumeMonitor(pointer, checkType: true);
		public static explicit operator IntPtr(NativeVolumeMonitor value) => value._pointer;
		public static implicit operator Gio.VolumeMonitor(NativeVolumeMonitor value) => new Gio.VolumeMonitor((IntPtr)value, checkType: false);
		public static explicit operator NativeVolumeMonitor(Gio.VolumeMonitor value) => new NativeVolumeMonitor((IntPtr)value, checkType: true);
		public static implicit operator GObject.Object(NativeVolumeMonitor value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator NativeVolumeMonitor(GObject.Object value) => new NativeVolumeMonitor((IntPtr)value, checkType: true);
		public System.IntPtr get_connected_drives() => Gio.GioInterop.g_volume_monitor_get_connected_drives(this);
		public Gio.Mount get_mount_for_uuid(string uuid) => Gio.GioInterop.g_volume_monitor_get_mount_for_uuid(this, uuid);
		public System.IntPtr get_mounts() => Gio.GioInterop.g_volume_monitor_get_mounts(this);
		public Gio.Volume get_volume_for_uuid(string uuid) => Gio.GioInterop.g_volume_monitor_get_volume_for_uuid(this, uuid);
		public System.IntPtr get_volumes() => Gio.GioInterop.g_volume_monitor_get_volumes(this);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_native_volume_monitor_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct VolumeMonitorClass
	{
		private IntPtr _pointer;
		public VolumeMonitorClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator VolumeMonitorClass(IntPtr pointer) => new VolumeMonitorClass(pointer, checkType: true);
		public static explicit operator IntPtr(VolumeMonitorClass value) => value._pointer;
	}
	public ref struct NativeVolumeMonitorClass
	{
		private IntPtr _pointer;
		public NativeVolumeMonitorClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator NativeVolumeMonitorClass(IntPtr pointer) => new NativeVolumeMonitorClass(pointer, checkType: true);
		public static explicit operator IntPtr(NativeVolumeMonitorClass value) => value._pointer;
	}
	public ref struct NetworkAddress
	{
		private IntPtr _pointer;
		public NetworkAddress(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator NetworkAddress(IntPtr pointer) => new NetworkAddress(pointer, checkType: true);
		public static explicit operator IntPtr(NetworkAddress value) => value._pointer;
		public static implicit operator GObject.Object(NetworkAddress value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator NetworkAddress(GObject.Object value) => new NetworkAddress((IntPtr)value, checkType: true);
		public static Gio.NetworkAddress @new(string hostname, ushort port) => GioInterop.g_network_address_new(hostname, port);
		public static Gio.NetworkAddress new_loopback(ushort port) => GioInterop.g_network_address_new_loopback(port);
		public static Gio.NetworkAddress parse(string host_and_port, ushort default_port, out GLib.Error error) => GioInterop.g_network_address_parse(host_and_port, default_port, out error);
		public static Gio.NetworkAddress parse_uri(string uri, ushort default_port, out GLib.Error error) => GioInterop.g_network_address_parse_uri(uri, default_port, out error);
		public string get_hostname() => Gio.GioInterop.g_network_address_get_hostname(this);
		public ushort get_port() => Gio.GioInterop.g_network_address_get_port(this);
		public string get_scheme() => Gio.GioInterop.g_network_address_get_scheme(this);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_network_address_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct NetworkAddressPrivate
	{
		private IntPtr _pointer;
		public NetworkAddressPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator NetworkAddressPrivate(IntPtr pointer) => new NetworkAddressPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(NetworkAddressPrivate value) => value._pointer;
	}
	public ref struct NetworkAddressClass
	{
		private IntPtr _pointer;
		public NetworkAddressClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator NetworkAddressClass(IntPtr pointer) => new NetworkAddressClass(pointer, checkType: true);
		public static explicit operator IntPtr(NetworkAddressClass value) => value._pointer;
	}
	public enum NetworkConnectivity
	{
		local = 1,
		limited = 2,
		portal = 3,
		full = 4,
	}
	public ref struct NetworkMonitor
	{
		private IntPtr _pointer;
		public NetworkMonitor(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator NetworkMonitor(IntPtr pointer) => new NetworkMonitor(pointer, checkType: true);
		public static explicit operator IntPtr(NetworkMonitor value) => value._pointer;
		public static Gio.NetworkMonitor get_default() => GioInterop.g_network_monitor_get_default();
		public bool can_reach(Gio.SocketConnectable connectable, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_network_monitor_can_reach(this, connectable, cancellable, out error);
		public void can_reach_async(Gio.SocketConnectable connectable, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_network_monitor_can_reach_async(this, connectable, cancellable, callback, user_data);
		public bool can_reach_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_network_monitor_can_reach_finish(this, result, out error);
		public Gio.NetworkConnectivity get_connectivity() => Gio.GioInterop.g_network_monitor_get_connectivity(this);
		public bool get_network_available() => Gio.GioInterop.g_network_monitor_get_network_available(this);
		public bool get_network_metered() => Gio.GioInterop.g_network_monitor_get_network_metered(this);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_network_monitor_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct NetworkMonitorInterface
	{
		private IntPtr _pointer;
		public NetworkMonitorInterface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator NetworkMonitorInterface(IntPtr pointer) => new NetworkMonitorInterface(pointer, checkType: true);
		public static explicit operator IntPtr(NetworkMonitorInterface value) => value._pointer;
	}
	public ref struct NetworkService
	{
		private IntPtr _pointer;
		public NetworkService(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator NetworkService(IntPtr pointer) => new NetworkService(pointer, checkType: true);
		public static explicit operator IntPtr(NetworkService value) => value._pointer;
		public static implicit operator GObject.Object(NetworkService value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator NetworkService(GObject.Object value) => new NetworkService((IntPtr)value, checkType: true);
		public static Gio.NetworkService @new(string service, string protocol, string domain) => GioInterop.g_network_service_new(service, protocol, domain);
		public string get_domain() => Gio.GioInterop.g_network_service_get_domain(this);
		public string get_protocol() => Gio.GioInterop.g_network_service_get_protocol(this);
		public string get_scheme() => Gio.GioInterop.g_network_service_get_scheme(this);
		public string get_service() => Gio.GioInterop.g_network_service_get_service(this);
		public void set_scheme(string scheme) => Gio.GioInterop.g_network_service_set_scheme(this, scheme);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_network_service_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct NetworkServicePrivate
	{
		private IntPtr _pointer;
		public NetworkServicePrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator NetworkServicePrivate(IntPtr pointer) => new NetworkServicePrivate(pointer, checkType: true);
		public static explicit operator IntPtr(NetworkServicePrivate value) => value._pointer;
	}
	public ref struct NetworkServiceClass
	{
		private IntPtr _pointer;
		public NetworkServiceClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator NetworkServiceClass(IntPtr pointer) => new NetworkServiceClass(pointer, checkType: true);
		public static explicit operator IntPtr(NetworkServiceClass value) => value._pointer;
	}
	public enum NotificationPriority
	{
		normal = 0,
		low = 1,
		high = 2,
		urgent = 3,
	}
	public ref struct OutputVector
	{
		private IntPtr _pointer;
		public OutputVector(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator OutputVector(IntPtr pointer) => new OutputVector(pointer, checkType: true);
		public static explicit operator IntPtr(OutputVector value) => value._pointer;
	}
	[Flags]
	public enum OutputStreamSpliceFlags
	{
		none = 0,
		close_source = 1,
		close_target = 2,
	}
	public ref struct OutputStreamPrivate
	{
		private IntPtr _pointer;
		public OutputStreamPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator OutputStreamPrivate(IntPtr pointer) => new OutputStreamPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(OutputStreamPrivate value) => value._pointer;
	}
	public ref struct Permission
	{
		private IntPtr _pointer;
		public Permission(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator Permission(IntPtr pointer) => new Permission(pointer, checkType: true);
		public static explicit operator IntPtr(Permission value) => value._pointer;
		public static implicit operator GObject.Object(Permission value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator Permission(GObject.Object value) => new Permission((IntPtr)value, checkType: true);
		public bool acquire(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_permission_acquire(this, cancellable, out error);
		public void acquire_async(Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_permission_acquire_async(this, cancellable, callback, user_data);
		public bool acquire_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_permission_acquire_finish(this, result, out error);
		public bool get_allowed() => Gio.GioInterop.g_permission_get_allowed(this);
		public bool get_can_acquire() => Gio.GioInterop.g_permission_get_can_acquire(this);
		public bool get_can_release() => Gio.GioInterop.g_permission_get_can_release(this);
		public void impl_update(bool allowed, bool can_acquire, bool can_release) => Gio.GioInterop.g_permission_impl_update(this, allowed, can_acquire, can_release);
		public bool release(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_permission_release(this, cancellable, out error);
		public void release_async(Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_permission_release_async(this, cancellable, callback, user_data);
		public bool release_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_permission_release_finish(this, result, out error);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_permission_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct PermissionPrivate
	{
		private IntPtr _pointer;
		public PermissionPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator PermissionPrivate(IntPtr pointer) => new PermissionPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(PermissionPrivate value) => value._pointer;
	}
	public ref struct PermissionClass
	{
		private IntPtr _pointer;
		public PermissionClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator PermissionClass(IntPtr pointer) => new PermissionClass(pointer, checkType: true);
		public static explicit operator IntPtr(PermissionClass value) => value._pointer;
	}
	public ref struct PollableInputStreamInterface
	{
		private IntPtr _pointer;
		public PollableInputStreamInterface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator PollableInputStreamInterface(IntPtr pointer) => new PollableInputStreamInterface(pointer, checkType: true);
		public static explicit operator IntPtr(PollableInputStreamInterface value) => value._pointer;
	}
	public ref struct PollableOutputStreamInterface
	{
		private IntPtr _pointer;
		public PollableOutputStreamInterface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator PollableOutputStreamInterface(IntPtr pointer) => new PollableOutputStreamInterface(pointer, checkType: true);
		public static explicit operator IntPtr(PollableOutputStreamInterface value) => value._pointer;
	}
	public ref struct PropertyAction
	{
		private IntPtr _pointer;
		public PropertyAction(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator PropertyAction(IntPtr pointer) => new PropertyAction(pointer, checkType: true);
		public static explicit operator IntPtr(PropertyAction value) => value._pointer;
		public static implicit operator GObject.Object(PropertyAction value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator PropertyAction(GObject.Object value) => new PropertyAction((IntPtr)value, checkType: true);
		public static Gio.PropertyAction @new(string name, GObject.Object @object, string property_name) => GioInterop.g_property_action_new(name, @object, property_name);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_property_action_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct Proxy
	{
		private IntPtr _pointer;
		public Proxy(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator Proxy(IntPtr pointer) => new Proxy(pointer, checkType: true);
		public static explicit operator IntPtr(Proxy value) => value._pointer;
		public static Gio.Proxy get_default_for_protocol(string protocol) => GioInterop.g_proxy_get_default_for_protocol(protocol);
		public Gio.IOStream connect(Gio.IOStream connection, Gio.ProxyAddress proxy_address, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_proxy_connect(this, connection, proxy_address, cancellable, out error);
		public void connect_async(Gio.IOStream connection, Gio.ProxyAddress proxy_address, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_proxy_connect_async(this, connection, proxy_address, cancellable, callback, user_data);
		public Gio.IOStream connect_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_proxy_connect_finish(this, result, out error);
		public bool supports_hostname() => Gio.GioInterop.g_proxy_supports_hostname(this);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_proxy_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct ProxyAddress
	{
		private IntPtr _pointer;
		public ProxyAddress(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator ProxyAddress(IntPtr pointer) => new ProxyAddress(pointer, checkType: true);
		public static explicit operator IntPtr(ProxyAddress value) => value._pointer;
		public static implicit operator Gio.InetSocketAddress(ProxyAddress value) => new Gio.InetSocketAddress((IntPtr)value, checkType: false);
		public static explicit operator ProxyAddress(Gio.InetSocketAddress value) => new ProxyAddress((IntPtr)value, checkType: true);
		public static implicit operator Gio.SocketAddress(ProxyAddress value) => new Gio.SocketAddress((IntPtr)value, checkType: false);
		public static explicit operator ProxyAddress(Gio.SocketAddress value) => new ProxyAddress((IntPtr)value, checkType: true);
		public static implicit operator GObject.Object(ProxyAddress value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator ProxyAddress(GObject.Object value) => new ProxyAddress((IntPtr)value, checkType: true);
		public static Gio.SocketAddress @new(Gio.InetAddress inetaddr, ushort port, string protocol, string dest_hostname, ushort dest_port, string username, string password) => GioInterop.g_proxy_address_new(inetaddr, port, protocol, dest_hostname, dest_port, username, password);
		public string get_destination_hostname() => Gio.GioInterop.g_proxy_address_get_destination_hostname(this);
		public ushort get_destination_port() => Gio.GioInterop.g_proxy_address_get_destination_port(this);
		public string get_destination_protocol() => Gio.GioInterop.g_proxy_address_get_destination_protocol(this);
		public string get_password() => Gio.GioInterop.g_proxy_address_get_password(this);
		public string get_protocol() => Gio.GioInterop.g_proxy_address_get_protocol(this);
		public string get_uri() => Gio.GioInterop.g_proxy_address_get_uri(this);
		public string get_username() => Gio.GioInterop.g_proxy_address_get_username(this);
		public Gio.InetAddress get_address() => Gio.GioInterop.g_inet_socket_address_get_address(this);
		public uint get_flowinfo() => Gio.GioInterop.g_inet_socket_address_get_flowinfo(this);
		public ushort get_port() => Gio.GioInterop.g_inet_socket_address_get_port(this);
		public uint get_scope_id() => Gio.GioInterop.g_inet_socket_address_get_scope_id(this);
		public Gio.SocketFamily get_family() => Gio.GioInterop.g_socket_address_get_family(this);
		public long get_native_size() => Gio.GioInterop.g_socket_address_get_native_size(this);
		public bool to_native(System.IntPtr dest, ulong destlen, out GLib.Error error) => Gio.GioInterop.g_socket_address_to_native(this, dest, destlen, out error);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_proxy_address_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct ProxyAddressPrivate
	{
		private IntPtr _pointer;
		public ProxyAddressPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator ProxyAddressPrivate(IntPtr pointer) => new ProxyAddressPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(ProxyAddressPrivate value) => value._pointer;
	}
	public ref struct ProxyAddressClass
	{
		private IntPtr _pointer;
		public ProxyAddressClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator ProxyAddressClass(IntPtr pointer) => new ProxyAddressClass(pointer, checkType: true);
		public static explicit operator IntPtr(ProxyAddressClass value) => value._pointer;
	}
	public ref struct ProxyResolver
	{
		private IntPtr _pointer;
		public ProxyResolver(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator ProxyResolver(IntPtr pointer) => new ProxyResolver(pointer, checkType: true);
		public static explicit operator IntPtr(ProxyResolver value) => value._pointer;
		public static Gio.ProxyResolver get_default() => GioInterop.g_proxy_resolver_get_default();
		public bool is_supported() => Gio.GioInterop.g_proxy_resolver_is_supported(this);
		public System.IntPtr lookup(string uri, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_proxy_resolver_lookup(this, uri, cancellable, out error);
		public void lookup_async(string uri, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_proxy_resolver_lookup_async(this, uri, cancellable, callback, user_data);
		public System.IntPtr lookup_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_proxy_resolver_lookup_finish(this, result, out error);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_proxy_resolver_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct SocketAddressEnumerator
	{
		private IntPtr _pointer;
		public SocketAddressEnumerator(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator SocketAddressEnumerator(IntPtr pointer) => new SocketAddressEnumerator(pointer, checkType: true);
		public static explicit operator IntPtr(SocketAddressEnumerator value) => value._pointer;
		public static implicit operator GObject.Object(SocketAddressEnumerator value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator SocketAddressEnumerator(GObject.Object value) => new SocketAddressEnumerator((IntPtr)value, checkType: true);
		public Gio.SocketAddress next(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_socket_address_enumerator_next(this, cancellable, out error);
		public void next_async(Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_socket_address_enumerator_next_async(this, cancellable, callback, user_data);
		public Gio.SocketAddress next_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_socket_address_enumerator_next_finish(this, result, out error);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_socket_address_enumerator_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct ProxyAddressEnumeratorPrivate
	{
		private IntPtr _pointer;
		public ProxyAddressEnumeratorPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator ProxyAddressEnumeratorPrivate(IntPtr pointer) => new ProxyAddressEnumeratorPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(ProxyAddressEnumeratorPrivate value) => value._pointer;
	}
	public ref struct ProxyAddressEnumerator
	{
		private IntPtr _pointer;
		public ProxyAddressEnumerator(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator ProxyAddressEnumerator(IntPtr pointer) => new ProxyAddressEnumerator(pointer, checkType: true);
		public static explicit operator IntPtr(ProxyAddressEnumerator value) => value._pointer;
		public static implicit operator Gio.SocketAddressEnumerator(ProxyAddressEnumerator value) => new Gio.SocketAddressEnumerator((IntPtr)value, checkType: false);
		public static explicit operator ProxyAddressEnumerator(Gio.SocketAddressEnumerator value) => new ProxyAddressEnumerator((IntPtr)value, checkType: true);
		public static implicit operator GObject.Object(ProxyAddressEnumerator value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator ProxyAddressEnumerator(GObject.Object value) => new ProxyAddressEnumerator((IntPtr)value, checkType: true);
		public Gio.SocketAddress next(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_socket_address_enumerator_next(this, cancellable, out error);
		public void next_async(Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_socket_address_enumerator_next_async(this, cancellable, callback, user_data);
		public Gio.SocketAddress next_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_socket_address_enumerator_next_finish(this, result, out error);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_proxy_address_enumerator_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct SocketAddressEnumeratorClass
	{
		private IntPtr _pointer;
		public SocketAddressEnumeratorClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator SocketAddressEnumeratorClass(IntPtr pointer) => new SocketAddressEnumeratorClass(pointer, checkType: true);
		public static explicit operator IntPtr(SocketAddressEnumeratorClass value) => value._pointer;
	}
	public ref struct ProxyAddressEnumeratorClass
	{
		private IntPtr _pointer;
		public ProxyAddressEnumeratorClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator ProxyAddressEnumeratorClass(IntPtr pointer) => new ProxyAddressEnumeratorClass(pointer, checkType: true);
		public static explicit operator IntPtr(ProxyAddressEnumeratorClass value) => value._pointer;
	}
	public ref struct ProxyInterface
	{
		private IntPtr _pointer;
		public ProxyInterface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator ProxyInterface(IntPtr pointer) => new ProxyInterface(pointer, checkType: true);
		public static explicit operator IntPtr(ProxyInterface value) => value._pointer;
	}
	public ref struct ProxyResolverInterface
	{
		private IntPtr _pointer;
		public ProxyResolverInterface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator ProxyResolverInterface(IntPtr pointer) => new ProxyResolverInterface(pointer, checkType: true);
		public static explicit operator IntPtr(ProxyResolverInterface value) => value._pointer;
	}
	public ref struct RemoteActionGroupInterface
	{
		private IntPtr _pointer;
		public RemoteActionGroupInterface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator RemoteActionGroupInterface(IntPtr pointer) => new RemoteActionGroupInterface(pointer, checkType: true);
		public static explicit operator IntPtr(RemoteActionGroupInterface value) => value._pointer;
	}
	public ref struct Resolver
	{
		private IntPtr _pointer;
		public Resolver(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator Resolver(IntPtr pointer) => new Resolver(pointer, checkType: true);
		public static explicit operator IntPtr(Resolver value) => value._pointer;
		public static implicit operator GObject.Object(Resolver value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator Resolver(GObject.Object value) => new Resolver((IntPtr)value, checkType: true);
		public static void free_addresses(System.IntPtr addresses) => GioInterop.g_resolver_free_addresses(addresses);
		public static void free_targets(System.IntPtr targets) => GioInterop.g_resolver_free_targets(targets);
		public static Gio.Resolver get_default() => GioInterop.g_resolver_get_default();
		public string lookup_by_address(Gio.InetAddress address, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_resolver_lookup_by_address(this, address, cancellable, out error);
		public void lookup_by_address_async(Gio.InetAddress address, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_resolver_lookup_by_address_async(this, address, cancellable, callback, user_data);
		public string lookup_by_address_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_resolver_lookup_by_address_finish(this, result, out error);
		public System.IntPtr lookup_by_name(string hostname, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_resolver_lookup_by_name(this, hostname, cancellable, out error);
		public void lookup_by_name_async(string hostname, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_resolver_lookup_by_name_async(this, hostname, cancellable, callback, user_data);
		public System.IntPtr lookup_by_name_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_resolver_lookup_by_name_finish(this, result, out error);
		public System.IntPtr lookup_records(string rrname, Gio.ResolverRecordType record_type, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_resolver_lookup_records(this, rrname, record_type, cancellable, out error);
		public void lookup_records_async(string rrname, Gio.ResolverRecordType record_type, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_resolver_lookup_records_async(this, rrname, record_type, cancellable, callback, user_data);
		public System.IntPtr lookup_records_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_resolver_lookup_records_finish(this, result, out error);
		public System.IntPtr lookup_service(string service, string protocol, string domain, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_resolver_lookup_service(this, service, protocol, domain, cancellable, out error);
		public void lookup_service_async(string service, string protocol, string domain, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_resolver_lookup_service_async(this, service, protocol, domain, cancellable, callback, user_data);
		public System.IntPtr lookup_service_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_resolver_lookup_service_finish(this, result, out error);
		public void set_default() => Gio.GioInterop.g_resolver_set_default(this);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_resolver_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public enum ResolverRecordType
	{
		srv = 1,
		mx = 2,
		txt = 3,
		soa = 4,
		ns = 5,
	}
	public ref struct SrvTarget
	{
		private IntPtr _pointer;
		public SrvTarget(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator SrvTarget(IntPtr pointer) => new SrvTarget(pointer, checkType: true);
		public static explicit operator IntPtr(SrvTarget value) => value._pointer;
		public static Gio.SrvTarget @new(string hostname, ushort port, ushort priority, ushort weight) => GioInterop.g_srv_target_new(hostname, port, priority, weight);
		public Gio.SrvTarget copy() => Gio.GioInterop.g_srv_target_copy(this);
		public void free() => Gio.GioInterop.g_srv_target_free(this);
		public string get_hostname() => Gio.GioInterop.g_srv_target_get_hostname(this);
		public ushort get_port() => Gio.GioInterop.g_srv_target_get_port(this);
		public ushort get_priority() => Gio.GioInterop.g_srv_target_get_priority(this);
		public ushort get_weight() => Gio.GioInterop.g_srv_target_get_weight(this);
		public static System.IntPtr list_sort(System.IntPtr targets) => GioInterop.g_srv_target_list_sort(targets);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_srv_target_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct ResolverPrivate
	{
		private IntPtr _pointer;
		public ResolverPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator ResolverPrivate(IntPtr pointer) => new ResolverPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(ResolverPrivate value) => value._pointer;
	}
	public ref struct ResolverClass
	{
		private IntPtr _pointer;
		public ResolverClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator ResolverClass(IntPtr pointer) => new ResolverClass(pointer, checkType: true);
		public static explicit operator IntPtr(ResolverClass value) => value._pointer;
	}
	public enum ResolverError
	{
		not_found = 0,
		temporary_failure = 1,
		@internal = 2,
	}
	public ref struct Resource
	{
		private IntPtr _pointer;
		public Resource(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator Resource(IntPtr pointer) => new Resource(pointer, checkType: true);
		public static explicit operator IntPtr(Resource value) => value._pointer;
		public static Gio.Resource new_from_data(GLib.Bytes data, out GLib.Error error) => GioInterop.g_resource_new_from_data(data, out error);
		public System.IntPtr enumerate_children(string path, Gio.ResourceLookupFlags lookup_flags, out GLib.Error error) => Gio.GioInterop.g_resource_enumerate_children(this, path, lookup_flags, out error);
		public bool get_info(string path, Gio.ResourceLookupFlags lookup_flags, System.IntPtr size, System.IntPtr flags, out GLib.Error error) => Gio.GioInterop.g_resource_get_info(this, path, lookup_flags, size, flags, out error);
		public GLib.Bytes lookup_data(string path, Gio.ResourceLookupFlags lookup_flags, out GLib.Error error) => Gio.GioInterop.g_resource_lookup_data(this, path, lookup_flags, out error);
		public Gio.InputStream open_stream(string path, Gio.ResourceLookupFlags lookup_flags, out GLib.Error error) => Gio.GioInterop.g_resource_open_stream(this, path, lookup_flags, out error);
		public Gio.Resource @ref() => Gio.GioInterop.g_resource_ref(this);
		public void unref() => Gio.GioInterop.g_resource_unref(this);
		public static Gio.Resource load(System.IntPtr filename, out GLib.Error error) => GioInterop.g_resource_load(filename, out error);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_resource_get_type")]
		public static extern GLib.GType TypeOf();
	}
	[Flags]
	public enum ResourceLookupFlags
	{
		none = 0,
	}
	public enum ResourceError
	{
		not_found = 0,
		@internal = 1,
	}
	[Flags]
	public enum ResourceFlags
	{
		none = 0,
		compressed = 1,
	}
	public ref struct SeekableIface
	{
		private IntPtr _pointer;
		public SeekableIface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator SeekableIface(IntPtr pointer) => new SeekableIface(pointer, checkType: true);
		public static explicit operator IntPtr(SeekableIface value) => value._pointer;
	}
	public ref struct Settings
	{
		private IntPtr _pointer;
		public Settings(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator Settings(IntPtr pointer) => new Settings(pointer, checkType: true);
		public static explicit operator IntPtr(Settings value) => value._pointer;
		public static implicit operator GObject.Object(Settings value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator Settings(GObject.Object value) => new Settings((IntPtr)value, checkType: true);
		public static Gio.Settings @new(string schema_id) => GioInterop.g_settings_new(schema_id);
		public static Gio.Settings new_full(Gio.SettingsSchema schema, Gio.SettingsBackend backend, string path) => GioInterop.g_settings_new_full(schema, backend, path);
		public static Gio.Settings new_with_backend(string schema_id, Gio.SettingsBackend backend) => GioInterop.g_settings_new_with_backend(schema_id, backend);
		public static Gio.Settings new_with_backend_and_path(string schema_id, Gio.SettingsBackend backend, string path) => GioInterop.g_settings_new_with_backend_and_path(schema_id, backend, path);
		public static Gio.Settings new_with_path(string schema_id, string path) => GioInterop.g_settings_new_with_path(schema_id, path);
		public static System.IntPtr list_relocatable_schemas() => GioInterop.g_settings_list_relocatable_schemas();
		public static System.IntPtr list_schemas() => GioInterop.g_settings_list_schemas();
		public static void sync() => GioInterop.g_settings_sync();
		public static void unbind(GObject.Object @object, string property) => GioInterop.g_settings_unbind(@object, property);
		public void apply() => Gio.GioInterop.g_settings_apply(this);
		public void bind(string key, GObject.Object @object, string property, Gio.SettingsBindFlags flags) => Gio.GioInterop.g_settings_bind(this, key, @object, property, flags);
		public void bind_with_mapping(string key, GObject.Object @object, string property, Gio.SettingsBindFlags flags, System.IntPtr get_mapping, System.IntPtr set_mapping, System.IntPtr user_data, System.IntPtr destroy) => Gio.GioInterop.g_settings_bind_with_mapping(this, key, @object, property, flags, get_mapping, set_mapping, user_data, destroy);
		public void bind_writable(string key, GObject.Object @object, string property, bool inverted) => Gio.GioInterop.g_settings_bind_writable(this, key, @object, property, inverted);
		public Gio.Action create_action(string key) => Gio.GioInterop.g_settings_create_action(this, key);
		public void delay() => Gio.GioInterop.g_settings_delay(this);
		public bool get_boolean(string key) => Gio.GioInterop.g_settings_get_boolean(this, key);
		public Gio.Settings get_child(string name) => Gio.GioInterop.g_settings_get_child(this, name);
		public GLib.Variant get_default_value(string key) => Gio.GioInterop.g_settings_get_default_value(this, key);
		public double get_double(string key) => Gio.GioInterop.g_settings_get_double(this, key);
		public int get_enum(string key) => Gio.GioInterop.g_settings_get_enum(this, key);
		public uint get_flags(string key) => Gio.GioInterop.g_settings_get_flags(this, key);
		public bool get_has_unapplied() => Gio.GioInterop.g_settings_get_has_unapplied(this);
		public int get_int(string key) => Gio.GioInterop.g_settings_get_int(this, key);
		public long get_int64(string key) => Gio.GioInterop.g_settings_get_int64(this, key);
		public System.IntPtr get_mapped(string key, System.IntPtr mapping, System.IntPtr user_data) => Gio.GioInterop.g_settings_get_mapped(this, key, mapping, user_data);
		public GLib.Variant get_range(string key) => Gio.GioInterop.g_settings_get_range(this, key);
		public string get_string(string key) => Gio.GioInterop.g_settings_get_string(this, key);
		public System.IntPtr get_strv(string key) => Gio.GioInterop.g_settings_get_strv(this, key);
		public uint get_uint(string key) => Gio.GioInterop.g_settings_get_uint(this, key);
		public ulong get_uint64(string key) => Gio.GioInterop.g_settings_get_uint64(this, key);
		public GLib.Variant get_user_value(string key) => Gio.GioInterop.g_settings_get_user_value(this, key);
		public GLib.Variant get_value(string key) => Gio.GioInterop.g_settings_get_value(this, key);
		public bool is_writable(string name) => Gio.GioInterop.g_settings_is_writable(this, name);
		public System.IntPtr list_children() => Gio.GioInterop.g_settings_list_children(this);
		public System.IntPtr list_keys() => Gio.GioInterop.g_settings_list_keys(this);
		public bool range_check(string key, GLib.Variant value) => Gio.GioInterop.g_settings_range_check(this, key, value);
		public void reset(string key) => Gio.GioInterop.g_settings_reset(this, key);
		public void revert() => Gio.GioInterop.g_settings_revert(this);
		public bool set_boolean(string key, bool value) => Gio.GioInterop.g_settings_set_boolean(this, key, value);
		public bool set_double(string key, double value) => Gio.GioInterop.g_settings_set_double(this, key, value);
		public bool set_enum(string key, int value) => Gio.GioInterop.g_settings_set_enum(this, key, value);
		public bool set_flags(string key, uint value) => Gio.GioInterop.g_settings_set_flags(this, key, value);
		public bool set_int(string key, int value) => Gio.GioInterop.g_settings_set_int(this, key, value);
		public bool set_int64(string key, long value) => Gio.GioInterop.g_settings_set_int64(this, key, value);
		public bool set_string(string key, string value) => Gio.GioInterop.g_settings_set_string(this, key, value);
		public bool set_strv(string key, System.IntPtr value) => Gio.GioInterop.g_settings_set_strv(this, key, value);
		public bool set_uint(string key, uint value) => Gio.GioInterop.g_settings_set_uint(this, key, value);
		public bool set_uint64(string key, ulong value) => Gio.GioInterop.g_settings_set_uint64(this, key, value);
		public bool set_value(string key, GLib.Variant value) => Gio.GioInterop.g_settings_set_value(this, key, value);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_settings_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct SettingsSchema
	{
		private IntPtr _pointer;
		public SettingsSchema(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator SettingsSchema(IntPtr pointer) => new SettingsSchema(pointer, checkType: true);
		public static explicit operator IntPtr(SettingsSchema value) => value._pointer;
		public string get_id() => Gio.GioInterop.g_settings_schema_get_id(this);
		public Gio.SettingsSchemaKey get_key(string name) => Gio.GioInterop.g_settings_schema_get_key(this, name);
		public string get_path() => Gio.GioInterop.g_settings_schema_get_path(this);
		public bool has_key(string name) => Gio.GioInterop.g_settings_schema_has_key(this, name);
		public System.IntPtr list_children() => Gio.GioInterop.g_settings_schema_list_children(this);
		public System.IntPtr list_keys() => Gio.GioInterop.g_settings_schema_list_keys(this);
		public Gio.SettingsSchema @ref() => Gio.GioInterop.g_settings_schema_ref(this);
		public void unref() => Gio.GioInterop.g_settings_schema_unref(this);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_settings_schema_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct SettingsBackend
	{
		private IntPtr _pointer;
		public SettingsBackend(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator SettingsBackend(IntPtr pointer) => new SettingsBackend(pointer, checkType: true);
		public static explicit operator IntPtr(SettingsBackend value) => value._pointer;
		public static implicit operator GObject.Object(SettingsBackend value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator SettingsBackend(GObject.Object value) => new SettingsBackend((IntPtr)value, checkType: true);
		public static void flatten_tree(GLib.Tree tree, string path, System.IntPtr keys, System.IntPtr values) => GioInterop.g_settings_backend_flatten_tree(tree, path, keys, values);
		public static Gio.SettingsBackend get_default() => GioInterop.g_settings_backend_get_default();
		public void changed(string key, System.IntPtr origin_tag) => Gio.GioInterop.g_settings_backend_changed(this, key, origin_tag);
		public void changed_tree(GLib.Tree tree, System.IntPtr origin_tag) => Gio.GioInterop.g_settings_backend_changed_tree(this, tree, origin_tag);
		public void keys_changed(string path, System.IntPtr items, System.IntPtr origin_tag) => Gio.GioInterop.g_settings_backend_keys_changed(this, path, items, origin_tag);
		public void path_changed(string path, System.IntPtr origin_tag) => Gio.GioInterop.g_settings_backend_path_changed(this, path, origin_tag);
		public void path_writable_changed(string path) => Gio.GioInterop.g_settings_backend_path_writable_changed(this, path);
		public void writable_changed(string key) => Gio.GioInterop.g_settings_backend_writable_changed(this, key);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_settings_backend_get_type")]
		public static extern GLib.GType TypeOf();
	}
	[Flags]
	public enum SettingsBindFlags
	{
		@default = 0,
		get = 1,
		set = 2,
		no_sensitivity = 4,
		get_no_changes = 8,
		invert_boolean = 16,
	}
	public ref struct SettingsPrivate
	{
		private IntPtr _pointer;
		public SettingsPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator SettingsPrivate(IntPtr pointer) => new SettingsPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(SettingsPrivate value) => value._pointer;
	}
	public ref struct SettingsBackendPrivate
	{
		private IntPtr _pointer;
		public SettingsBackendPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator SettingsBackendPrivate(IntPtr pointer) => new SettingsBackendPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(SettingsBackendPrivate value) => value._pointer;
	}
	public ref struct SettingsBackendClass
	{
		private IntPtr _pointer;
		public SettingsBackendClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator SettingsBackendClass(IntPtr pointer) => new SettingsBackendClass(pointer, checkType: true);
		public static explicit operator IntPtr(SettingsBackendClass value) => value._pointer;
	}
	public ref struct SettingsClass
	{
		private IntPtr _pointer;
		public SettingsClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator SettingsClass(IntPtr pointer) => new SettingsClass(pointer, checkType: true);
		public static explicit operator IntPtr(SettingsClass value) => value._pointer;
	}
	public ref struct SettingsSchemaKey
	{
		private IntPtr _pointer;
		public SettingsSchemaKey(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator SettingsSchemaKey(IntPtr pointer) => new SettingsSchemaKey(pointer, checkType: true);
		public static explicit operator IntPtr(SettingsSchemaKey value) => value._pointer;
		public GLib.Variant get_default_value() => Gio.GioInterop.g_settings_schema_key_get_default_value(this);
		public string get_description() => Gio.GioInterop.g_settings_schema_key_get_description(this);
		public string get_name() => Gio.GioInterop.g_settings_schema_key_get_name(this);
		public GLib.Variant get_range() => Gio.GioInterop.g_settings_schema_key_get_range(this);
		public string get_summary() => Gio.GioInterop.g_settings_schema_key_get_summary(this);
		public GLib.VariantType get_value_type() => Gio.GioInterop.g_settings_schema_key_get_value_type(this);
		public bool range_check(GLib.Variant value) => Gio.GioInterop.g_settings_schema_key_range_check(this, value);
		public Gio.SettingsSchemaKey @ref() => Gio.GioInterop.g_settings_schema_key_ref(this);
		public void unref() => Gio.GioInterop.g_settings_schema_key_unref(this);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_settings_schema_key_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct SettingsSchemaSource
	{
		private IntPtr _pointer;
		public SettingsSchemaSource(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator SettingsSchemaSource(IntPtr pointer) => new SettingsSchemaSource(pointer, checkType: true);
		public static explicit operator IntPtr(SettingsSchemaSource value) => value._pointer;
		public static Gio.SettingsSchemaSource new_from_directory(System.IntPtr directory, Gio.SettingsSchemaSource parent, bool trusted, out GLib.Error error) => GioInterop.g_settings_schema_source_new_from_directory(directory, parent, trusted, out error);
		public void list_schemas(bool recursive, System.IntPtr non_relocatable, System.IntPtr relocatable) => Gio.GioInterop.g_settings_schema_source_list_schemas(this, recursive, non_relocatable, relocatable);
		public Gio.SettingsSchema lookup(string schema_id, bool recursive) => Gio.GioInterop.g_settings_schema_source_lookup(this, schema_id, recursive);
		public Gio.SettingsSchemaSource @ref() => Gio.GioInterop.g_settings_schema_source_ref(this);
		public void unref() => Gio.GioInterop.g_settings_schema_source_unref(this);
		public static Gio.SettingsSchemaSource get_default() => GioInterop.g_settings_schema_source_get_default();
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_settings_schema_source_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct SimpleActionGroup
	{
		private IntPtr _pointer;
		public SimpleActionGroup(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator SimpleActionGroup(IntPtr pointer) => new SimpleActionGroup(pointer, checkType: true);
		public static explicit operator IntPtr(SimpleActionGroup value) => value._pointer;
		public static implicit operator GObject.Object(SimpleActionGroup value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator SimpleActionGroup(GObject.Object value) => new SimpleActionGroup((IntPtr)value, checkType: true);
		public static Gio.SimpleActionGroup @new() => GioInterop.g_simple_action_group_new();
		public void add_entries(System.IntPtr entries, int n_entries, System.IntPtr user_data) => Gio.GioInterop.g_simple_action_group_add_entries(this, entries, n_entries, user_data);
		public void insert(Gio.Action action) => Gio.GioInterop.g_simple_action_group_insert(this, action);
		public Gio.Action lookup(string action_name) => Gio.GioInterop.g_simple_action_group_lookup(this, action_name);
		public void remove(string action_name) => Gio.GioInterop.g_simple_action_group_remove(this, action_name);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_simple_action_group_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct SimpleActionGroupPrivate
	{
		private IntPtr _pointer;
		public SimpleActionGroupPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator SimpleActionGroupPrivate(IntPtr pointer) => new SimpleActionGroupPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(SimpleActionGroupPrivate value) => value._pointer;
	}
	public ref struct SimpleActionGroupClass
	{
		private IntPtr _pointer;
		public SimpleActionGroupClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator SimpleActionGroupClass(IntPtr pointer) => new SimpleActionGroupClass(pointer, checkType: true);
		public static explicit operator IntPtr(SimpleActionGroupClass value) => value._pointer;
	}
	public ref struct SimpleAsyncResult
	{
		private IntPtr _pointer;
		public SimpleAsyncResult(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator SimpleAsyncResult(IntPtr pointer) => new SimpleAsyncResult(pointer, checkType: true);
		public static explicit operator IntPtr(SimpleAsyncResult value) => value._pointer;
		public static implicit operator GObject.Object(SimpleAsyncResult value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator SimpleAsyncResult(GObject.Object value) => new SimpleAsyncResult((IntPtr)value, checkType: true);
		public static Gio.SimpleAsyncResult @new(GObject.Object source_object, System.IntPtr callback, System.IntPtr user_data, System.IntPtr source_tag) => GioInterop.g_simple_async_result_new(source_object, callback, user_data, source_tag);
		public static Gio.SimpleAsyncResult new_from_error(GObject.Object source_object, System.IntPtr callback, System.IntPtr user_data, GLib.Error error) => GioInterop.g_simple_async_result_new_from_error(source_object, callback, user_data, error);
		public static Gio.SimpleAsyncResult new_take_error(GObject.Object source_object, System.IntPtr callback, System.IntPtr user_data, GLib.Error error) => GioInterop.g_simple_async_result_new_take_error(source_object, callback, user_data, error);
		public static bool is_valid(Gio.AsyncResult result, GObject.Object source, System.IntPtr source_tag) => GioInterop.g_simple_async_result_is_valid(result, source, source_tag);
		public void complete() => Gio.GioInterop.g_simple_async_result_complete(this);
		public void complete_in_idle() => Gio.GioInterop.g_simple_async_result_complete_in_idle(this);
		public bool get_op_res_gboolean() => Gio.GioInterop.g_simple_async_result_get_op_res_gboolean(this);
		public System.IntPtr get_op_res_gpointer() => Gio.GioInterop.g_simple_async_result_get_op_res_gpointer(this);
		public long get_op_res_gssize() => Gio.GioInterop.g_simple_async_result_get_op_res_gssize(this);
		public System.IntPtr get_source_tag() => Gio.GioInterop.g_simple_async_result_get_source_tag(this);
		public bool propagate_error(out GLib.Error error) => Gio.GioInterop.g_simple_async_result_propagate_error(this, out error);
		public void run_in_thread(System.IntPtr func, int io_priority, Gio.Cancellable cancellable) => Gio.GioInterop.g_simple_async_result_run_in_thread(this, func, io_priority, cancellable);
		public void set_check_cancellable(Gio.Cancellable check_cancellable) => Gio.GioInterop.g_simple_async_result_set_check_cancellable(this, check_cancellable);
		public void set_from_error(GLib.Error error) => Gio.GioInterop.g_simple_async_result_set_from_error(this, error);
		public void set_handle_cancellation(bool handle_cancellation) => Gio.GioInterop.g_simple_async_result_set_handle_cancellation(this, handle_cancellation);
		public void set_op_res_gboolean(bool op_res) => Gio.GioInterop.g_simple_async_result_set_op_res_gboolean(this, op_res);
		public void set_op_res_gpointer(System.IntPtr op_res, System.IntPtr destroy_op_res) => Gio.GioInterop.g_simple_async_result_set_op_res_gpointer(this, op_res, destroy_op_res);
		public void set_op_res_gssize(long op_res) => Gio.GioInterop.g_simple_async_result_set_op_res_gssize(this, op_res);
		public void take_error(GLib.Error error) => Gio.GioInterop.g_simple_async_result_take_error(this, error);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_simple_async_result_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct SimpleAsyncResultClass
	{
		private IntPtr _pointer;
		public SimpleAsyncResultClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator SimpleAsyncResultClass(IntPtr pointer) => new SimpleAsyncResultClass(pointer, checkType: true);
		public static explicit operator IntPtr(SimpleAsyncResultClass value) => value._pointer;
	}
	public ref struct SimpleIOStream
	{
		private IntPtr _pointer;
		public SimpleIOStream(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator SimpleIOStream(IntPtr pointer) => new SimpleIOStream(pointer, checkType: true);
		public static explicit operator IntPtr(SimpleIOStream value) => value._pointer;
		public static implicit operator Gio.IOStream(SimpleIOStream value) => new Gio.IOStream((IntPtr)value, checkType: false);
		public static explicit operator SimpleIOStream(Gio.IOStream value) => new SimpleIOStream((IntPtr)value, checkType: true);
		public static implicit operator GObject.Object(SimpleIOStream value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator SimpleIOStream(GObject.Object value) => new SimpleIOStream((IntPtr)value, checkType: true);
		public static Gio.IOStream @new(Gio.InputStream input_stream, Gio.OutputStream output_stream) => GioInterop.g_simple_io_stream_new(input_stream, output_stream);
		public void clear_pending() => Gio.GioInterop.g_io_stream_clear_pending(this);
		public bool close(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_io_stream_close(this, cancellable, out error);
		public void close_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_io_stream_close_async(this, io_priority, cancellable, callback, user_data);
		public bool close_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_io_stream_close_finish(this, result, out error);
		public Gio.InputStream get_input_stream() => Gio.GioInterop.g_io_stream_get_input_stream(this);
		public Gio.OutputStream get_output_stream() => Gio.GioInterop.g_io_stream_get_output_stream(this);
		public bool has_pending() => Gio.GioInterop.g_io_stream_has_pending(this);
		public bool is_closed() => Gio.GioInterop.g_io_stream_is_closed(this);
		public bool set_pending(out GLib.Error error) => Gio.GioInterop.g_io_stream_set_pending(this, out error);
		public void splice_async(Gio.IOStream stream2, Gio.IOStreamSpliceFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_io_stream_splice_async(this, stream2, flags, io_priority, cancellable, callback, user_data);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_simple_io_stream_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct SimplePermission
	{
		private IntPtr _pointer;
		public SimplePermission(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator SimplePermission(IntPtr pointer) => new SimplePermission(pointer, checkType: true);
		public static explicit operator IntPtr(SimplePermission value) => value._pointer;
		public static implicit operator Gio.Permission(SimplePermission value) => new Gio.Permission((IntPtr)value, checkType: false);
		public static explicit operator SimplePermission(Gio.Permission value) => new SimplePermission((IntPtr)value, checkType: true);
		public static implicit operator GObject.Object(SimplePermission value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator SimplePermission(GObject.Object value) => new SimplePermission((IntPtr)value, checkType: true);
		public static Gio.Permission @new(bool allowed) => GioInterop.g_simple_permission_new(allowed);
		public bool acquire(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_permission_acquire(this, cancellable, out error);
		public void acquire_async(Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_permission_acquire_async(this, cancellable, callback, user_data);
		public bool acquire_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_permission_acquire_finish(this, result, out error);
		public bool get_allowed() => Gio.GioInterop.g_permission_get_allowed(this);
		public bool get_can_acquire() => Gio.GioInterop.g_permission_get_can_acquire(this);
		public bool get_can_release() => Gio.GioInterop.g_permission_get_can_release(this);
		public void impl_update(bool allowed, bool can_acquire, bool can_release) => Gio.GioInterop.g_permission_impl_update(this, allowed, can_acquire, can_release);
		public bool release(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_permission_release(this, cancellable, out error);
		public void release_async(Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_permission_release_async(this, cancellable, callback, user_data);
		public bool release_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_permission_release_finish(this, result, out error);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_simple_permission_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct SimpleProxyResolver
	{
		private IntPtr _pointer;
		public SimpleProxyResolver(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator SimpleProxyResolver(IntPtr pointer) => new SimpleProxyResolver(pointer, checkType: true);
		public static explicit operator IntPtr(SimpleProxyResolver value) => value._pointer;
		public static implicit operator GObject.Object(SimpleProxyResolver value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator SimpleProxyResolver(GObject.Object value) => new SimpleProxyResolver((IntPtr)value, checkType: true);
		public static Gio.ProxyResolver @new(string default_proxy, string ignore_hosts) => GioInterop.g_simple_proxy_resolver_new(default_proxy, ignore_hosts);
		public void set_default_proxy(string default_proxy) => Gio.GioInterop.g_simple_proxy_resolver_set_default_proxy(this, default_proxy);
		public void set_ignore_hosts(string ignore_hosts) => Gio.GioInterop.g_simple_proxy_resolver_set_ignore_hosts(this, ignore_hosts);
		public void set_uri_proxy(string uri_scheme, string proxy) => Gio.GioInterop.g_simple_proxy_resolver_set_uri_proxy(this, uri_scheme, proxy);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_simple_proxy_resolver_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct SimpleProxyResolverPrivate
	{
		private IntPtr _pointer;
		public SimpleProxyResolverPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator SimpleProxyResolverPrivate(IntPtr pointer) => new SimpleProxyResolverPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(SimpleProxyResolverPrivate value) => value._pointer;
	}
	public ref struct SimpleProxyResolverClass
	{
		private IntPtr _pointer;
		public SimpleProxyResolverClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator SimpleProxyResolverClass(IntPtr pointer) => new SimpleProxyResolverClass(pointer, checkType: true);
		public static explicit operator IntPtr(SimpleProxyResolverClass value) => value._pointer;
	}
	public ref struct Socket
	{
		private IntPtr _pointer;
		public Socket(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator Socket(IntPtr pointer) => new Socket(pointer, checkType: true);
		public static explicit operator IntPtr(Socket value) => value._pointer;
		public static implicit operator GObject.Object(Socket value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator Socket(GObject.Object value) => new Socket((IntPtr)value, checkType: true);
		public static Gio.Socket @new(Gio.SocketFamily family, Gio.SocketType type, Gio.SocketProtocol protocol, out GLib.Error error) => GioInterop.g_socket_new(family, type, protocol, out error);
		public static Gio.Socket new_from_fd(int fd, out GLib.Error error) => GioInterop.g_socket_new_from_fd(fd, out error);
		public Gio.Socket accept(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_socket_accept(this, cancellable, out error);
		public bool bind(Gio.SocketAddress address, bool allow_reuse, out GLib.Error error) => Gio.GioInterop.g_socket_bind(this, address, allow_reuse, out error);
		public bool check_connect_result(out GLib.Error error) => Gio.GioInterop.g_socket_check_connect_result(this, out error);
		public bool close(out GLib.Error error) => Gio.GioInterop.g_socket_close(this, out error);
		public GLib.IOCondition condition_check(GLib.IOCondition condition) => Gio.GioInterop.g_socket_condition_check(this, condition);
		public bool condition_timed_wait(GLib.IOCondition condition, long timeout, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_socket_condition_timed_wait(this, condition, timeout, cancellable, out error);
		public bool condition_wait(GLib.IOCondition condition, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_socket_condition_wait(this, condition, cancellable, out error);
		public bool connect(Gio.SocketAddress address, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_socket_connect(this, address, cancellable, out error);
		public Gio.SocketConnection connection_factory_create_connection() => Gio.GioInterop.g_socket_connection_factory_create_connection(this);
		public GLib.Source create_source(GLib.IOCondition condition, Gio.Cancellable cancellable) => Gio.GioInterop.g_socket_create_source(this, condition, cancellable);
		public long get_available_bytes() => Gio.GioInterop.g_socket_get_available_bytes(this);
		public bool get_blocking() => Gio.GioInterop.g_socket_get_blocking(this);
		public bool get_broadcast() => Gio.GioInterop.g_socket_get_broadcast(this);
		public Gio.Credentials get_credentials(out GLib.Error error) => Gio.GioInterop.g_socket_get_credentials(this, out error);
		public Gio.SocketFamily get_family() => Gio.GioInterop.g_socket_get_family(this);
		public int get_fd() => Gio.GioInterop.g_socket_get_fd(this);
		public bool get_keepalive() => Gio.GioInterop.g_socket_get_keepalive(this);
		public int get_listen_backlog() => Gio.GioInterop.g_socket_get_listen_backlog(this);
		public Gio.SocketAddress get_local_address(out GLib.Error error) => Gio.GioInterop.g_socket_get_local_address(this, out error);
		public bool get_multicast_loopback() => Gio.GioInterop.g_socket_get_multicast_loopback(this);
		public uint get_multicast_ttl() => Gio.GioInterop.g_socket_get_multicast_ttl(this);
		public bool get_option(int level, int optname, System.IntPtr value, out GLib.Error error) => Gio.GioInterop.g_socket_get_option(this, level, optname, value, out error);
		public Gio.SocketProtocol get_protocol() => Gio.GioInterop.g_socket_get_protocol(this);
		public Gio.SocketAddress get_remote_address(out GLib.Error error) => Gio.GioInterop.g_socket_get_remote_address(this, out error);
		public Gio.SocketType get_socket_type() => Gio.GioInterop.g_socket_get_socket_type(this);
		public uint get_timeout() => Gio.GioInterop.g_socket_get_timeout(this);
		public uint get_ttl() => Gio.GioInterop.g_socket_get_ttl(this);
		public bool is_closed() => Gio.GioInterop.g_socket_is_closed(this);
		public bool is_connected() => Gio.GioInterop.g_socket_is_connected(this);
		public bool join_multicast_group(Gio.InetAddress group, bool source_specific, string iface, out GLib.Error error) => Gio.GioInterop.g_socket_join_multicast_group(this, group, source_specific, iface, out error);
		public bool leave_multicast_group(Gio.InetAddress group, bool source_specific, string iface, out GLib.Error error) => Gio.GioInterop.g_socket_leave_multicast_group(this, group, source_specific, iface, out error);
		public bool listen(out GLib.Error error) => Gio.GioInterop.g_socket_listen(this, out error);
		public long receive(System.IntPtr buffer, ulong size, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_socket_receive(this, buffer, size, cancellable, out error);
		public long receive_from(out Gio.SocketAddress address, System.IntPtr buffer, ulong size, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_socket_receive_from(this, out address, buffer, size, cancellable, out error);
		public long receive_message(out Gio.SocketAddress address, System.IntPtr vectors, int num_vectors, System.IntPtr messages, System.IntPtr num_messages, System.IntPtr flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_socket_receive_message(this, out address, vectors, num_vectors, messages, num_messages, flags, cancellable, out error);
		public int receive_messages(System.IntPtr messages, uint num_messages, int flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_socket_receive_messages(this, messages, num_messages, flags, cancellable, out error);
		public long receive_with_blocking(System.IntPtr buffer, ulong size, bool blocking, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_socket_receive_with_blocking(this, buffer, size, blocking, cancellable, out error);
		public long send(System.IntPtr buffer, ulong size, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_socket_send(this, buffer, size, cancellable, out error);
		public long send_message(Gio.SocketAddress address, System.IntPtr vectors, int num_vectors, System.IntPtr messages, int num_messages, int flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_socket_send_message(this, address, vectors, num_vectors, messages, num_messages, flags, cancellable, out error);
		public int send_messages(System.IntPtr messages, uint num_messages, int flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_socket_send_messages(this, messages, num_messages, flags, cancellable, out error);
		public long send_to(Gio.SocketAddress address, System.IntPtr buffer, ulong size, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_socket_send_to(this, address, buffer, size, cancellable, out error);
		public long send_with_blocking(System.IntPtr buffer, ulong size, bool blocking, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_socket_send_with_blocking(this, buffer, size, blocking, cancellable, out error);
		public void set_blocking(bool blocking) => Gio.GioInterop.g_socket_set_blocking(this, blocking);
		public void set_broadcast(bool broadcast) => Gio.GioInterop.g_socket_set_broadcast(this, broadcast);
		public void set_keepalive(bool keepalive) => Gio.GioInterop.g_socket_set_keepalive(this, keepalive);
		public void set_listen_backlog(int backlog) => Gio.GioInterop.g_socket_set_listen_backlog(this, backlog);
		public void set_multicast_loopback(bool loopback) => Gio.GioInterop.g_socket_set_multicast_loopback(this, loopback);
		public void set_multicast_ttl(uint ttl) => Gio.GioInterop.g_socket_set_multicast_ttl(this, ttl);
		public bool set_option(int level, int optname, int value, out GLib.Error error) => Gio.GioInterop.g_socket_set_option(this, level, optname, value, out error);
		public void set_timeout(uint timeout) => Gio.GioInterop.g_socket_set_timeout(this, timeout);
		public void set_ttl(uint ttl) => Gio.GioInterop.g_socket_set_ttl(this, ttl);
		public bool shutdown(bool shutdown_read, bool shutdown_write, out GLib.Error error) => Gio.GioInterop.g_socket_shutdown(this, shutdown_read, shutdown_write, out error);
		public bool speaks_ipv4() => Gio.GioInterop.g_socket_speaks_ipv4(this);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_socket_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public enum SocketType
	{
		invalid = 0,
		stream = 1,
		datagram = 2,
		seqpacket = 3,
	}
	public enum SocketProtocol
	{
		unknown = -1,
		@default = 0,
		tcp = 6,
		udp = 17,
		sctp = 132,
	}
	public ref struct SocketConnection
	{
		private IntPtr _pointer;
		public SocketConnection(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator SocketConnection(IntPtr pointer) => new SocketConnection(pointer, checkType: true);
		public static explicit operator IntPtr(SocketConnection value) => value._pointer;
		public static implicit operator Gio.IOStream(SocketConnection value) => new Gio.IOStream((IntPtr)value, checkType: false);
		public static explicit operator SocketConnection(Gio.IOStream value) => new SocketConnection((IntPtr)value, checkType: true);
		public static implicit operator GObject.Object(SocketConnection value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator SocketConnection(GObject.Object value) => new SocketConnection((IntPtr)value, checkType: true);
		public static GLib.GType factory_lookup_type(Gio.SocketFamily family, Gio.SocketType type, int protocol_id) => GioInterop.g_socket_connection_factory_lookup_type(family, type, protocol_id);
		public static void factory_register_type(GLib.GType g_type, Gio.SocketFamily family, Gio.SocketType type, int protocol) => GioInterop.g_socket_connection_factory_register_type(g_type, family, type, protocol);
		public bool connect(Gio.SocketAddress address, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_socket_connection_connect(this, address, cancellable, out error);
		public void connect_async(Gio.SocketAddress address, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_socket_connection_connect_async(this, address, cancellable, callback, user_data);
		public bool connect_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_socket_connection_connect_finish(this, result, out error);
		public Gio.SocketAddress get_local_address(out GLib.Error error) => Gio.GioInterop.g_socket_connection_get_local_address(this, out error);
		public Gio.SocketAddress get_remote_address(out GLib.Error error) => Gio.GioInterop.g_socket_connection_get_remote_address(this, out error);
		public Gio.Socket get_socket() => Gio.GioInterop.g_socket_connection_get_socket(this);
		public bool is_connected() => Gio.GioInterop.g_socket_connection_is_connected(this);
		public void clear_pending() => Gio.GioInterop.g_io_stream_clear_pending(this);
		public bool close(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_io_stream_close(this, cancellable, out error);
		public void close_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_io_stream_close_async(this, io_priority, cancellable, callback, user_data);
		public bool close_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_io_stream_close_finish(this, result, out error);
		public Gio.InputStream get_input_stream() => Gio.GioInterop.g_io_stream_get_input_stream(this);
		public Gio.OutputStream get_output_stream() => Gio.GioInterop.g_io_stream_get_output_stream(this);
		public bool has_pending() => Gio.GioInterop.g_io_stream_has_pending(this);
		public bool is_closed() => Gio.GioInterop.g_io_stream_is_closed(this);
		public bool set_pending(out GLib.Error error) => Gio.GioInterop.g_io_stream_set_pending(this, out error);
		public void splice_async(Gio.IOStream stream2, Gio.IOStreamSpliceFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_io_stream_splice_async(this, stream2, flags, io_priority, cancellable, callback, user_data);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_socket_connection_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct SocketPrivate
	{
		private IntPtr _pointer;
		public SocketPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator SocketPrivate(IntPtr pointer) => new SocketPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(SocketPrivate value) => value._pointer;
	}
	public ref struct SocketClass
	{
		private IntPtr _pointer;
		public SocketClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator SocketClass(IntPtr pointer) => new SocketClass(pointer, checkType: true);
		public static explicit operator IntPtr(SocketClass value) => value._pointer;
	}
	public ref struct SocketClient
	{
		private IntPtr _pointer;
		public SocketClient(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator SocketClient(IntPtr pointer) => new SocketClient(pointer, checkType: true);
		public static explicit operator IntPtr(SocketClient value) => value._pointer;
		public static implicit operator GObject.Object(SocketClient value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator SocketClient(GObject.Object value) => new SocketClient((IntPtr)value, checkType: true);
		public static Gio.SocketClient @new() => GioInterop.g_socket_client_new();
		public void add_application_proxy(string protocol) => Gio.GioInterop.g_socket_client_add_application_proxy(this, protocol);
		public Gio.SocketConnection connect(Gio.SocketConnectable connectable, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_socket_client_connect(this, connectable, cancellable, out error);
		public void connect_async(Gio.SocketConnectable connectable, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_socket_client_connect_async(this, connectable, cancellable, callback, user_data);
		public Gio.SocketConnection connect_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_socket_client_connect_finish(this, result, out error);
		public Gio.SocketConnection connect_to_host(string host_and_port, ushort default_port, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_socket_client_connect_to_host(this, host_and_port, default_port, cancellable, out error);
		public void connect_to_host_async(string host_and_port, ushort default_port, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_socket_client_connect_to_host_async(this, host_and_port, default_port, cancellable, callback, user_data);
		public Gio.SocketConnection connect_to_host_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_socket_client_connect_to_host_finish(this, result, out error);
		public Gio.SocketConnection connect_to_service(string domain, string service, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_socket_client_connect_to_service(this, domain, service, cancellable, out error);
		public void connect_to_service_async(string domain, string service, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_socket_client_connect_to_service_async(this, domain, service, cancellable, callback, user_data);
		public Gio.SocketConnection connect_to_service_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_socket_client_connect_to_service_finish(this, result, out error);
		public Gio.SocketConnection connect_to_uri(string uri, ushort default_port, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_socket_client_connect_to_uri(this, uri, default_port, cancellable, out error);
		public void connect_to_uri_async(string uri, ushort default_port, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_socket_client_connect_to_uri_async(this, uri, default_port, cancellable, callback, user_data);
		public Gio.SocketConnection connect_to_uri_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_socket_client_connect_to_uri_finish(this, result, out error);
		public bool get_enable_proxy() => Gio.GioInterop.g_socket_client_get_enable_proxy(this);
		public Gio.SocketFamily get_family() => Gio.GioInterop.g_socket_client_get_family(this);
		public Gio.SocketAddress get_local_address() => Gio.GioInterop.g_socket_client_get_local_address(this);
		public Gio.SocketProtocol get_protocol() => Gio.GioInterop.g_socket_client_get_protocol(this);
		public Gio.ProxyResolver get_proxy_resolver() => Gio.GioInterop.g_socket_client_get_proxy_resolver(this);
		public Gio.SocketType get_socket_type() => Gio.GioInterop.g_socket_client_get_socket_type(this);
		public uint get_timeout() => Gio.GioInterop.g_socket_client_get_timeout(this);
		public bool get_tls() => Gio.GioInterop.g_socket_client_get_tls(this);
		public Gio.TlsCertificateFlags get_tls_validation_flags() => Gio.GioInterop.g_socket_client_get_tls_validation_flags(this);
		public void set_enable_proxy(bool enable) => Gio.GioInterop.g_socket_client_set_enable_proxy(this, enable);
		public void set_family(Gio.SocketFamily family) => Gio.GioInterop.g_socket_client_set_family(this, family);
		public void set_local_address(Gio.SocketAddress address) => Gio.GioInterop.g_socket_client_set_local_address(this, address);
		public void set_protocol(Gio.SocketProtocol protocol) => Gio.GioInterop.g_socket_client_set_protocol(this, protocol);
		public void set_proxy_resolver(Gio.ProxyResolver proxy_resolver) => Gio.GioInterop.g_socket_client_set_proxy_resolver(this, proxy_resolver);
		public void set_socket_type(Gio.SocketType type) => Gio.GioInterop.g_socket_client_set_socket_type(this, type);
		public void set_timeout(uint timeout) => Gio.GioInterop.g_socket_client_set_timeout(this, timeout);
		public void set_tls(bool tls) => Gio.GioInterop.g_socket_client_set_tls(this, tls);
		public void set_tls_validation_flags(Gio.TlsCertificateFlags flags) => Gio.GioInterop.g_socket_client_set_tls_validation_flags(this, flags);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_socket_client_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct SocketClientPrivate
	{
		private IntPtr _pointer;
		public SocketClientPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator SocketClientPrivate(IntPtr pointer) => new SocketClientPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(SocketClientPrivate value) => value._pointer;
	}
	public enum SocketClientEvent
	{
		resolving = 0,
		resolved = 1,
		connecting = 2,
		connected = 3,
		proxy_negotiating = 4,
		proxy_negotiated = 5,
		tls_handshaking = 6,
		tls_handshaked = 7,
		complete = 8,
	}
	public ref struct SocketClientClass
	{
		private IntPtr _pointer;
		public SocketClientClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator SocketClientClass(IntPtr pointer) => new SocketClientClass(pointer, checkType: true);
		public static explicit operator IntPtr(SocketClientClass value) => value._pointer;
	}
	public ref struct SocketConnectableIface
	{
		private IntPtr _pointer;
		public SocketConnectableIface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator SocketConnectableIface(IntPtr pointer) => new SocketConnectableIface(pointer, checkType: true);
		public static explicit operator IntPtr(SocketConnectableIface value) => value._pointer;
	}
	public ref struct SocketConnectionPrivate
	{
		private IntPtr _pointer;
		public SocketConnectionPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator SocketConnectionPrivate(IntPtr pointer) => new SocketConnectionPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(SocketConnectionPrivate value) => value._pointer;
	}
	public ref struct SocketConnectionClass
	{
		private IntPtr _pointer;
		public SocketConnectionClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator SocketConnectionClass(IntPtr pointer) => new SocketConnectionClass(pointer, checkType: true);
		public static explicit operator IntPtr(SocketConnectionClass value) => value._pointer;
	}
	public ref struct SocketControlMessagePrivate
	{
		private IntPtr _pointer;
		public SocketControlMessagePrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator SocketControlMessagePrivate(IntPtr pointer) => new SocketControlMessagePrivate(pointer, checkType: true);
		public static explicit operator IntPtr(SocketControlMessagePrivate value) => value._pointer;
	}
	public ref struct SocketControlMessageClass
	{
		private IntPtr _pointer;
		public SocketControlMessageClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator SocketControlMessageClass(IntPtr pointer) => new SocketControlMessageClass(pointer, checkType: true);
		public static explicit operator IntPtr(SocketControlMessageClass value) => value._pointer;
	}
	public ref struct SocketListener
	{
		private IntPtr _pointer;
		public SocketListener(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator SocketListener(IntPtr pointer) => new SocketListener(pointer, checkType: true);
		public static explicit operator IntPtr(SocketListener value) => value._pointer;
		public static implicit operator GObject.Object(SocketListener value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator SocketListener(GObject.Object value) => new SocketListener((IntPtr)value, checkType: true);
		public static Gio.SocketListener @new() => GioInterop.g_socket_listener_new();
		public Gio.SocketConnection accept(out GObject.Object source_object, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_socket_listener_accept(this, out source_object, cancellable, out error);
		public void accept_async(Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_socket_listener_accept_async(this, cancellable, callback, user_data);
		public Gio.SocketConnection accept_finish(Gio.AsyncResult result, out GObject.Object source_object, out GLib.Error error) => Gio.GioInterop.g_socket_listener_accept_finish(this, result, out source_object, out error);
		public Gio.Socket accept_socket(out GObject.Object source_object, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_socket_listener_accept_socket(this, out source_object, cancellable, out error);
		public void accept_socket_async(Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_socket_listener_accept_socket_async(this, cancellable, callback, user_data);
		public Gio.Socket accept_socket_finish(Gio.AsyncResult result, out GObject.Object source_object, out GLib.Error error) => Gio.GioInterop.g_socket_listener_accept_socket_finish(this, result, out source_object, out error);
		public bool add_address(Gio.SocketAddress address, Gio.SocketType type, Gio.SocketProtocol protocol, GObject.Object source_object, out Gio.SocketAddress effective_address, out GLib.Error error) => Gio.GioInterop.g_socket_listener_add_address(this, address, type, protocol, source_object, out effective_address, out error);
		public ushort add_any_inet_port(GObject.Object source_object, out GLib.Error error) => Gio.GioInterop.g_socket_listener_add_any_inet_port(this, source_object, out error);
		public bool add_inet_port(ushort port, GObject.Object source_object, out GLib.Error error) => Gio.GioInterop.g_socket_listener_add_inet_port(this, port, source_object, out error);
		public bool add_socket(Gio.Socket socket, GObject.Object source_object, out GLib.Error error) => Gio.GioInterop.g_socket_listener_add_socket(this, socket, source_object, out error);
		public void close() => Gio.GioInterop.g_socket_listener_close(this);
		public void set_backlog(int listen_backlog) => Gio.GioInterop.g_socket_listener_set_backlog(this, listen_backlog);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_socket_listener_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct SocketListenerPrivate
	{
		private IntPtr _pointer;
		public SocketListenerPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator SocketListenerPrivate(IntPtr pointer) => new SocketListenerPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(SocketListenerPrivate value) => value._pointer;
	}
	public enum SocketListenerEvent
	{
		binding = 0,
		bound = 1,
		listening = 2,
		listened = 3,
	}
	public ref struct SocketListenerClass
	{
		private IntPtr _pointer;
		public SocketListenerClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator SocketListenerClass(IntPtr pointer) => new SocketListenerClass(pointer, checkType: true);
		public static explicit operator IntPtr(SocketListenerClass value) => value._pointer;
	}
	[Flags]
	public enum SocketMsgFlags
	{
		none = 0,
		oob = 1,
		peek = 2,
		dontroute = 4,
	}
	public ref struct SocketService
	{
		private IntPtr _pointer;
		public SocketService(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator SocketService(IntPtr pointer) => new SocketService(pointer, checkType: true);
		public static explicit operator IntPtr(SocketService value) => value._pointer;
		public static implicit operator Gio.SocketListener(SocketService value) => new Gio.SocketListener((IntPtr)value, checkType: false);
		public static explicit operator SocketService(Gio.SocketListener value) => new SocketService((IntPtr)value, checkType: true);
		public static implicit operator GObject.Object(SocketService value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator SocketService(GObject.Object value) => new SocketService((IntPtr)value, checkType: true);
		public static Gio.SocketService @new() => GioInterop.g_socket_service_new();
		public bool is_active() => Gio.GioInterop.g_socket_service_is_active(this);
		public void start() => Gio.GioInterop.g_socket_service_start(this);
		public void stop() => Gio.GioInterop.g_socket_service_stop(this);
		public Gio.SocketConnection accept(out GObject.Object source_object, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_socket_listener_accept(this, out source_object, cancellable, out error);
		public void accept_async(Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_socket_listener_accept_async(this, cancellable, callback, user_data);
		public Gio.SocketConnection accept_finish(Gio.AsyncResult result, out GObject.Object source_object, out GLib.Error error) => Gio.GioInterop.g_socket_listener_accept_finish(this, result, out source_object, out error);
		public Gio.Socket accept_socket(out GObject.Object source_object, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_socket_listener_accept_socket(this, out source_object, cancellable, out error);
		public void accept_socket_async(Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_socket_listener_accept_socket_async(this, cancellable, callback, user_data);
		public Gio.Socket accept_socket_finish(Gio.AsyncResult result, out GObject.Object source_object, out GLib.Error error) => Gio.GioInterop.g_socket_listener_accept_socket_finish(this, result, out source_object, out error);
		public bool add_address(Gio.SocketAddress address, Gio.SocketType type, Gio.SocketProtocol protocol, GObject.Object source_object, out Gio.SocketAddress effective_address, out GLib.Error error) => Gio.GioInterop.g_socket_listener_add_address(this, address, type, protocol, source_object, out effective_address, out error);
		public ushort add_any_inet_port(GObject.Object source_object, out GLib.Error error) => Gio.GioInterop.g_socket_listener_add_any_inet_port(this, source_object, out error);
		public bool add_inet_port(ushort port, GObject.Object source_object, out GLib.Error error) => Gio.GioInterop.g_socket_listener_add_inet_port(this, port, source_object, out error);
		public bool add_socket(Gio.Socket socket, GObject.Object source_object, out GLib.Error error) => Gio.GioInterop.g_socket_listener_add_socket(this, socket, source_object, out error);
		public void close() => Gio.GioInterop.g_socket_listener_close(this);
		public void set_backlog(int listen_backlog) => Gio.GioInterop.g_socket_listener_set_backlog(this, listen_backlog);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_socket_service_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct SocketServicePrivate
	{
		private IntPtr _pointer;
		public SocketServicePrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator SocketServicePrivate(IntPtr pointer) => new SocketServicePrivate(pointer, checkType: true);
		public static explicit operator IntPtr(SocketServicePrivate value) => value._pointer;
	}
	public ref struct SocketServiceClass
	{
		private IntPtr _pointer;
		public SocketServiceClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator SocketServiceClass(IntPtr pointer) => new SocketServiceClass(pointer, checkType: true);
		public static explicit operator IntPtr(SocketServiceClass value) => value._pointer;
	}
	public ref struct StaticResource
	{
		private IntPtr _pointer;
		public StaticResource(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator StaticResource(IntPtr pointer) => new StaticResource(pointer, checkType: true);
		public static explicit operator IntPtr(StaticResource value) => value._pointer;
		public void fini() => Gio.GioInterop.g_static_resource_fini(this);
		public Gio.Resource get_resource() => Gio.GioInterop.g_static_resource_get_resource(this);
		public void init() => Gio.GioInterop.g_static_resource_init(this);
	}
	public ref struct Subprocess
	{
		private IntPtr _pointer;
		public Subprocess(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator Subprocess(IntPtr pointer) => new Subprocess(pointer, checkType: true);
		public static explicit operator IntPtr(Subprocess value) => value._pointer;
		public static implicit operator GObject.Object(Subprocess value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator Subprocess(GObject.Object value) => new Subprocess((IntPtr)value, checkType: true);
		public static Gio.Subprocess newv(System.IntPtr argv, Gio.SubprocessFlags flags, out GLib.Error error) => GioInterop.g_subprocess_newv(argv, flags, out error);
		public bool communicate(GLib.Bytes stdin_buf, Gio.Cancellable cancellable, out GLib.Bytes stdout_buf, out GLib.Bytes stderr_buf, out GLib.Error error) => Gio.GioInterop.g_subprocess_communicate(this, stdin_buf, cancellable, out stdout_buf, out stderr_buf, out error);
		public void communicate_async(GLib.Bytes stdin_buf, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_subprocess_communicate_async(this, stdin_buf, cancellable, callback, user_data);
		public bool communicate_finish(Gio.AsyncResult result, out GLib.Bytes stdout_buf, out GLib.Bytes stderr_buf, out GLib.Error error) => Gio.GioInterop.g_subprocess_communicate_finish(this, result, out stdout_buf, out stderr_buf, out error);
		public bool communicate_utf8(string stdin_buf, Gio.Cancellable cancellable, string stdout_buf, string stderr_buf, out GLib.Error error) => Gio.GioInterop.g_subprocess_communicate_utf8(this, stdin_buf, cancellable, stdout_buf, stderr_buf, out error);
		public void communicate_utf8_async(string stdin_buf, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_subprocess_communicate_utf8_async(this, stdin_buf, cancellable, callback, user_data);
		public bool communicate_utf8_finish(Gio.AsyncResult result, string stdout_buf, string stderr_buf, out GLib.Error error) => Gio.GioInterop.g_subprocess_communicate_utf8_finish(this, result, stdout_buf, stderr_buf, out error);
		public void force_exit() => Gio.GioInterop.g_subprocess_force_exit(this);
		public int get_exit_status() => Gio.GioInterop.g_subprocess_get_exit_status(this);
		public string get_identifier() => Gio.GioInterop.g_subprocess_get_identifier(this);
		public bool get_if_exited() => Gio.GioInterop.g_subprocess_get_if_exited(this);
		public bool get_if_signaled() => Gio.GioInterop.g_subprocess_get_if_signaled(this);
		public int get_status() => Gio.GioInterop.g_subprocess_get_status(this);
		public Gio.InputStream get_stderr_pipe() => Gio.GioInterop.g_subprocess_get_stderr_pipe(this);
		public Gio.OutputStream get_stdin_pipe() => Gio.GioInterop.g_subprocess_get_stdin_pipe(this);
		public Gio.InputStream get_stdout_pipe() => Gio.GioInterop.g_subprocess_get_stdout_pipe(this);
		public bool get_successful() => Gio.GioInterop.g_subprocess_get_successful(this);
		public int get_term_sig() => Gio.GioInterop.g_subprocess_get_term_sig(this);
		public void send_signal(int signal_num) => Gio.GioInterop.g_subprocess_send_signal(this, signal_num);
		public bool wait(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_subprocess_wait(this, cancellable, out error);
		public void wait_async(Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_subprocess_wait_async(this, cancellable, callback, user_data);
		public bool wait_check(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_subprocess_wait_check(this, cancellable, out error);
		public void wait_check_async(Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_subprocess_wait_check_async(this, cancellable, callback, user_data);
		public bool wait_check_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_subprocess_wait_check_finish(this, result, out error);
		public bool wait_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_subprocess_wait_finish(this, result, out error);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_subprocess_get_type")]
		public static extern GLib.GType TypeOf();
	}
	[Flags]
	public enum SubprocessFlags
	{
		none = 0,
		stdin_pipe = 1,
		stdin_inherit = 2,
		stdout_pipe = 4,
		stdout_silence = 8,
		stderr_pipe = 16,
		stderr_silence = 32,
		stderr_merge = 64,
		inherit_fds = 128,
	}
	public ref struct SubprocessLauncher
	{
		private IntPtr _pointer;
		public SubprocessLauncher(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator SubprocessLauncher(IntPtr pointer) => new SubprocessLauncher(pointer, checkType: true);
		public static explicit operator IntPtr(SubprocessLauncher value) => value._pointer;
		public static implicit operator GObject.Object(SubprocessLauncher value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator SubprocessLauncher(GObject.Object value) => new SubprocessLauncher((IntPtr)value, checkType: true);
		public static Gio.SubprocessLauncher @new(Gio.SubprocessFlags flags) => GioInterop.g_subprocess_launcher_new(flags);
		public string getenv(string variable) => Gio.GioInterop.g_subprocess_launcher_getenv(this, variable);
		public void set_child_setup(System.IntPtr child_setup, System.IntPtr user_data, System.IntPtr destroy_notify) => Gio.GioInterop.g_subprocess_launcher_set_child_setup(this, child_setup, user_data, destroy_notify);
		public void set_cwd(System.IntPtr cwd) => Gio.GioInterop.g_subprocess_launcher_set_cwd(this, cwd);
		public void set_environ(System.IntPtr env) => Gio.GioInterop.g_subprocess_launcher_set_environ(this, env);
		public void set_flags(Gio.SubprocessFlags flags) => Gio.GioInterop.g_subprocess_launcher_set_flags(this, flags);
		public void set_stderr_file_path(System.IntPtr path) => Gio.GioInterop.g_subprocess_launcher_set_stderr_file_path(this, path);
		public void set_stdin_file_path(string path) => Gio.GioInterop.g_subprocess_launcher_set_stdin_file_path(this, path);
		public void set_stdout_file_path(System.IntPtr path) => Gio.GioInterop.g_subprocess_launcher_set_stdout_file_path(this, path);
		public void setenv(string variable, string value, bool overwrite) => Gio.GioInterop.g_subprocess_launcher_setenv(this, variable, value, overwrite);
		public Gio.Subprocess spawnv(System.IntPtr argv, out GLib.Error error) => Gio.GioInterop.g_subprocess_launcher_spawnv(this, argv, out error);
		public void take_fd(int source_fd, int target_fd) => Gio.GioInterop.g_subprocess_launcher_take_fd(this, source_fd, target_fd);
		public void take_stderr_fd(int fd) => Gio.GioInterop.g_subprocess_launcher_take_stderr_fd(this, fd);
		public void take_stdin_fd(int fd) => Gio.GioInterop.g_subprocess_launcher_take_stdin_fd(this, fd);
		public void take_stdout_fd(int fd) => Gio.GioInterop.g_subprocess_launcher_take_stdout_fd(this, fd);
		public void unsetenv(string variable) => Gio.GioInterop.g_subprocess_launcher_unsetenv(this, variable);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_subprocess_launcher_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct Task
	{
		private IntPtr _pointer;
		public Task(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator Task(IntPtr pointer) => new Task(pointer, checkType: true);
		public static explicit operator IntPtr(Task value) => value._pointer;
		public static implicit operator GObject.Object(Task value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator Task(GObject.Object value) => new Task((IntPtr)value, checkType: true);
		public static Gio.Task @new(GObject.Object source_object, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr callback_data) => GioInterop.g_task_new(source_object, cancellable, callback, callback_data);
		public static bool is_valid(Gio.AsyncResult result, GObject.Object source_object) => GioInterop.g_task_is_valid(result, source_object);
		public static void report_error(GObject.Object source_object, System.IntPtr callback, System.IntPtr callback_data, System.IntPtr source_tag, GLib.Error error) => GioInterop.g_task_report_error(source_object, callback, callback_data, source_tag, error);
		public void attach_source(GLib.Source source, System.IntPtr callback) => Gio.GioInterop.g_task_attach_source(this, source, callback);
		public Gio.Cancellable get_cancellable() => Gio.GioInterop.g_task_get_cancellable(this);
		public bool get_check_cancellable() => Gio.GioInterop.g_task_get_check_cancellable(this);
		public bool get_completed() => Gio.GioInterop.g_task_get_completed(this);
		public GLib.MainContext get_context() => Gio.GioInterop.g_task_get_context(this);
		public int get_priority() => Gio.GioInterop.g_task_get_priority(this);
		public bool get_return_on_cancel() => Gio.GioInterop.g_task_get_return_on_cancel(this);
		public GObject.Object get_source_object() => Gio.GioInterop.g_task_get_source_object(this);
		public System.IntPtr get_source_tag() => Gio.GioInterop.g_task_get_source_tag(this);
		public System.IntPtr get_task_data() => Gio.GioInterop.g_task_get_task_data(this);
		public bool had_error() => Gio.GioInterop.g_task_had_error(this);
		public bool propagate_boolean(out GLib.Error error) => Gio.GioInterop.g_task_propagate_boolean(this, out error);
		public long propagate_int(out GLib.Error error) => Gio.GioInterop.g_task_propagate_int(this, out error);
		public System.IntPtr propagate_pointer(out GLib.Error error) => Gio.GioInterop.g_task_propagate_pointer(this, out error);
		public void return_boolean(bool result) => Gio.GioInterop.g_task_return_boolean(this, result);
		public void return_error(GLib.Error error) => Gio.GioInterop.g_task_return_error(this, error);
		public bool return_error_if_cancelled() => Gio.GioInterop.g_task_return_error_if_cancelled(this);
		public void return_int(long result) => Gio.GioInterop.g_task_return_int(this, result);
		public void return_pointer(System.IntPtr result, System.IntPtr result_destroy) => Gio.GioInterop.g_task_return_pointer(this, result, result_destroy);
		public void run_in_thread(System.IntPtr task_func) => Gio.GioInterop.g_task_run_in_thread(this, task_func);
		public void run_in_thread_sync(System.IntPtr task_func) => Gio.GioInterop.g_task_run_in_thread_sync(this, task_func);
		public void set_check_cancellable(bool check_cancellable) => Gio.GioInterop.g_task_set_check_cancellable(this, check_cancellable);
		public void set_priority(int priority) => Gio.GioInterop.g_task_set_priority(this, priority);
		public bool set_return_on_cancel(bool return_on_cancel) => Gio.GioInterop.g_task_set_return_on_cancel(this, return_on_cancel);
		public void set_source_tag(System.IntPtr source_tag) => Gio.GioInterop.g_task_set_source_tag(this, source_tag);
		public void set_task_data(System.IntPtr task_data, System.IntPtr task_data_destroy) => Gio.GioInterop.g_task_set_task_data(this, task_data, task_data_destroy);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_task_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct TaskClass
	{
		private IntPtr _pointer;
		public TaskClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator TaskClass(IntPtr pointer) => new TaskClass(pointer, checkType: true);
		public static explicit operator IntPtr(TaskClass value) => value._pointer;
	}
	public ref struct TcpConnection
	{
		private IntPtr _pointer;
		public TcpConnection(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator TcpConnection(IntPtr pointer) => new TcpConnection(pointer, checkType: true);
		public static explicit operator IntPtr(TcpConnection value) => value._pointer;
		public static implicit operator Gio.SocketConnection(TcpConnection value) => new Gio.SocketConnection((IntPtr)value, checkType: false);
		public static explicit operator TcpConnection(Gio.SocketConnection value) => new TcpConnection((IntPtr)value, checkType: true);
		public static implicit operator Gio.IOStream(TcpConnection value) => new Gio.IOStream((IntPtr)value, checkType: false);
		public static explicit operator TcpConnection(Gio.IOStream value) => new TcpConnection((IntPtr)value, checkType: true);
		public static implicit operator GObject.Object(TcpConnection value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator TcpConnection(GObject.Object value) => new TcpConnection((IntPtr)value, checkType: true);
		public bool get_graceful_disconnect() => Gio.GioInterop.g_tcp_connection_get_graceful_disconnect(this);
		public void set_graceful_disconnect(bool graceful_disconnect) => Gio.GioInterop.g_tcp_connection_set_graceful_disconnect(this, graceful_disconnect);
		public bool connect(Gio.SocketAddress address, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_socket_connection_connect(this, address, cancellable, out error);
		public void connect_async(Gio.SocketAddress address, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_socket_connection_connect_async(this, address, cancellable, callback, user_data);
		public bool connect_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_socket_connection_connect_finish(this, result, out error);
		public Gio.SocketAddress get_local_address(out GLib.Error error) => Gio.GioInterop.g_socket_connection_get_local_address(this, out error);
		public Gio.SocketAddress get_remote_address(out GLib.Error error) => Gio.GioInterop.g_socket_connection_get_remote_address(this, out error);
		public Gio.Socket get_socket() => Gio.GioInterop.g_socket_connection_get_socket(this);
		public bool is_connected() => Gio.GioInterop.g_socket_connection_is_connected(this);
		public void clear_pending() => Gio.GioInterop.g_io_stream_clear_pending(this);
		public bool close(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_io_stream_close(this, cancellable, out error);
		public void close_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_io_stream_close_async(this, io_priority, cancellable, callback, user_data);
		public bool close_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_io_stream_close_finish(this, result, out error);
		public Gio.InputStream get_input_stream() => Gio.GioInterop.g_io_stream_get_input_stream(this);
		public Gio.OutputStream get_output_stream() => Gio.GioInterop.g_io_stream_get_output_stream(this);
		public bool has_pending() => Gio.GioInterop.g_io_stream_has_pending(this);
		public bool is_closed() => Gio.GioInterop.g_io_stream_is_closed(this);
		public bool set_pending(out GLib.Error error) => Gio.GioInterop.g_io_stream_set_pending(this, out error);
		public void splice_async(Gio.IOStream stream2, Gio.IOStreamSpliceFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_io_stream_splice_async(this, stream2, flags, io_priority, cancellable, callback, user_data);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_tcp_connection_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct TcpConnectionPrivate
	{
		private IntPtr _pointer;
		public TcpConnectionPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator TcpConnectionPrivate(IntPtr pointer) => new TcpConnectionPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(TcpConnectionPrivate value) => value._pointer;
	}
	public ref struct TcpConnectionClass
	{
		private IntPtr _pointer;
		public TcpConnectionClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator TcpConnectionClass(IntPtr pointer) => new TcpConnectionClass(pointer, checkType: true);
		public static explicit operator IntPtr(TcpConnectionClass value) => value._pointer;
	}
	public ref struct TcpWrapperConnection
	{
		private IntPtr _pointer;
		public TcpWrapperConnection(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator TcpWrapperConnection(IntPtr pointer) => new TcpWrapperConnection(pointer, checkType: true);
		public static explicit operator IntPtr(TcpWrapperConnection value) => value._pointer;
		public static implicit operator Gio.TcpConnection(TcpWrapperConnection value) => new Gio.TcpConnection((IntPtr)value, checkType: false);
		public static explicit operator TcpWrapperConnection(Gio.TcpConnection value) => new TcpWrapperConnection((IntPtr)value, checkType: true);
		public static implicit operator Gio.SocketConnection(TcpWrapperConnection value) => new Gio.SocketConnection((IntPtr)value, checkType: false);
		public static explicit operator TcpWrapperConnection(Gio.SocketConnection value) => new TcpWrapperConnection((IntPtr)value, checkType: true);
		public static implicit operator Gio.IOStream(TcpWrapperConnection value) => new Gio.IOStream((IntPtr)value, checkType: false);
		public static explicit operator TcpWrapperConnection(Gio.IOStream value) => new TcpWrapperConnection((IntPtr)value, checkType: true);
		public static implicit operator GObject.Object(TcpWrapperConnection value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator TcpWrapperConnection(GObject.Object value) => new TcpWrapperConnection((IntPtr)value, checkType: true);
		public static Gio.SocketConnection @new(Gio.IOStream base_io_stream, Gio.Socket socket) => GioInterop.g_tcp_wrapper_connection_new(base_io_stream, socket);
		public Gio.IOStream get_base_io_stream() => Gio.GioInterop.g_tcp_wrapper_connection_get_base_io_stream(this);
		public bool get_graceful_disconnect() => Gio.GioInterop.g_tcp_connection_get_graceful_disconnect(this);
		public void set_graceful_disconnect(bool graceful_disconnect) => Gio.GioInterop.g_tcp_connection_set_graceful_disconnect(this, graceful_disconnect);
		public bool connect(Gio.SocketAddress address, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_socket_connection_connect(this, address, cancellable, out error);
		public void connect_async(Gio.SocketAddress address, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_socket_connection_connect_async(this, address, cancellable, callback, user_data);
		public bool connect_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_socket_connection_connect_finish(this, result, out error);
		public Gio.SocketAddress get_local_address(out GLib.Error error) => Gio.GioInterop.g_socket_connection_get_local_address(this, out error);
		public Gio.SocketAddress get_remote_address(out GLib.Error error) => Gio.GioInterop.g_socket_connection_get_remote_address(this, out error);
		public Gio.Socket get_socket() => Gio.GioInterop.g_socket_connection_get_socket(this);
		public bool is_connected() => Gio.GioInterop.g_socket_connection_is_connected(this);
		public void clear_pending() => Gio.GioInterop.g_io_stream_clear_pending(this);
		public bool close(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_io_stream_close(this, cancellable, out error);
		public void close_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_io_stream_close_async(this, io_priority, cancellable, callback, user_data);
		public bool close_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_io_stream_close_finish(this, result, out error);
		public Gio.InputStream get_input_stream() => Gio.GioInterop.g_io_stream_get_input_stream(this);
		public Gio.OutputStream get_output_stream() => Gio.GioInterop.g_io_stream_get_output_stream(this);
		public bool has_pending() => Gio.GioInterop.g_io_stream_has_pending(this);
		public bool is_closed() => Gio.GioInterop.g_io_stream_is_closed(this);
		public bool set_pending(out GLib.Error error) => Gio.GioInterop.g_io_stream_set_pending(this, out error);
		public void splice_async(Gio.IOStream stream2, Gio.IOStreamSpliceFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_io_stream_splice_async(this, stream2, flags, io_priority, cancellable, callback, user_data);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_tcp_wrapper_connection_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct TcpWrapperConnectionPrivate
	{
		private IntPtr _pointer;
		public TcpWrapperConnectionPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator TcpWrapperConnectionPrivate(IntPtr pointer) => new TcpWrapperConnectionPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(TcpWrapperConnectionPrivate value) => value._pointer;
	}
	public ref struct TcpWrapperConnectionClass
	{
		private IntPtr _pointer;
		public TcpWrapperConnectionClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator TcpWrapperConnectionClass(IntPtr pointer) => new TcpWrapperConnectionClass(pointer, checkType: true);
		public static explicit operator IntPtr(TcpWrapperConnectionClass value) => value._pointer;
	}
	public ref struct TestDBus
	{
		private IntPtr _pointer;
		public TestDBus(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator TestDBus(IntPtr pointer) => new TestDBus(pointer, checkType: true);
		public static explicit operator IntPtr(TestDBus value) => value._pointer;
		public static implicit operator GObject.Object(TestDBus value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator TestDBus(GObject.Object value) => new TestDBus((IntPtr)value, checkType: true);
		public static Gio.TestDBus @new(Gio.TestDBusFlags flags) => GioInterop.g_test_dbus_new(flags);
		public static void unset() => GioInterop.g_test_dbus_unset();
		public void add_service_dir(string path) => Gio.GioInterop.g_test_dbus_add_service_dir(this, path);
		public void down() => Gio.GioInterop.g_test_dbus_down(this);
		public string get_bus_address() => Gio.GioInterop.g_test_dbus_get_bus_address(this);
		public Gio.TestDBusFlags get_flags() => Gio.GioInterop.g_test_dbus_get_flags(this);
		public void stop() => Gio.GioInterop.g_test_dbus_stop(this);
		public void up() => Gio.GioInterop.g_test_dbus_up(this);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_test_dbus_get_type")]
		public static extern GLib.GType TypeOf();
	}
	[Flags]
	public enum TestDBusFlags
	{
		none = 0,
	}
	public ref struct ThemedIcon
	{
		private IntPtr _pointer;
		public ThemedIcon(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator ThemedIcon(IntPtr pointer) => new ThemedIcon(pointer, checkType: true);
		public static explicit operator IntPtr(ThemedIcon value) => value._pointer;
		public static implicit operator GObject.Object(ThemedIcon value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator ThemedIcon(GObject.Object value) => new ThemedIcon((IntPtr)value, checkType: true);
		public static Gio.ThemedIcon @new(string iconname) => GioInterop.g_themed_icon_new(iconname);
		public static Gio.ThemedIcon new_from_names(System.IntPtr iconnames, int len) => GioInterop.g_themed_icon_new_from_names(iconnames, len);
		public static Gio.ThemedIcon new_with_default_fallbacks(string iconname) => GioInterop.g_themed_icon_new_with_default_fallbacks(iconname);
		public void append_name(string iconname) => Gio.GioInterop.g_themed_icon_append_name(this, iconname);
		public System.IntPtr get_names() => Gio.GioInterop.g_themed_icon_get_names(this);
		public void prepend_name(string iconname) => Gio.GioInterop.g_themed_icon_prepend_name(this, iconname);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_themed_icon_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct ThemedIconClass
	{
		private IntPtr _pointer;
		public ThemedIconClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator ThemedIconClass(IntPtr pointer) => new ThemedIconClass(pointer, checkType: true);
		public static explicit operator IntPtr(ThemedIconClass value) => value._pointer;
	}
	public ref struct ThreadedSocketServicePrivate
	{
		private IntPtr _pointer;
		public ThreadedSocketServicePrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator ThreadedSocketServicePrivate(IntPtr pointer) => new ThreadedSocketServicePrivate(pointer, checkType: true);
		public static explicit operator IntPtr(ThreadedSocketServicePrivate value) => value._pointer;
	}
	public ref struct ThreadedSocketService
	{
		private IntPtr _pointer;
		public ThreadedSocketService(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator ThreadedSocketService(IntPtr pointer) => new ThreadedSocketService(pointer, checkType: true);
		public static explicit operator IntPtr(ThreadedSocketService value) => value._pointer;
		public static implicit operator Gio.SocketService(ThreadedSocketService value) => new Gio.SocketService((IntPtr)value, checkType: false);
		public static explicit operator ThreadedSocketService(Gio.SocketService value) => new ThreadedSocketService((IntPtr)value, checkType: true);
		public static implicit operator Gio.SocketListener(ThreadedSocketService value) => new Gio.SocketListener((IntPtr)value, checkType: false);
		public static explicit operator ThreadedSocketService(Gio.SocketListener value) => new ThreadedSocketService((IntPtr)value, checkType: true);
		public static implicit operator GObject.Object(ThreadedSocketService value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator ThreadedSocketService(GObject.Object value) => new ThreadedSocketService((IntPtr)value, checkType: true);
		public static Gio.SocketService @new(int max_threads) => GioInterop.g_threaded_socket_service_new(max_threads);
		public bool is_active() => Gio.GioInterop.g_socket_service_is_active(this);
		public void start() => Gio.GioInterop.g_socket_service_start(this);
		public void stop() => Gio.GioInterop.g_socket_service_stop(this);
		public Gio.SocketConnection accept(out GObject.Object source_object, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_socket_listener_accept(this, out source_object, cancellable, out error);
		public void accept_async(Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_socket_listener_accept_async(this, cancellable, callback, user_data);
		public Gio.SocketConnection accept_finish(Gio.AsyncResult result, out GObject.Object source_object, out GLib.Error error) => Gio.GioInterop.g_socket_listener_accept_finish(this, result, out source_object, out error);
		public Gio.Socket accept_socket(out GObject.Object source_object, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_socket_listener_accept_socket(this, out source_object, cancellable, out error);
		public void accept_socket_async(Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_socket_listener_accept_socket_async(this, cancellable, callback, user_data);
		public Gio.Socket accept_socket_finish(Gio.AsyncResult result, out GObject.Object source_object, out GLib.Error error) => Gio.GioInterop.g_socket_listener_accept_socket_finish(this, result, out source_object, out error);
		public bool add_address(Gio.SocketAddress address, Gio.SocketType type, Gio.SocketProtocol protocol, GObject.Object source_object, out Gio.SocketAddress effective_address, out GLib.Error error) => Gio.GioInterop.g_socket_listener_add_address(this, address, type, protocol, source_object, out effective_address, out error);
		public ushort add_any_inet_port(GObject.Object source_object, out GLib.Error error) => Gio.GioInterop.g_socket_listener_add_any_inet_port(this, source_object, out error);
		public bool add_inet_port(ushort port, GObject.Object source_object, out GLib.Error error) => Gio.GioInterop.g_socket_listener_add_inet_port(this, port, source_object, out error);
		public bool add_socket(Gio.Socket socket, GObject.Object source_object, out GLib.Error error) => Gio.GioInterop.g_socket_listener_add_socket(this, socket, source_object, out error);
		public void close() => Gio.GioInterop.g_socket_listener_close(this);
		public void set_backlog(int listen_backlog) => Gio.GioInterop.g_socket_listener_set_backlog(this, listen_backlog);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_threaded_socket_service_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct ThreadedSocketServiceClass
	{
		private IntPtr _pointer;
		public ThreadedSocketServiceClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator ThreadedSocketServiceClass(IntPtr pointer) => new ThreadedSocketServiceClass(pointer, checkType: true);
		public static explicit operator IntPtr(ThreadedSocketServiceClass value) => value._pointer;
	}
	public ref struct TlsBackend
	{
		private IntPtr _pointer;
		public TlsBackend(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator TlsBackend(IntPtr pointer) => new TlsBackend(pointer, checkType: true);
		public static explicit operator IntPtr(TlsBackend value) => value._pointer;
		public static Gio.TlsBackend get_default() => GioInterop.g_tls_backend_get_default();
		public GLib.GType get_certificate_type() => Gio.GioInterop.g_tls_backend_get_certificate_type(this);
		public GLib.GType get_client_connection_type() => Gio.GioInterop.g_tls_backend_get_client_connection_type(this);
		public Gio.TlsDatabase get_default_database() => Gio.GioInterop.g_tls_backend_get_default_database(this);
		public GLib.GType get_dtls_client_connection_type() => Gio.GioInterop.g_tls_backend_get_dtls_client_connection_type(this);
		public GLib.GType get_dtls_server_connection_type() => Gio.GioInterop.g_tls_backend_get_dtls_server_connection_type(this);
		public GLib.GType get_file_database_type() => Gio.GioInterop.g_tls_backend_get_file_database_type(this);
		public GLib.GType get_server_connection_type() => Gio.GioInterop.g_tls_backend_get_server_connection_type(this);
		public bool supports_dtls() => Gio.GioInterop.g_tls_backend_supports_dtls(this);
		public bool supports_tls() => Gio.GioInterop.g_tls_backend_supports_tls(this);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_tls_backend_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct TlsBackendInterface
	{
		private IntPtr _pointer;
		public TlsBackendInterface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator TlsBackendInterface(IntPtr pointer) => new TlsBackendInterface(pointer, checkType: true);
		public static explicit operator IntPtr(TlsBackendInterface value) => value._pointer;
	}
	public ref struct TlsCertificatePrivate
	{
		private IntPtr _pointer;
		public TlsCertificatePrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator TlsCertificatePrivate(IntPtr pointer) => new TlsCertificatePrivate(pointer, checkType: true);
		public static explicit operator IntPtr(TlsCertificatePrivate value) => value._pointer;
	}
	public ref struct TlsCertificateClass
	{
		private IntPtr _pointer;
		public TlsCertificateClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator TlsCertificateClass(IntPtr pointer) => new TlsCertificateClass(pointer, checkType: true);
		public static explicit operator IntPtr(TlsCertificateClass value) => value._pointer;
	}
	public enum TlsCertificateRequestFlags
	{
		none = 0,
	}
	public ref struct TlsConnection
	{
		private IntPtr _pointer;
		public TlsConnection(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator TlsConnection(IntPtr pointer) => new TlsConnection(pointer, checkType: true);
		public static explicit operator IntPtr(TlsConnection value) => value._pointer;
		public static implicit operator Gio.IOStream(TlsConnection value) => new Gio.IOStream((IntPtr)value, checkType: false);
		public static explicit operator TlsConnection(Gio.IOStream value) => new TlsConnection((IntPtr)value, checkType: true);
		public static implicit operator GObject.Object(TlsConnection value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator TlsConnection(GObject.Object value) => new TlsConnection((IntPtr)value, checkType: true);
		public bool emit_accept_certificate(Gio.TlsCertificate peer_cert, Gio.TlsCertificateFlags errors) => Gio.GioInterop.g_tls_connection_emit_accept_certificate(this, peer_cert, errors);
		public Gio.TlsCertificate get_certificate() => Gio.GioInterop.g_tls_connection_get_certificate(this);
		public Gio.TlsDatabase get_database() => Gio.GioInterop.g_tls_connection_get_database(this);
		public Gio.TlsInteraction get_interaction() => Gio.GioInterop.g_tls_connection_get_interaction(this);
		public Gio.TlsCertificate get_peer_certificate() => Gio.GioInterop.g_tls_connection_get_peer_certificate(this);
		public Gio.TlsCertificateFlags get_peer_certificate_errors() => Gio.GioInterop.g_tls_connection_get_peer_certificate_errors(this);
		public Gio.TlsRehandshakeMode get_rehandshake_mode() => Gio.GioInterop.g_tls_connection_get_rehandshake_mode(this);
		public bool get_require_close_notify() => Gio.GioInterop.g_tls_connection_get_require_close_notify(this);
		public bool get_use_system_certdb() => Gio.GioInterop.g_tls_connection_get_use_system_certdb(this);
		public bool handshake(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_tls_connection_handshake(this, cancellable, out error);
		public void handshake_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_tls_connection_handshake_async(this, io_priority, cancellable, callback, user_data);
		public bool handshake_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_tls_connection_handshake_finish(this, result, out error);
		public void set_certificate(Gio.TlsCertificate certificate) => Gio.GioInterop.g_tls_connection_set_certificate(this, certificate);
		public void set_database(Gio.TlsDatabase database) => Gio.GioInterop.g_tls_connection_set_database(this, database);
		public void set_interaction(Gio.TlsInteraction interaction) => Gio.GioInterop.g_tls_connection_set_interaction(this, interaction);
		public void set_rehandshake_mode(Gio.TlsRehandshakeMode mode) => Gio.GioInterop.g_tls_connection_set_rehandshake_mode(this, mode);
		public void set_require_close_notify(bool require_close_notify) => Gio.GioInterop.g_tls_connection_set_require_close_notify(this, require_close_notify);
		public void set_use_system_certdb(bool use_system_certdb) => Gio.GioInterop.g_tls_connection_set_use_system_certdb(this, use_system_certdb);
		public void clear_pending() => Gio.GioInterop.g_io_stream_clear_pending(this);
		public bool close(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_io_stream_close(this, cancellable, out error);
		public void close_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_io_stream_close_async(this, io_priority, cancellable, callback, user_data);
		public bool close_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_io_stream_close_finish(this, result, out error);
		public Gio.InputStream get_input_stream() => Gio.GioInterop.g_io_stream_get_input_stream(this);
		public Gio.OutputStream get_output_stream() => Gio.GioInterop.g_io_stream_get_output_stream(this);
		public bool has_pending() => Gio.GioInterop.g_io_stream_has_pending(this);
		public bool is_closed() => Gio.GioInterop.g_io_stream_is_closed(this);
		public bool set_pending(out GLib.Error error) => Gio.GioInterop.g_io_stream_set_pending(this, out error);
		public void splice_async(Gio.IOStream stream2, Gio.IOStreamSpliceFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_io_stream_splice_async(this, stream2, flags, io_priority, cancellable, callback, user_data);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_tls_connection_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct TlsClientConnection
	{
		private IntPtr _pointer;
		public TlsClientConnection(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator TlsClientConnection(IntPtr pointer) => new TlsClientConnection(pointer, checkType: true);
		public static explicit operator IntPtr(TlsClientConnection value) => value._pointer;
		public static Gio.TlsClientConnection @new(Gio.IOStream base_io_stream, Gio.SocketConnectable server_identity, out GLib.Error error) => GioInterop.g_tls_client_connection_new(base_io_stream, server_identity, out error);
		public void copy_session_state(Gio.TlsClientConnection source) => Gio.GioInterop.g_tls_client_connection_copy_session_state(this, source);
		public System.IntPtr get_accepted_cas() => Gio.GioInterop.g_tls_client_connection_get_accepted_cas(this);
		public Gio.SocketConnectable get_server_identity() => Gio.GioInterop.g_tls_client_connection_get_server_identity(this);
		public bool get_use_ssl3() => Gio.GioInterop.g_tls_client_connection_get_use_ssl3(this);
		public Gio.TlsCertificateFlags get_validation_flags() => Gio.GioInterop.g_tls_client_connection_get_validation_flags(this);
		public void set_server_identity(Gio.SocketConnectable identity) => Gio.GioInterop.g_tls_client_connection_set_server_identity(this, identity);
		public void set_use_ssl3(bool use_ssl3) => Gio.GioInterop.g_tls_client_connection_set_use_ssl3(this, use_ssl3);
		public void set_validation_flags(Gio.TlsCertificateFlags flags) => Gio.GioInterop.g_tls_client_connection_set_validation_flags(this, flags);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_tls_client_connection_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct TlsClientConnectionInterface
	{
		private IntPtr _pointer;
		public TlsClientConnectionInterface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator TlsClientConnectionInterface(IntPtr pointer) => new TlsClientConnectionInterface(pointer, checkType: true);
		public static explicit operator IntPtr(TlsClientConnectionInterface value) => value._pointer;
	}
	public ref struct TlsConnectionPrivate
	{
		private IntPtr _pointer;
		public TlsConnectionPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator TlsConnectionPrivate(IntPtr pointer) => new TlsConnectionPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(TlsConnectionPrivate value) => value._pointer;
	}
	public ref struct TlsConnectionClass
	{
		private IntPtr _pointer;
		public TlsConnectionClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator TlsConnectionClass(IntPtr pointer) => new TlsConnectionClass(pointer, checkType: true);
		public static explicit operator IntPtr(TlsConnectionClass value) => value._pointer;
	}
	public enum TlsDatabaseLookupFlags
	{
		none = 0,
		keypair = 1,
	}
	[Flags]
	public enum TlsDatabaseVerifyFlags
	{
		none = 0,
	}
	public ref struct TlsDatabasePrivate
	{
		private IntPtr _pointer;
		public TlsDatabasePrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator TlsDatabasePrivate(IntPtr pointer) => new TlsDatabasePrivate(pointer, checkType: true);
		public static explicit operator IntPtr(TlsDatabasePrivate value) => value._pointer;
	}
	public ref struct TlsDatabaseClass
	{
		private IntPtr _pointer;
		public TlsDatabaseClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator TlsDatabaseClass(IntPtr pointer) => new TlsDatabaseClass(pointer, checkType: true);
		public static explicit operator IntPtr(TlsDatabaseClass value) => value._pointer;
	}
	public enum TlsError
	{
		unavailable = 0,
		misc = 1,
		bad_certificate = 2,
		not_tls = 3,
		handshake = 4,
		certificate_required = 5,
		eof = 6,
	}
	public ref struct TlsFileDatabase
	{
		private IntPtr _pointer;
		public TlsFileDatabase(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator TlsFileDatabase(IntPtr pointer) => new TlsFileDatabase(pointer, checkType: true);
		public static explicit operator IntPtr(TlsFileDatabase value) => value._pointer;
		public static Gio.TlsFileDatabase @new(System.IntPtr anchors, out GLib.Error error) => GioInterop.g_tls_file_database_new(anchors, out error);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_tls_file_database_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct TlsFileDatabaseInterface
	{
		private IntPtr _pointer;
		public TlsFileDatabaseInterface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator TlsFileDatabaseInterface(IntPtr pointer) => new TlsFileDatabaseInterface(pointer, checkType: true);
		public static explicit operator IntPtr(TlsFileDatabaseInterface value) => value._pointer;
	}
	public enum TlsInteractionResult
	{
		unhandled = 0,
		handled = 1,
		failed = 2,
	}
	public ref struct TlsPassword
	{
		private IntPtr _pointer;
		public TlsPassword(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator TlsPassword(IntPtr pointer) => new TlsPassword(pointer, checkType: true);
		public static explicit operator IntPtr(TlsPassword value) => value._pointer;
		public static implicit operator GObject.Object(TlsPassword value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator TlsPassword(GObject.Object value) => new TlsPassword((IntPtr)value, checkType: true);
		public static Gio.TlsPassword @new(Gio.TlsPasswordFlags flags, string description) => GioInterop.g_tls_password_new(flags, description);
		public string get_description() => Gio.GioInterop.g_tls_password_get_description(this);
		public Gio.TlsPasswordFlags get_flags() => Gio.GioInterop.g_tls_password_get_flags(this);
		public System.IntPtr get_value(System.IntPtr length) => Gio.GioInterop.g_tls_password_get_value(this, length);
		public string get_warning() => Gio.GioInterop.g_tls_password_get_warning(this);
		public void set_description(string description) => Gio.GioInterop.g_tls_password_set_description(this, description);
		public void set_flags(Gio.TlsPasswordFlags flags) => Gio.GioInterop.g_tls_password_set_flags(this, flags);
		public void set_value(System.IntPtr value, long length) => Gio.GioInterop.g_tls_password_set_value(this, value, length);
		public void set_value_full(System.IntPtr value, long length, System.IntPtr destroy) => Gio.GioInterop.g_tls_password_set_value_full(this, value, length, destroy);
		public void set_warning(string warning) => Gio.GioInterop.g_tls_password_set_warning(this, warning);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_tls_password_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct TlsInteractionPrivate
	{
		private IntPtr _pointer;
		public TlsInteractionPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator TlsInteractionPrivate(IntPtr pointer) => new TlsInteractionPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(TlsInteractionPrivate value) => value._pointer;
	}
	public ref struct TlsInteractionClass
	{
		private IntPtr _pointer;
		public TlsInteractionClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator TlsInteractionClass(IntPtr pointer) => new TlsInteractionClass(pointer, checkType: true);
		public static explicit operator IntPtr(TlsInteractionClass value) => value._pointer;
	}
	[Flags]
	public enum TlsPasswordFlags
	{
		none = 0,
		retry = 2,
		many_tries = 4,
		final_try = 8,
	}
	public ref struct TlsPasswordPrivate
	{
		private IntPtr _pointer;
		public TlsPasswordPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator TlsPasswordPrivate(IntPtr pointer) => new TlsPasswordPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(TlsPasswordPrivate value) => value._pointer;
	}
	public ref struct TlsPasswordClass
	{
		private IntPtr _pointer;
		public TlsPasswordClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator TlsPasswordClass(IntPtr pointer) => new TlsPasswordClass(pointer, checkType: true);
		public static explicit operator IntPtr(TlsPasswordClass value) => value._pointer;
	}
	public ref struct TlsServerConnection
	{
		private IntPtr _pointer;
		public TlsServerConnection(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator TlsServerConnection(IntPtr pointer) => new TlsServerConnection(pointer, checkType: true);
		public static explicit operator IntPtr(TlsServerConnection value) => value._pointer;
		public static Gio.TlsServerConnection @new(Gio.IOStream base_io_stream, Gio.TlsCertificate certificate, out GLib.Error error) => GioInterop.g_tls_server_connection_new(base_io_stream, certificate, out error);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_tls_server_connection_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct TlsServerConnectionInterface
	{
		private IntPtr _pointer;
		public TlsServerConnectionInterface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator TlsServerConnectionInterface(IntPtr pointer) => new TlsServerConnectionInterface(pointer, checkType: true);
		public static explicit operator IntPtr(TlsServerConnectionInterface value) => value._pointer;
	}
	public ref struct UnixConnection
	{
		private IntPtr _pointer;
		public UnixConnection(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator UnixConnection(IntPtr pointer) => new UnixConnection(pointer, checkType: true);
		public static explicit operator IntPtr(UnixConnection value) => value._pointer;
		public static implicit operator Gio.SocketConnection(UnixConnection value) => new Gio.SocketConnection((IntPtr)value, checkType: false);
		public static explicit operator UnixConnection(Gio.SocketConnection value) => new UnixConnection((IntPtr)value, checkType: true);
		public static implicit operator Gio.IOStream(UnixConnection value) => new Gio.IOStream((IntPtr)value, checkType: false);
		public static explicit operator UnixConnection(Gio.IOStream value) => new UnixConnection((IntPtr)value, checkType: true);
		public static implicit operator GObject.Object(UnixConnection value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator UnixConnection(GObject.Object value) => new UnixConnection((IntPtr)value, checkType: true);
		public Gio.Credentials receive_credentials(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_unix_connection_receive_credentials(this, cancellable, out error);
		public void receive_credentials_async(Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_unix_connection_receive_credentials_async(this, cancellable, callback, user_data);
		public Gio.Credentials receive_credentials_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_unix_connection_receive_credentials_finish(this, result, out error);
		public int receive_fd(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_unix_connection_receive_fd(this, cancellable, out error);
		public bool send_credentials(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_unix_connection_send_credentials(this, cancellable, out error);
		public void send_credentials_async(Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_unix_connection_send_credentials_async(this, cancellable, callback, user_data);
		public bool send_credentials_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_unix_connection_send_credentials_finish(this, result, out error);
		public bool send_fd(int fd, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_unix_connection_send_fd(this, fd, cancellable, out error);
		public bool connect(Gio.SocketAddress address, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_socket_connection_connect(this, address, cancellable, out error);
		public void connect_async(Gio.SocketAddress address, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_socket_connection_connect_async(this, address, cancellable, callback, user_data);
		public bool connect_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_socket_connection_connect_finish(this, result, out error);
		public Gio.SocketAddress get_local_address(out GLib.Error error) => Gio.GioInterop.g_socket_connection_get_local_address(this, out error);
		public Gio.SocketAddress get_remote_address(out GLib.Error error) => Gio.GioInterop.g_socket_connection_get_remote_address(this, out error);
		public Gio.Socket get_socket() => Gio.GioInterop.g_socket_connection_get_socket(this);
		public bool is_connected() => Gio.GioInterop.g_socket_connection_is_connected(this);
		public void clear_pending() => Gio.GioInterop.g_io_stream_clear_pending(this);
		public bool close(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_io_stream_close(this, cancellable, out error);
		public void close_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_io_stream_close_async(this, io_priority, cancellable, callback, user_data);
		public bool close_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_io_stream_close_finish(this, result, out error);
		public Gio.InputStream get_input_stream() => Gio.GioInterop.g_io_stream_get_input_stream(this);
		public Gio.OutputStream get_output_stream() => Gio.GioInterop.g_io_stream_get_output_stream(this);
		public bool has_pending() => Gio.GioInterop.g_io_stream_has_pending(this);
		public bool is_closed() => Gio.GioInterop.g_io_stream_is_closed(this);
		public bool set_pending(out GLib.Error error) => Gio.GioInterop.g_io_stream_set_pending(this, out error);
		public void splice_async(Gio.IOStream stream2, Gio.IOStreamSpliceFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_io_stream_splice_async(this, stream2, flags, io_priority, cancellable, callback, user_data);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_unix_connection_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct UnixConnectionPrivate
	{
		private IntPtr _pointer;
		public UnixConnectionPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator UnixConnectionPrivate(IntPtr pointer) => new UnixConnectionPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(UnixConnectionPrivate value) => value._pointer;
	}
	public ref struct UnixConnectionClass
	{
		private IntPtr _pointer;
		public UnixConnectionClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator UnixConnectionClass(IntPtr pointer) => new UnixConnectionClass(pointer, checkType: true);
		public static explicit operator IntPtr(UnixConnectionClass value) => value._pointer;
	}
	public ref struct UnixCredentialsMessage
	{
		private IntPtr _pointer;
		public UnixCredentialsMessage(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator UnixCredentialsMessage(IntPtr pointer) => new UnixCredentialsMessage(pointer, checkType: true);
		public static explicit operator IntPtr(UnixCredentialsMessage value) => value._pointer;
		public static implicit operator Gio.SocketControlMessage(UnixCredentialsMessage value) => new Gio.SocketControlMessage((IntPtr)value, checkType: false);
		public static explicit operator UnixCredentialsMessage(Gio.SocketControlMessage value) => new UnixCredentialsMessage((IntPtr)value, checkType: true);
		public static implicit operator GObject.Object(UnixCredentialsMessage value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator UnixCredentialsMessage(GObject.Object value) => new UnixCredentialsMessage((IntPtr)value, checkType: true);
		public static Gio.SocketControlMessage @new() => GioInterop.g_unix_credentials_message_new();
		public static Gio.SocketControlMessage new_with_credentials(Gio.Credentials credentials) => GioInterop.g_unix_credentials_message_new_with_credentials(credentials);
		public static bool is_supported() => GioInterop.g_unix_credentials_message_is_supported();
		public Gio.Credentials get_credentials() => Gio.GioInterop.g_unix_credentials_message_get_credentials(this);
		public int get_level() => Gio.GioInterop.g_socket_control_message_get_level(this);
		public int get_msg_type() => Gio.GioInterop.g_socket_control_message_get_msg_type(this);
		public ulong get_size() => Gio.GioInterop.g_socket_control_message_get_size(this);
		public void serialize(System.IntPtr data) => Gio.GioInterop.g_socket_control_message_serialize(this, data);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_unix_credentials_message_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct UnixCredentialsMessagePrivate
	{
		private IntPtr _pointer;
		public UnixCredentialsMessagePrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator UnixCredentialsMessagePrivate(IntPtr pointer) => new UnixCredentialsMessagePrivate(pointer, checkType: true);
		public static explicit operator IntPtr(UnixCredentialsMessagePrivate value) => value._pointer;
	}
	public ref struct UnixCredentialsMessageClass
	{
		private IntPtr _pointer;
		public UnixCredentialsMessageClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator UnixCredentialsMessageClass(IntPtr pointer) => new UnixCredentialsMessageClass(pointer, checkType: true);
		public static explicit operator IntPtr(UnixCredentialsMessageClass value) => value._pointer;
	}
	public ref struct UnixFDListPrivate
	{
		private IntPtr _pointer;
		public UnixFDListPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator UnixFDListPrivate(IntPtr pointer) => new UnixFDListPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(UnixFDListPrivate value) => value._pointer;
	}
	public ref struct UnixFDListClass
	{
		private IntPtr _pointer;
		public UnixFDListClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator UnixFDListClass(IntPtr pointer) => new UnixFDListClass(pointer, checkType: true);
		public static explicit operator IntPtr(UnixFDListClass value) => value._pointer;
	}
	public ref struct UnixFDMessage
	{
		private IntPtr _pointer;
		public UnixFDMessage(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator UnixFDMessage(IntPtr pointer) => new UnixFDMessage(pointer, checkType: true);
		public static explicit operator IntPtr(UnixFDMessage value) => value._pointer;
		public static implicit operator Gio.SocketControlMessage(UnixFDMessage value) => new Gio.SocketControlMessage((IntPtr)value, checkType: false);
		public static explicit operator UnixFDMessage(Gio.SocketControlMessage value) => new UnixFDMessage((IntPtr)value, checkType: true);
		public static implicit operator GObject.Object(UnixFDMessage value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator UnixFDMessage(GObject.Object value) => new UnixFDMessage((IntPtr)value, checkType: true);
		public static Gio.SocketControlMessage @new() => GioInterop.g_unix_fd_message_new();
		public static Gio.SocketControlMessage new_with_fd_list(Gio.UnixFDList fd_list) => GioInterop.g_unix_fd_message_new_with_fd_list(fd_list);
		public bool append_fd(int fd, out GLib.Error error) => Gio.GioInterop.g_unix_fd_message_append_fd(this, fd, out error);
		public Gio.UnixFDList get_fd_list() => Gio.GioInterop.g_unix_fd_message_get_fd_list(this);
		public System.IntPtr steal_fds(System.IntPtr length) => Gio.GioInterop.g_unix_fd_message_steal_fds(this, length);
		public int get_level() => Gio.GioInterop.g_socket_control_message_get_level(this);
		public int get_msg_type() => Gio.GioInterop.g_socket_control_message_get_msg_type(this);
		public ulong get_size() => Gio.GioInterop.g_socket_control_message_get_size(this);
		public void serialize(System.IntPtr data) => Gio.GioInterop.g_socket_control_message_serialize(this, data);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_unix_fd_message_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct UnixFDMessagePrivate
	{
		private IntPtr _pointer;
		public UnixFDMessagePrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator UnixFDMessagePrivate(IntPtr pointer) => new UnixFDMessagePrivate(pointer, checkType: true);
		public static explicit operator IntPtr(UnixFDMessagePrivate value) => value._pointer;
	}
	public ref struct UnixFDMessageClass
	{
		private IntPtr _pointer;
		public UnixFDMessageClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator UnixFDMessageClass(IntPtr pointer) => new UnixFDMessageClass(pointer, checkType: true);
		public static explicit operator IntPtr(UnixFDMessageClass value) => value._pointer;
	}
	public ref struct UnixInputStream
	{
		private IntPtr _pointer;
		public UnixInputStream(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator UnixInputStream(IntPtr pointer) => new UnixInputStream(pointer, checkType: true);
		public static explicit operator IntPtr(UnixInputStream value) => value._pointer;
		public static implicit operator Gio.InputStream(UnixInputStream value) => new Gio.InputStream((IntPtr)value, checkType: false);
		public static explicit operator UnixInputStream(Gio.InputStream value) => new UnixInputStream((IntPtr)value, checkType: true);
		public static implicit operator GObject.Object(UnixInputStream value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator UnixInputStream(GObject.Object value) => new UnixInputStream((IntPtr)value, checkType: true);
		public static Gio.InputStream @new(int fd, bool close_fd) => GioInterop.g_unix_input_stream_new(fd, close_fd);
		public bool get_close_fd() => Gio.GioInterop.g_unix_input_stream_get_close_fd(this);
		public int get_fd() => Gio.GioInterop.g_unix_input_stream_get_fd(this);
		public void set_close_fd(bool close_fd) => Gio.GioInterop.g_unix_input_stream_set_close_fd(this, close_fd);
		public void clear_pending() => Gio.GioInterop.g_input_stream_clear_pending(this);
		public bool close(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_close(this, cancellable, out error);
		public void close_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_close_async(this, io_priority, cancellable, callback, user_data);
		public bool close_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_input_stream_close_finish(this, result, out error);
		public bool has_pending() => Gio.GioInterop.g_input_stream_has_pending(this);
		public bool is_closed() => Gio.GioInterop.g_input_stream_is_closed(this);
		public long read(System.IntPtr buffer, ulong count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_read(this, buffer, count, cancellable, out error);
		public bool read_all(System.IntPtr buffer, ulong count, System.IntPtr bytes_read, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_all(this, buffer, count, bytes_read, cancellable, out error);
		public void read_all_async(System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_read_all_async(this, buffer, count, io_priority, cancellable, callback, user_data);
		public bool read_all_finish(Gio.AsyncResult result, System.IntPtr bytes_read, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_all_finish(this, result, bytes_read, out error);
		public void read_async(System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_read_async(this, buffer, count, io_priority, cancellable, callback, user_data);
		public GLib.Bytes read_bytes(ulong count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_bytes(this, count, cancellable, out error);
		public void read_bytes_async(ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_read_bytes_async(this, count, io_priority, cancellable, callback, user_data);
		public GLib.Bytes read_bytes_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_bytes_finish(this, result, out error);
		public long read_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_input_stream_read_finish(this, result, out error);
		public bool set_pending(out GLib.Error error) => Gio.GioInterop.g_input_stream_set_pending(this, out error);
		public long skip(ulong count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_input_stream_skip(this, count, cancellable, out error);
		public void skip_async(ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_input_stream_skip_async(this, count, io_priority, cancellable, callback, user_data);
		public long skip_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_input_stream_skip_finish(this, result, out error);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_unix_input_stream_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct UnixInputStreamPrivate
	{
		private IntPtr _pointer;
		public UnixInputStreamPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator UnixInputStreamPrivate(IntPtr pointer) => new UnixInputStreamPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(UnixInputStreamPrivate value) => value._pointer;
	}
	public ref struct UnixInputStreamClass
	{
		private IntPtr _pointer;
		public UnixInputStreamClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator UnixInputStreamClass(IntPtr pointer) => new UnixInputStreamClass(pointer, checkType: true);
		public static explicit operator IntPtr(UnixInputStreamClass value) => value._pointer;
	}
	public ref struct UnixMountEntry
	{
		private IntPtr _pointer;
		public UnixMountEntry(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator UnixMountEntry(IntPtr pointer) => new UnixMountEntry(pointer, checkType: true);
		public static explicit operator IntPtr(UnixMountEntry value) => value._pointer;
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_unix_mount_entry_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct UnixMountMonitor
	{
		private IntPtr _pointer;
		public UnixMountMonitor(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator UnixMountMonitor(IntPtr pointer) => new UnixMountMonitor(pointer, checkType: true);
		public static explicit operator IntPtr(UnixMountMonitor value) => value._pointer;
		public static implicit operator GObject.Object(UnixMountMonitor value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator UnixMountMonitor(GObject.Object value) => new UnixMountMonitor((IntPtr)value, checkType: true);
		public static Gio.UnixMountMonitor @new() => GioInterop.g_unix_mount_monitor_new();
		public static Gio.UnixMountMonitor get() => GioInterop.g_unix_mount_monitor_get();
		public void set_rate_limit(int limit_msec) => Gio.GioInterop.g_unix_mount_monitor_set_rate_limit(this, limit_msec);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_unix_mount_monitor_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct UnixMountMonitorClass
	{
		private IntPtr _pointer;
		public UnixMountMonitorClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator UnixMountMonitorClass(IntPtr pointer) => new UnixMountMonitorClass(pointer, checkType: true);
		public static explicit operator IntPtr(UnixMountMonitorClass value) => value._pointer;
	}
	public ref struct UnixMountPoint
	{
		private IntPtr _pointer;
		public UnixMountPoint(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator UnixMountPoint(IntPtr pointer) => new UnixMountPoint(pointer, checkType: true);
		public static explicit operator IntPtr(UnixMountPoint value) => value._pointer;
		public int compare(Gio.UnixMountPoint mount2) => Gio.GioInterop.g_unix_mount_point_compare(this, mount2);
		public Gio.UnixMountPoint copy() => Gio.GioInterop.g_unix_mount_point_copy(this);
		public void free() => Gio.GioInterop.g_unix_mount_point_free(this);
		public System.IntPtr get_device_path() => Gio.GioInterop.g_unix_mount_point_get_device_path(this);
		public string get_fs_type() => Gio.GioInterop.g_unix_mount_point_get_fs_type(this);
		public System.IntPtr get_mount_path() => Gio.GioInterop.g_unix_mount_point_get_mount_path(this);
		public string get_options() => Gio.GioInterop.g_unix_mount_point_get_options(this);
		public bool guess_can_eject() => Gio.GioInterop.g_unix_mount_point_guess_can_eject(this);
		public Gio.Icon guess_icon() => Gio.GioInterop.g_unix_mount_point_guess_icon(this);
		public string guess_name() => Gio.GioInterop.g_unix_mount_point_guess_name(this);
		public Gio.Icon guess_symbolic_icon() => Gio.GioInterop.g_unix_mount_point_guess_symbolic_icon(this);
		public bool is_loopback() => Gio.GioInterop.g_unix_mount_point_is_loopback(this);
		public bool is_readonly() => Gio.GioInterop.g_unix_mount_point_is_readonly(this);
		public bool is_user_mountable() => Gio.GioInterop.g_unix_mount_point_is_user_mountable(this);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_unix_mount_point_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct UnixOutputStream
	{
		private IntPtr _pointer;
		public UnixOutputStream(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator UnixOutputStream(IntPtr pointer) => new UnixOutputStream(pointer, checkType: true);
		public static explicit operator IntPtr(UnixOutputStream value) => value._pointer;
		public static implicit operator Gio.OutputStream(UnixOutputStream value) => new Gio.OutputStream((IntPtr)value, checkType: false);
		public static explicit operator UnixOutputStream(Gio.OutputStream value) => new UnixOutputStream((IntPtr)value, checkType: true);
		public static implicit operator GObject.Object(UnixOutputStream value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator UnixOutputStream(GObject.Object value) => new UnixOutputStream((IntPtr)value, checkType: true);
		public static Gio.OutputStream @new(int fd, bool close_fd) => GioInterop.g_unix_output_stream_new(fd, close_fd);
		public bool get_close_fd() => Gio.GioInterop.g_unix_output_stream_get_close_fd(this);
		public int get_fd() => Gio.GioInterop.g_unix_output_stream_get_fd(this);
		public void set_close_fd(bool close_fd) => Gio.GioInterop.g_unix_output_stream_set_close_fd(this, close_fd);
		public void clear_pending() => Gio.GioInterop.g_output_stream_clear_pending(this);
		public bool close(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_close(this, cancellable, out error);
		public void close_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_close_async(this, io_priority, cancellable, callback, user_data);
		public bool close_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_close_finish(this, result, out error);
		public bool flush(Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_flush(this, cancellable, out error);
		public void flush_async(int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_flush_async(this, io_priority, cancellable, callback, user_data);
		public bool flush_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_flush_finish(this, result, out error);
		public bool has_pending() => Gio.GioInterop.g_output_stream_has_pending(this);
		public bool is_closed() => Gio.GioInterop.g_output_stream_is_closed(this);
		public bool is_closing() => Gio.GioInterop.g_output_stream_is_closing(this);
		public bool set_pending(out GLib.Error error) => Gio.GioInterop.g_output_stream_set_pending(this, out error);
		public long splice(Gio.InputStream source, Gio.OutputStreamSpliceFlags flags, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_splice(this, source, flags, cancellable, out error);
		public void splice_async(Gio.InputStream source, Gio.OutputStreamSpliceFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_splice_async(this, source, flags, io_priority, cancellable, callback, user_data);
		public long splice_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_splice_finish(this, result, out error);
		public long write(System.IntPtr buffer, ulong count, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_write(this, buffer, count, cancellable, out error);
		public bool write_all(System.IntPtr buffer, ulong count, System.IntPtr bytes_written, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_all(this, buffer, count, bytes_written, cancellable, out error);
		public void write_all_async(System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_write_all_async(this, buffer, count, io_priority, cancellable, callback, user_data);
		public bool write_all_finish(Gio.AsyncResult result, System.IntPtr bytes_written, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_all_finish(this, result, bytes_written, out error);
		public void write_async(System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_write_async(this, buffer, count, io_priority, cancellable, callback, user_data);
		public long write_bytes(GLib.Bytes bytes, Gio.Cancellable cancellable, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_bytes(this, bytes, cancellable, out error);
		public void write_bytes_async(GLib.Bytes bytes, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data) => Gio.GioInterop.g_output_stream_write_bytes_async(this, bytes, io_priority, cancellable, callback, user_data);
		public long write_bytes_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_bytes_finish(this, result, out error);
		public long write_finish(Gio.AsyncResult result, out GLib.Error error) => Gio.GioInterop.g_output_stream_write_finish(this, result, out error);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_unix_output_stream_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct UnixOutputStreamPrivate
	{
		private IntPtr _pointer;
		public UnixOutputStreamPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator UnixOutputStreamPrivate(IntPtr pointer) => new UnixOutputStreamPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(UnixOutputStreamPrivate value) => value._pointer;
	}
	public ref struct UnixOutputStreamClass
	{
		private IntPtr _pointer;
		public UnixOutputStreamClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator UnixOutputStreamClass(IntPtr pointer) => new UnixOutputStreamClass(pointer, checkType: true);
		public static explicit operator IntPtr(UnixOutputStreamClass value) => value._pointer;
	}
	public enum UnixSocketAddressType
	{
		invalid = 0,
		anonymous = 1,
		path = 2,
		@abstract = 3,
		abstract_padded = 4,
	}
	public ref struct UnixSocketAddress
	{
		private IntPtr _pointer;
		public UnixSocketAddress(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator UnixSocketAddress(IntPtr pointer) => new UnixSocketAddress(pointer, checkType: true);
		public static explicit operator IntPtr(UnixSocketAddress value) => value._pointer;
		public static implicit operator Gio.SocketAddress(UnixSocketAddress value) => new Gio.SocketAddress((IntPtr)value, checkType: false);
		public static explicit operator UnixSocketAddress(Gio.SocketAddress value) => new UnixSocketAddress((IntPtr)value, checkType: true);
		public static implicit operator GObject.Object(UnixSocketAddress value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator UnixSocketAddress(GObject.Object value) => new UnixSocketAddress((IntPtr)value, checkType: true);
		public static Gio.SocketAddress @new(string path) => GioInterop.g_unix_socket_address_new(path);
		public static Gio.SocketAddress new_abstract(System.IntPtr path, int path_len) => GioInterop.g_unix_socket_address_new_abstract(path, path_len);
		public static Gio.SocketAddress new_with_type(System.IntPtr path, int path_len, Gio.UnixSocketAddressType type) => GioInterop.g_unix_socket_address_new_with_type(path, path_len, type);
		public static bool abstract_names_supported() => GioInterop.g_unix_socket_address_abstract_names_supported();
		public Gio.UnixSocketAddressType get_address_type() => Gio.GioInterop.g_unix_socket_address_get_address_type(this);
		public bool get_is_abstract() => Gio.GioInterop.g_unix_socket_address_get_is_abstract(this);
		public string get_path() => Gio.GioInterop.g_unix_socket_address_get_path(this);
		public ulong get_path_len() => Gio.GioInterop.g_unix_socket_address_get_path_len(this);
		public Gio.SocketFamily get_family() => Gio.GioInterop.g_socket_address_get_family(this);
		public long get_native_size() => Gio.GioInterop.g_socket_address_get_native_size(this);
		public bool to_native(System.IntPtr dest, ulong destlen, out GLib.Error error) => Gio.GioInterop.g_socket_address_to_native(this, dest, destlen, out error);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_unix_socket_address_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct UnixSocketAddressPrivate
	{
		private IntPtr _pointer;
		public UnixSocketAddressPrivate(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator UnixSocketAddressPrivate(IntPtr pointer) => new UnixSocketAddressPrivate(pointer, checkType: true);
		public static explicit operator IntPtr(UnixSocketAddressPrivate value) => value._pointer;
	}
	public ref struct UnixSocketAddressClass
	{
		private IntPtr _pointer;
		public UnixSocketAddressClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator UnixSocketAddressClass(IntPtr pointer) => new UnixSocketAddressClass(pointer, checkType: true);
		public static explicit operator IntPtr(UnixSocketAddressClass value) => value._pointer;
	}
	public ref struct Vfs
	{
		private IntPtr _pointer;
		public Vfs(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator Vfs(IntPtr pointer) => new Vfs(pointer, checkType: true);
		public static explicit operator IntPtr(Vfs value) => value._pointer;
		public static implicit operator GObject.Object(Vfs value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator Vfs(GObject.Object value) => new Vfs((IntPtr)value, checkType: true);
		public static Gio.Vfs get_default() => GioInterop.g_vfs_get_default();
		public static Gio.Vfs get_local() => GioInterop.g_vfs_get_local();
		public Gio.File get_file_for_path(string path) => Gio.GioInterop.g_vfs_get_file_for_path(this, path);
		public Gio.File get_file_for_uri(string uri) => Gio.GioInterop.g_vfs_get_file_for_uri(this, uri);
		public System.IntPtr get_supported_uri_schemes() => Gio.GioInterop.g_vfs_get_supported_uri_schemes(this);
		public bool is_active() => Gio.GioInterop.g_vfs_is_active(this);
		public Gio.File parse_name(string parse_name) => Gio.GioInterop.g_vfs_parse_name(this, parse_name);
		public bool register_uri_scheme(string scheme, System.IntPtr uri_func, System.IntPtr uri_data, System.IntPtr uri_destroy, System.IntPtr parse_name_func, System.IntPtr parse_name_data, System.IntPtr parse_name_destroy) => Gio.GioInterop.g_vfs_register_uri_scheme(this, scheme, uri_func, uri_data, uri_destroy, parse_name_func, parse_name_data, parse_name_destroy);
		public bool unregister_uri_scheme(string scheme) => Gio.GioInterop.g_vfs_unregister_uri_scheme(this, scheme);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_vfs_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct VfsClass
	{
		private IntPtr _pointer;
		public VfsClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator VfsClass(IntPtr pointer) => new VfsClass(pointer, checkType: true);
		public static explicit operator IntPtr(VfsClass value) => value._pointer;
	}
	public ref struct VolumeIface
	{
		private IntPtr _pointer;
		public VolumeIface(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator VolumeIface(IntPtr pointer) => new VolumeIface(pointer, checkType: true);
		public static explicit operator IntPtr(VolumeIface value) => value._pointer;
	}
	public ref struct ZlibCompressor
	{
		private IntPtr _pointer;
		public ZlibCompressor(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator ZlibCompressor(IntPtr pointer) => new ZlibCompressor(pointer, checkType: true);
		public static explicit operator IntPtr(ZlibCompressor value) => value._pointer;
		public static implicit operator GObject.Object(ZlibCompressor value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator ZlibCompressor(GObject.Object value) => new ZlibCompressor((IntPtr)value, checkType: true);
		public static Gio.ZlibCompressor @new(Gio.ZlibCompressorFormat format, int level) => GioInterop.g_zlib_compressor_new(format, level);
		public Gio.FileInfo get_file_info() => Gio.GioInterop.g_zlib_compressor_get_file_info(this);
		public void set_file_info(Gio.FileInfo file_info) => Gio.GioInterop.g_zlib_compressor_set_file_info(this, file_info);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_zlib_compressor_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public enum ZlibCompressorFormat
	{
		zlib = 0,
		gzip = 1,
		raw = 2,
	}
	public ref struct ZlibCompressorClass
	{
		private IntPtr _pointer;
		public ZlibCompressorClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator ZlibCompressorClass(IntPtr pointer) => new ZlibCompressorClass(pointer, checkType: true);
		public static explicit operator IntPtr(ZlibCompressorClass value) => value._pointer;
	}
	public ref struct ZlibDecompressor
	{
		private IntPtr _pointer;
		public ZlibDecompressor(IntPtr pointer, bool checkType = false)
		{
			if (checkType)
			{
				GObject.ObjectType.CheckInstanceIsA(pointer, TypeOf());
			}
			_pointer = pointer;
		}
		public static explicit operator ZlibDecompressor(IntPtr pointer) => new ZlibDecompressor(pointer, checkType: true);
		public static explicit operator IntPtr(ZlibDecompressor value) => value._pointer;
		public static implicit operator GObject.Object(ZlibDecompressor value) => new GObject.Object((IntPtr)value, checkType: false);
		public static explicit operator ZlibDecompressor(GObject.Object value) => new ZlibDecompressor((IntPtr)value, checkType: true);
		public static Gio.ZlibDecompressor @new(Gio.ZlibCompressorFormat format) => GioInterop.g_zlib_decompressor_new(format);
		public Gio.FileInfo get_file_info() => Gio.GioInterop.g_zlib_decompressor_get_file_info(this);
		public void add_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_add_toggle_ref(this, notify, data);
		public void add_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_add_weak_pointer(this, weak_pointer_location);
		public GObject.Binding bind_property(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags) => GObject.GObjectInterop.g_object_bind_property(this, source_property, target, target_property, flags);
		public GObject.Binding bind_property_full(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, System.IntPtr transform_to, System.IntPtr transform_from, System.IntPtr user_data, System.IntPtr notify) => GObject.GObjectInterop.g_object_bind_property_full(this, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
		public GObject.Binding bind_property_with_closures(string source_property, GObject.Object target, string target_property, GObject.BindingFlags flags, GObject.Closure transform_to, GObject.Closure transform_from) => GObject.GObjectInterop.g_object_bind_property_with_closures(this, source_property, target, target_property, flags, transform_to, transform_from);
		public System.IntPtr dup_data(string key, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_data(this, key, dup_func, user_data);
		public System.IntPtr dup_qdata(uint quark, System.IntPtr dup_func, System.IntPtr user_data) => GObject.GObjectInterop.g_object_dup_qdata(this, quark, dup_func, user_data);
		public void force_floating() => GObject.GObjectInterop.g_object_force_floating(this);
		public void freeze_notify() => GObject.GObjectInterop.g_object_freeze_notify(this);
		public System.IntPtr get_data(string key) => GObject.GObjectInterop.g_object_get_data(this, key);
		public void get_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_get_property(this, property_name, value);
		public System.IntPtr get_qdata(uint quark) => GObject.GObjectInterop.g_object_get_qdata(this, quark);
		public void getv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_getv(this, n_properties, names, values);
		public bool is_floating() => GObject.GObjectInterop.g_object_is_floating(this);
		public void notify(string property_name) => GObject.GObjectInterop.g_object_notify(this, property_name);
		public void notify_by_pspec(GObject.ParamSpec pspec) => GObject.GObjectInterop.g_object_notify_by_pspec(this, pspec);
		public GObject.Object @ref() => GObject.GObjectInterop.g_object_ref(this);
		public GObject.Object ref_sink() => GObject.GObjectInterop.g_object_ref_sink(this);
		public void remove_toggle_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_remove_toggle_ref(this, notify, data);
		public void remove_weak_pointer(System.IntPtr weak_pointer_location) => GObject.GObjectInterop.g_object_remove_weak_pointer(this, weak_pointer_location);
		public bool replace_data(string key, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_data(this, key, oldval, newval, destroy, old_destroy);
		public bool replace_qdata(uint quark, System.IntPtr oldval, System.IntPtr newval, System.IntPtr destroy, System.IntPtr old_destroy) => GObject.GObjectInterop.g_object_replace_qdata(this, quark, oldval, newval, destroy, old_destroy);
		public void run_dispose() => GObject.GObjectInterop.g_object_run_dispose(this);
		public void set_data(string key, System.IntPtr data) => GObject.GObjectInterop.g_object_set_data(this, key, data);
		public void set_data_full(string key, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_data_full(this, key, data, destroy);
		public void set_property(string property_name, GObject.Value value) => GObject.GObjectInterop.g_object_set_property(this, property_name, value);
		public void set_qdata(uint quark, System.IntPtr data) => GObject.GObjectInterop.g_object_set_qdata(this, quark, data);
		public void set_qdata_full(uint quark, System.IntPtr data, System.IntPtr destroy) => GObject.GObjectInterop.g_object_set_qdata_full(this, quark, data, destroy);
		public void setv(uint n_properties, System.IntPtr names, System.IntPtr values) => GObject.GObjectInterop.g_object_setv(this, n_properties, names, values);
		public System.IntPtr steal_data(string key) => GObject.GObjectInterop.g_object_steal_data(this, key);
		public System.IntPtr steal_qdata(uint quark) => GObject.GObjectInterop.g_object_steal_qdata(this, quark);
		public void thaw_notify() => GObject.GObjectInterop.g_object_thaw_notify(this);
		public void unref() => GObject.GObjectInterop.g_object_unref(this);
		public void watch_closure(GObject.Closure closure) => GObject.GObjectInterop.g_object_watch_closure(this, closure);
		public void weak_ref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_ref(this, notify, data);
		public void weak_unref(System.IntPtr notify, System.IntPtr data) => GObject.GObjectInterop.g_object_weak_unref(this, notify, data);
		[DllImport("libgio-2.0.so.0", EntryPoint = "g_zlib_decompressor_get_type")]
		public static extern GLib.GType TypeOf();
	}
	public ref struct ZlibDecompressorClass
	{
		private IntPtr _pointer;
		public ZlibDecompressorClass(IntPtr pointer, bool checkType = false)
		{
			_pointer = pointer;
		}
		public static explicit operator ZlibDecompressorClass(IntPtr pointer) => new ZlibDecompressorClass(pointer, checkType: true);
		public static explicit operator IntPtr(ZlibDecompressorClass value) => value._pointer;
	}
	public static class GioInterop {
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_bus_get(Gio.BusType bus_type, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusConnection g_bus_get_finish(Gio.AsyncResult res, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusConnection g_bus_get_sync(Gio.BusType bus_type, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_bus_own_name(Gio.BusType bus_type, string name, Gio.BusNameOwnerFlags flags, System.IntPtr bus_acquired_handler, System.IntPtr name_acquired_handler, System.IntPtr name_lost_handler, System.IntPtr user_data, System.IntPtr user_data_free_func);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_bus_own_name_on_connection(Gio.DBusConnection connection, string name, Gio.BusNameOwnerFlags flags, System.IntPtr name_acquired_handler, System.IntPtr name_lost_handler, System.IntPtr user_data, System.IntPtr user_data_free_func);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_bus_own_name_on_connection_with_closures(Gio.DBusConnection connection, string name, Gio.BusNameOwnerFlags flags, GObject.Closure name_acquired_closure, GObject.Closure name_lost_closure);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_bus_own_name_with_closures(Gio.BusType bus_type, string name, Gio.BusNameOwnerFlags flags, GObject.Closure bus_acquired_closure, GObject.Closure name_acquired_closure, GObject.Closure name_lost_closure);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_bus_unown_name(uint owner_id);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_bus_unwatch_name(uint watcher_id);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_bus_watch_name(Gio.BusType bus_type, string name, Gio.BusNameWatcherFlags flags, System.IntPtr name_appeared_handler, System.IntPtr name_vanished_handler, System.IntPtr user_data, System.IntPtr user_data_free_func);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_bus_watch_name_on_connection(Gio.DBusConnection connection, string name, Gio.BusNameWatcherFlags flags, System.IntPtr name_appeared_handler, System.IntPtr name_vanished_handler, System.IntPtr user_data, System.IntPtr user_data_free_func);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_bus_watch_name_on_connection_with_closures(Gio.DBusConnection connection, string name, Gio.BusNameWatcherFlags flags, GObject.Closure name_appeared_closure, GObject.Closure name_vanished_closure);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_bus_watch_name_with_closures(Gio.BusType bus_type, string name, Gio.BusNameWatcherFlags flags, GObject.Closure name_appeared_closure, GObject.Closure name_vanished_closure);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_content_type_can_be_executable(string type);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_content_type_equals(string type1, string type2);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_content_type_from_mime_type(string mime_type);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_content_type_get_description(string type);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_content_type_get_generic_icon_name(string type);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Icon g_content_type_get_icon(string type);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_content_type_get_mime_type(string type);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Icon g_content_type_get_symbolic_icon(string type);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_content_type_guess(string filename, System.IntPtr data, ulong data_size, System.IntPtr result_uncertain);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_content_type_guess_for_tree(Gio.File root);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_content_type_is_a(string type, string supertype);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_content_type_is_mime_type(string type, string mime_type);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_content_type_is_unknown(string type);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_content_types_get_registered();
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_dbus_address_escape_value(string @string);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_dbus_address_get_for_bus_sync(Gio.BusType bus_type, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_address_get_stream(string address, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.IOStream g_dbus_address_get_stream_finish(Gio.AsyncResult res, string out_guid, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.IOStream g_dbus_address_get_stream_sync(string address, string out_guid, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_dbus_generate_guid();
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Variant g_dbus_gvalue_to_gvariant(GObject.Value gvalue, GLib.VariantType type);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dbus_is_address(string @string);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dbus_is_guid(string @string);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dbus_is_interface_name(string @string);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dbus_is_member_name(string @string);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dbus_is_name(string @string);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dbus_is_supported_address(string @string, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dbus_is_unique_name(string @string);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.IOErrorEnum g_io_error_from_errno(int err_no);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_io_error_quark();
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_io_modules_load_all_in_directory(System.IntPtr dirname);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_io_modules_load_all_in_directory_with_scope(System.IntPtr dirname, Gio.IOModuleScope scope);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_io_modules_scan_all_in_directory(System.IntPtr dirname);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_io_modules_scan_all_in_directory_with_scope(System.IntPtr dirname, Gio.IOModuleScope scope);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_io_scheduler_cancel_all_jobs();
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_io_scheduler_push_job(System.IntPtr job_func, System.IntPtr user_data, System.IntPtr notify, int io_priority, Gio.Cancellable cancellable);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SettingsBackend g_keyfile_settings_backend_new(string filename, string root_path, string root_group);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SettingsBackend g_memory_settings_backend_new();
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_networking_init();
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SettingsBackend g_null_settings_backend_new();
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Source g_pollable_source_new(GObject.Object pollable_stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Source g_pollable_source_new_full(GObject.Object pollable_stream, GLib.Source child_source, Gio.Cancellable cancellable);
		[DllImport("libgio-2.0.so.0")]
		public static extern long g_pollable_stream_read(Gio.InputStream stream, System.IntPtr buffer, ulong count, bool blocking, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern long g_pollable_stream_write(Gio.OutputStream stream, System.IntPtr buffer, ulong count, bool blocking, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_pollable_stream_write_all(Gio.OutputStream stream, System.IntPtr buffer, ulong count, bool blocking, System.IntPtr bytes_written, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_resources_enumerate_children(string path, Gio.ResourceLookupFlags lookup_flags, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_resources_get_info(string path, Gio.ResourceLookupFlags lookup_flags, System.IntPtr size, System.IntPtr flags, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Bytes g_resources_lookup_data(string path, Gio.ResourceLookupFlags lookup_flags, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.InputStream g_resources_open_stream(string path, Gio.ResourceLookupFlags lookup_flags, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_resources_register(Gio.Resource resource);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_resources_unregister(Gio.Resource resource);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_simple_async_report_gerror_in_idle(GObject.Object @object, System.IntPtr callback, System.IntPtr user_data, GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_simple_async_report_take_gerror_in_idle(GObject.Object @object, System.IntPtr callback, System.IntPtr user_data, GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_unix_is_mount_path_system_internal(System.IntPtr mount_path);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.UnixMountEntry g_unix_mount_at(System.IntPtr mount_path, System.IntPtr time_read);
		[DllImport("libgio-2.0.so.0")]
		public static extern int g_unix_mount_compare(Gio.UnixMountEntry mount1, Gio.UnixMountEntry mount2);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.UnixMountEntry g_unix_mount_copy(Gio.UnixMountEntry mount_entry);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.UnixMountEntry g_unix_mount_for(System.IntPtr file_path, System.IntPtr time_read);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_unix_mount_free(Gio.UnixMountEntry mount_entry);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_unix_mount_get_device_path(Gio.UnixMountEntry mount_entry);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_unix_mount_get_fs_type(Gio.UnixMountEntry mount_entry);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_unix_mount_get_mount_path(Gio.UnixMountEntry mount_entry);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_unix_mount_guess_can_eject(Gio.UnixMountEntry mount_entry);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Icon g_unix_mount_guess_icon(Gio.UnixMountEntry mount_entry);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_unix_mount_guess_name(Gio.UnixMountEntry mount_entry);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_unix_mount_guess_should_display(Gio.UnixMountEntry mount_entry);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Icon g_unix_mount_guess_symbolic_icon(Gio.UnixMountEntry mount_entry);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_unix_mount_is_readonly(Gio.UnixMountEntry mount_entry);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_unix_mount_is_system_internal(Gio.UnixMountEntry mount_entry);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_unix_mount_points_changed_since(ulong time);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_unix_mount_points_get(System.IntPtr time_read);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_unix_mounts_changed_since(ulong time);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_unix_mounts_get(System.IntPtr time_read);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_action_name_is_valid(string action_name);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_action_parse_detailed_name(string detailed_name, string action_name, out GLib.Variant target_value, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_action_print_detailed_name(string action_name, GLib.Variant target_value);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_action_activate(Gio.Action action, GLib.Variant parameter);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_action_change_state(Gio.Action action, GLib.Variant value);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_action_get_enabled(Gio.Action action);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_action_get_name(Gio.Action action);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.VariantType g_action_get_parameter_type(Gio.Action action);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Variant g_action_get_state(Gio.Action action);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Variant g_action_get_state_hint(Gio.Action action);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.VariantType g_action_get_state_type(Gio.Action action);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SimpleAction g_simple_action_new(string name, GLib.VariantType parameter_type);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SimpleAction g_simple_action_new_stateful(string name, GLib.VariantType parameter_type, GLib.Variant state);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_simple_action_set_enabled(Gio.SimpleAction simple, bool enabled);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_simple_action_set_state(Gio.SimpleAction simple, GLib.Variant value);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_simple_action_set_state_hint(Gio.SimpleAction simple, GLib.Variant state_hint);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_action_group_action_added(Gio.ActionGroup action_group, string action_name);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_action_group_action_enabled_changed(Gio.ActionGroup action_group, string action_name, bool enabled);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_action_group_action_removed(Gio.ActionGroup action_group, string action_name);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_action_group_action_state_changed(Gio.ActionGroup action_group, string action_name, GLib.Variant state);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_action_group_activate_action(Gio.ActionGroup action_group, string action_name, GLib.Variant parameter);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_action_group_change_action_state(Gio.ActionGroup action_group, string action_name, GLib.Variant value);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_action_group_get_action_enabled(Gio.ActionGroup action_group, string action_name);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.VariantType g_action_group_get_action_parameter_type(Gio.ActionGroup action_group, string action_name);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Variant g_action_group_get_action_state(Gio.ActionGroup action_group, string action_name);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Variant g_action_group_get_action_state_hint(Gio.ActionGroup action_group, string action_name);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.VariantType g_action_group_get_action_state_type(Gio.ActionGroup action_group, string action_name);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_action_group_has_action(Gio.ActionGroup action_group, string action_name);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_action_group_list_actions(Gio.ActionGroup action_group);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_action_group_query_action(Gio.ActionGroup action_group, string action_name, System.IntPtr enabled, out GLib.VariantType parameter_type, out GLib.VariantType state_type, out GLib.Variant state_hint, out GLib.Variant state);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_action_map_add_action(Gio.ActionMap action_map, Gio.Action action);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_action_map_add_action_entries(Gio.ActionMap action_map, System.IntPtr entries, int n_entries, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Action g_action_map_lookup_action(Gio.ActionMap action_map, string action_name);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_action_map_remove_action(Gio.ActionMap action_map, string action_name);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.AppInfo g_app_info_create_from_commandline(string commandline, string application_name, Gio.AppInfoCreateFlags flags, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_app_info_get_all();
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_app_info_get_all_for_type(string content_type);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.AppInfo g_app_info_get_default_for_type(string content_type, bool must_support_uris);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.AppInfo g_app_info_get_default_for_uri_scheme(string uri_scheme);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_app_info_get_fallback_for_type(string content_type);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_app_info_get_recommended_for_type(string content_type);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_app_info_launch_default_for_uri(string uri, Gio.AppLaunchContext launch_context, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_app_info_launch_default_for_uri_async(string uri, Gio.AppLaunchContext launch_context, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_app_info_launch_default_for_uri_finish(Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_app_info_reset_type_associations(string content_type);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_app_info_add_supports_type(Gio.AppInfo appinfo, string content_type, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_app_info_can_delete(Gio.AppInfo appinfo);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_app_info_can_remove_supports_type(Gio.AppInfo appinfo);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_app_info_delete(Gio.AppInfo appinfo);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.AppInfo g_app_info_dup(Gio.AppInfo appinfo);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_app_info_equal(Gio.AppInfo appinfo1, Gio.AppInfo appinfo2);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_app_info_get_commandline(Gio.AppInfo appinfo);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_app_info_get_description(Gio.AppInfo appinfo);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_app_info_get_display_name(Gio.AppInfo appinfo);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_app_info_get_executable(Gio.AppInfo appinfo);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Icon g_app_info_get_icon(Gio.AppInfo appinfo);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_app_info_get_id(Gio.AppInfo appinfo);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_app_info_get_name(Gio.AppInfo appinfo);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_app_info_get_supported_types(Gio.AppInfo appinfo);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_app_info_launch(Gio.AppInfo appinfo, System.IntPtr files, Gio.AppLaunchContext launch_context, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_app_info_launch_uris(Gio.AppInfo appinfo, System.IntPtr uris, Gio.AppLaunchContext launch_context, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_app_info_remove_supports_type(Gio.AppInfo appinfo, string content_type, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_app_info_set_as_default_for_extension(Gio.AppInfo appinfo, System.IntPtr extension, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_app_info_set_as_default_for_type(Gio.AppInfo appinfo, string content_type, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_app_info_set_as_last_used_for_type(Gio.AppInfo appinfo, string content_type, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_app_info_should_show(Gio.AppInfo appinfo);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_app_info_supports_files(Gio.AppInfo appinfo);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_app_info_supports_uris(Gio.AppInfo appinfo);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.AppLaunchContext g_app_launch_context_new();
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_app_launch_context_get_display(Gio.AppLaunchContext context, Gio.AppInfo info, System.IntPtr files);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_app_launch_context_get_environment(Gio.AppLaunchContext context);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_app_launch_context_get_startup_notify_id(Gio.AppLaunchContext context, Gio.AppInfo info, System.IntPtr files);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_app_launch_context_launch_failed(Gio.AppLaunchContext context, string startup_notify_id);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_app_launch_context_setenv(Gio.AppLaunchContext context, string variable, string value);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_app_launch_context_unsetenv(Gio.AppLaunchContext context, string variable);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Cancellable g_cancellable_new();
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Cancellable g_cancellable_get_current();
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_cancellable_cancel(Gio.Cancellable cancellable);
		[DllImport("libgio-2.0.so.0")]
		public static extern ulong g_cancellable_connect(Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr data, System.IntPtr data_destroy_func);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_cancellable_disconnect(Gio.Cancellable cancellable, ulong handler_id);
		[DllImport("libgio-2.0.so.0")]
		public static extern int g_cancellable_get_fd(Gio.Cancellable cancellable);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_cancellable_is_cancelled(Gio.Cancellable cancellable);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_cancellable_make_pollfd(Gio.Cancellable cancellable, GLib.PollFD pollfd);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_cancellable_pop_current(Gio.Cancellable cancellable);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_cancellable_push_current(Gio.Cancellable cancellable);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_cancellable_release_fd(Gio.Cancellable cancellable);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_cancellable_reset(Gio.Cancellable cancellable);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_cancellable_set_error_if_cancelled(Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Source g_cancellable_source_new(Gio.Cancellable cancellable);
		[DllImport("libgio-2.0.so.0")]
		public static extern GObject.Object g_async_result_get_source_object(Gio.AsyncResult res);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_async_result_get_user_data(Gio.AsyncResult res);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_async_result_is_tagged(Gio.AsyncResult res, System.IntPtr source_tag);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_async_result_legacy_propagate_error(Gio.AsyncResult res, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Icon g_icon_deserialize(GLib.Variant value);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_icon_hash(System.IntPtr icon);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Icon g_icon_new_for_string(string str, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_icon_equal(Gio.Icon icon1, Gio.Icon icon2);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Variant g_icon_serialize(Gio.Icon icon);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_icon_to_string(Gio.Icon icon);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.File g_file_new_for_commandline_arg(string arg);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.File g_file_new_for_commandline_arg_and_cwd(string arg, System.IntPtr cwd);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.File g_file_new_for_path(System.IntPtr path);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.File g_file_new_for_uri(string uri);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.File g_file_new_tmp(System.IntPtr tmpl, out Gio.FileIOStream iostream, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.File g_file_parse_name(string parse_name);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileOutputStream g_file_append_to(Gio.File file, Gio.FileCreateFlags flags, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_append_to_async(Gio.File file, Gio.FileCreateFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileOutputStream g_file_append_to_finish(Gio.File file, Gio.AsyncResult res, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_copy(Gio.File source, Gio.File destination, Gio.FileCopyFlags flags, Gio.Cancellable cancellable, System.IntPtr progress_callback, System.IntPtr progress_callback_data, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_copy_async(Gio.File source, Gio.File destination, Gio.FileCopyFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr progress_callback, System.IntPtr progress_callback_data, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_copy_attributes(Gio.File source, Gio.File destination, Gio.FileCopyFlags flags, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_copy_finish(Gio.File file, Gio.AsyncResult res, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileOutputStream g_file_create(Gio.File file, Gio.FileCreateFlags flags, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_create_async(Gio.File file, Gio.FileCreateFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileOutputStream g_file_create_finish(Gio.File file, Gio.AsyncResult res, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileIOStream g_file_create_readwrite(Gio.File file, Gio.FileCreateFlags flags, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_create_readwrite_async(Gio.File file, Gio.FileCreateFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileIOStream g_file_create_readwrite_finish(Gio.File file, Gio.AsyncResult res, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_delete(Gio.File file, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_delete_async(Gio.File file, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_delete_finish(Gio.File file, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.File g_file_dup(Gio.File file);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_eject_mountable(Gio.File file, Gio.MountUnmountFlags flags, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_eject_mountable_finish(Gio.File file, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_eject_mountable_with_operation(Gio.File file, Gio.MountUnmountFlags flags, Gio.MountOperation mount_operation, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_eject_mountable_with_operation_finish(Gio.File file, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileEnumerator g_file_enumerate_children(Gio.File file, string attributes, Gio.FileQueryInfoFlags flags, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_enumerate_children_async(Gio.File file, string attributes, Gio.FileQueryInfoFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileEnumerator g_file_enumerate_children_finish(Gio.File file, Gio.AsyncResult res, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_equal(Gio.File file1, Gio.File file2);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Mount g_file_find_enclosing_mount(Gio.File file, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_find_enclosing_mount_async(Gio.File file, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Mount g_file_find_enclosing_mount_finish(Gio.File file, Gio.AsyncResult res, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_file_get_basename(Gio.File file);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.File g_file_get_child(Gio.File file, System.IntPtr name);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.File g_file_get_child_for_display_name(Gio.File file, string display_name, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.File g_file_get_parent(Gio.File file);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_file_get_parse_name(Gio.File file);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_file_get_path(Gio.File file);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_file_get_relative_path(Gio.File parent, Gio.File descendant);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_file_get_uri(Gio.File file);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_file_get_uri_scheme(Gio.File file);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_has_parent(Gio.File file, Gio.File parent);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_has_prefix(Gio.File file, Gio.File prefix);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_has_uri_scheme(Gio.File file, string uri_scheme);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_file_hash(Gio.File file);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_is_native(Gio.File file);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_load_contents(Gio.File file, Gio.Cancellable cancellable, System.IntPtr contents, System.IntPtr length, string etag_out, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_load_contents_async(Gio.File file, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_load_contents_finish(Gio.File file, Gio.AsyncResult res, System.IntPtr contents, System.IntPtr length, string etag_out, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_load_partial_contents_async(Gio.File file, Gio.Cancellable cancellable, System.IntPtr read_more_callback, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_load_partial_contents_finish(Gio.File file, Gio.AsyncResult res, System.IntPtr contents, System.IntPtr length, string etag_out, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_make_directory(Gio.File file, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_make_directory_async(Gio.File file, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_make_directory_finish(Gio.File file, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_make_directory_with_parents(Gio.File file, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_make_symbolic_link(Gio.File file, System.IntPtr symlink_value, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_measure_disk_usage(Gio.File file, Gio.FileMeasureFlags flags, Gio.Cancellable cancellable, System.IntPtr progress_callback, System.IntPtr progress_data, System.IntPtr disk_usage, System.IntPtr num_dirs, System.IntPtr num_files, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_measure_disk_usage_async(Gio.File file, Gio.FileMeasureFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr progress_callback, System.IntPtr progress_data, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_measure_disk_usage_finish(Gio.File file, Gio.AsyncResult result, System.IntPtr disk_usage, System.IntPtr num_dirs, System.IntPtr num_files, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileMonitor g_file_monitor(Gio.File file, Gio.FileMonitorFlags flags, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileMonitor g_file_monitor_directory(Gio.File file, Gio.FileMonitorFlags flags, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileMonitor g_file_monitor_file(Gio.File file, Gio.FileMonitorFlags flags, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_mount_enclosing_volume(Gio.File location, Gio.MountMountFlags flags, Gio.MountOperation mount_operation, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_mount_enclosing_volume_finish(Gio.File location, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_mount_mountable(Gio.File file, Gio.MountMountFlags flags, Gio.MountOperation mount_operation, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.File g_file_mount_mountable_finish(Gio.File file, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_move(Gio.File source, Gio.File destination, Gio.FileCopyFlags flags, Gio.Cancellable cancellable, System.IntPtr progress_callback, System.IntPtr progress_callback_data, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileIOStream g_file_open_readwrite(Gio.File file, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_open_readwrite_async(Gio.File file, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileIOStream g_file_open_readwrite_finish(Gio.File file, Gio.AsyncResult res, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_poll_mountable(Gio.File file, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_poll_mountable_finish(Gio.File file, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.AppInfo g_file_query_default_handler(Gio.File file, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_query_exists(Gio.File file, Gio.Cancellable cancellable);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileType g_file_query_file_type(Gio.File file, Gio.FileQueryInfoFlags flags, Gio.Cancellable cancellable);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileInfo g_file_query_filesystem_info(Gio.File file, string attributes, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_query_filesystem_info_async(Gio.File file, string attributes, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileInfo g_file_query_filesystem_info_finish(Gio.File file, Gio.AsyncResult res, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileInfo g_file_query_info(Gio.File file, string attributes, Gio.FileQueryInfoFlags flags, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_query_info_async(Gio.File file, string attributes, Gio.FileQueryInfoFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileInfo g_file_query_info_finish(Gio.File file, Gio.AsyncResult res, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileAttributeInfoList g_file_query_settable_attributes(Gio.File file, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileAttributeInfoList g_file_query_writable_namespaces(Gio.File file, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileInputStream g_file_read(Gio.File file, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_read_async(Gio.File file, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileInputStream g_file_read_finish(Gio.File file, Gio.AsyncResult res, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileOutputStream g_file_replace(Gio.File file, string etag, bool make_backup, Gio.FileCreateFlags flags, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_replace_async(Gio.File file, string etag, bool make_backup, Gio.FileCreateFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_replace_contents(Gio.File file, System.IntPtr contents, ulong length, string etag, bool make_backup, Gio.FileCreateFlags flags, string new_etag, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_replace_contents_async(Gio.File file, System.IntPtr contents, ulong length, string etag, bool make_backup, Gio.FileCreateFlags flags, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_replace_contents_bytes_async(Gio.File file, GLib.Bytes contents, string etag, bool make_backup, Gio.FileCreateFlags flags, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_replace_contents_finish(Gio.File file, Gio.AsyncResult res, string new_etag, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileOutputStream g_file_replace_finish(Gio.File file, Gio.AsyncResult res, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileIOStream g_file_replace_readwrite(Gio.File file, string etag, bool make_backup, Gio.FileCreateFlags flags, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_replace_readwrite_async(Gio.File file, string etag, bool make_backup, Gio.FileCreateFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileIOStream g_file_replace_readwrite_finish(Gio.File file, Gio.AsyncResult res, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.File g_file_resolve_relative_path(Gio.File file, System.IntPtr relative_path);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_set_attribute(Gio.File file, string attribute, Gio.FileAttributeType type, System.IntPtr value_p, Gio.FileQueryInfoFlags flags, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_set_attribute_byte_string(Gio.File file, string attribute, string value, Gio.FileQueryInfoFlags flags, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_set_attribute_int32(Gio.File file, string attribute, int value, Gio.FileQueryInfoFlags flags, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_set_attribute_int64(Gio.File file, string attribute, long value, Gio.FileQueryInfoFlags flags, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_set_attribute_string(Gio.File file, string attribute, string value, Gio.FileQueryInfoFlags flags, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_set_attribute_uint32(Gio.File file, string attribute, uint value, Gio.FileQueryInfoFlags flags, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_set_attribute_uint64(Gio.File file, string attribute, ulong value, Gio.FileQueryInfoFlags flags, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_set_attributes_async(Gio.File file, Gio.FileInfo info, Gio.FileQueryInfoFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_set_attributes_finish(Gio.File file, Gio.AsyncResult result, out Gio.FileInfo info, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_set_attributes_from_info(Gio.File file, Gio.FileInfo info, Gio.FileQueryInfoFlags flags, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.File g_file_set_display_name(Gio.File file, string display_name, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_set_display_name_async(Gio.File file, string display_name, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.File g_file_set_display_name_finish(Gio.File file, Gio.AsyncResult res, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_start_mountable(Gio.File file, Gio.DriveStartFlags flags, Gio.MountOperation start_operation, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_start_mountable_finish(Gio.File file, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_stop_mountable(Gio.File file, Gio.MountUnmountFlags flags, Gio.MountOperation mount_operation, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_stop_mountable_finish(Gio.File file, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_supports_thread_contexts(Gio.File file);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_trash(Gio.File file, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_trash_async(Gio.File file, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_trash_finish(Gio.File file, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_unmount_mountable(Gio.File file, Gio.MountUnmountFlags flags, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_unmount_mountable_finish(Gio.File file, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_unmount_mountable_with_operation(Gio.File file, Gio.MountUnmountFlags flags, Gio.MountOperation mount_operation, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_unmount_mountable_with_operation_finish(Gio.File file, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.AppInfoMonitor g_app_info_monitor_get();
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Application g_application_new(string application_id, Gio.ApplicationFlags flags);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Application g_application_get_default();
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_application_id_is_valid(string application_id);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_application_activate(Gio.Application application);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_application_add_main_option(Gio.Application application, string long_name, sbyte short_name, GLib.OptionFlags flags, GLib.OptionArg arg, string description, string arg_description);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_application_add_main_option_entries(Gio.Application application, System.IntPtr entries);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_application_add_option_group(Gio.Application application, GLib.OptionGroup group);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_application_bind_busy_property(Gio.Application application, GObject.Object @object, string property);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_application_get_application_id(Gio.Application application);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusConnection g_application_get_dbus_connection(Gio.Application application);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_application_get_dbus_object_path(Gio.Application application);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.ApplicationFlags g_application_get_flags(Gio.Application application);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_application_get_inactivity_timeout(Gio.Application application);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_application_get_is_busy(Gio.Application application);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_application_get_is_registered(Gio.Application application);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_application_get_is_remote(Gio.Application application);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_application_get_resource_base_path(Gio.Application application);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_application_hold(Gio.Application application);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_application_mark_busy(Gio.Application application);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_application_open(Gio.Application application, System.IntPtr files, int n_files, string hint);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_application_quit(Gio.Application application);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_application_register(Gio.Application application, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_application_release(Gio.Application application);
		[DllImport("libgio-2.0.so.0")]
		public static extern int g_application_run(Gio.Application application, int argc, System.IntPtr argv);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_application_send_notification(Gio.Application application, string id, Gio.Notification notification);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_application_set_action_group(Gio.Application application, Gio.ActionGroup action_group);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_application_set_application_id(Gio.Application application, string application_id);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_application_set_default(Gio.Application application);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_application_set_flags(Gio.Application application, Gio.ApplicationFlags flags);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_application_set_inactivity_timeout(Gio.Application application, uint inactivity_timeout);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_application_set_resource_base_path(Gio.Application application, string resource_path);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_application_unbind_busy_property(Gio.Application application, GObject.Object @object, string property);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_application_unmark_busy(Gio.Application application);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_application_withdraw_notification(Gio.Application application, string id);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusConnection g_dbus_connection_new_finish(Gio.AsyncResult res, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusConnection g_dbus_connection_new_for_address_finish(Gio.AsyncResult res, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusConnection g_dbus_connection_new_for_address_sync(string address, Gio.DBusConnectionFlags flags, Gio.DBusAuthObserver observer, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusConnection g_dbus_connection_new_sync(Gio.IOStream stream, string guid, Gio.DBusConnectionFlags flags, Gio.DBusAuthObserver observer, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_connection_new(Gio.IOStream stream, string guid, Gio.DBusConnectionFlags flags, Gio.DBusAuthObserver observer, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_connection_new_for_address(string address, Gio.DBusConnectionFlags flags, Gio.DBusAuthObserver observer, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_dbus_connection_add_filter(Gio.DBusConnection connection, System.IntPtr filter_function, System.IntPtr user_data, System.IntPtr user_data_free_func);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_connection_call(Gio.DBusConnection connection, string bus_name, string object_path, string interface_name, string method_name, GLib.Variant parameters, GLib.VariantType reply_type, Gio.DBusCallFlags flags, int timeout_msec, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Variant g_dbus_connection_call_finish(Gio.DBusConnection connection, Gio.AsyncResult res, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Variant g_dbus_connection_call_sync(Gio.DBusConnection connection, string bus_name, string object_path, string interface_name, string method_name, GLib.Variant parameters, GLib.VariantType reply_type, Gio.DBusCallFlags flags, int timeout_msec, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_connection_call_with_unix_fd_list(Gio.DBusConnection connection, string bus_name, string object_path, string interface_name, string method_name, GLib.Variant parameters, GLib.VariantType reply_type, Gio.DBusCallFlags flags, int timeout_msec, Gio.UnixFDList fd_list, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Variant g_dbus_connection_call_with_unix_fd_list_finish(Gio.DBusConnection connection, out Gio.UnixFDList out_fd_list, Gio.AsyncResult res, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Variant g_dbus_connection_call_with_unix_fd_list_sync(Gio.DBusConnection connection, string bus_name, string object_path, string interface_name, string method_name, GLib.Variant parameters, GLib.VariantType reply_type, Gio.DBusCallFlags flags, int timeout_msec, Gio.UnixFDList fd_list, out Gio.UnixFDList out_fd_list, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_connection_close(Gio.DBusConnection connection, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dbus_connection_close_finish(Gio.DBusConnection connection, Gio.AsyncResult res, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dbus_connection_close_sync(Gio.DBusConnection connection, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dbus_connection_emit_signal(Gio.DBusConnection connection, string destination_bus_name, string object_path, string interface_name, string signal_name, GLib.Variant parameters, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_dbus_connection_export_action_group(Gio.DBusConnection connection, string object_path, Gio.ActionGroup action_group, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_dbus_connection_export_menu_model(Gio.DBusConnection connection, string object_path, Gio.MenuModel menu, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_connection_flush(Gio.DBusConnection connection, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dbus_connection_flush_finish(Gio.DBusConnection connection, Gio.AsyncResult res, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dbus_connection_flush_sync(Gio.DBusConnection connection, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusCapabilityFlags g_dbus_connection_get_capabilities(Gio.DBusConnection connection);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dbus_connection_get_exit_on_close(Gio.DBusConnection connection);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_dbus_connection_get_guid(Gio.DBusConnection connection);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_dbus_connection_get_last_serial(Gio.DBusConnection connection);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Credentials g_dbus_connection_get_peer_credentials(Gio.DBusConnection connection);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.IOStream g_dbus_connection_get_stream(Gio.DBusConnection connection);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_dbus_connection_get_unique_name(Gio.DBusConnection connection);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dbus_connection_is_closed(Gio.DBusConnection connection);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_dbus_connection_register_object(Gio.DBusConnection connection, string object_path, Gio.DBusInterfaceInfo interface_info, Gio.DBusInterfaceVTable vtable, System.IntPtr user_data, System.IntPtr user_data_free_func, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_dbus_connection_register_object_with_closures(Gio.DBusConnection connection, string object_path, Gio.DBusInterfaceInfo interface_info, GObject.Closure method_call_closure, GObject.Closure get_property_closure, GObject.Closure set_property_closure, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_dbus_connection_register_subtree(Gio.DBusConnection connection, string object_path, Gio.DBusSubtreeVTable vtable, Gio.DBusSubtreeFlags flags, System.IntPtr user_data, System.IntPtr user_data_free_func, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_connection_remove_filter(Gio.DBusConnection connection, uint filter_id);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dbus_connection_send_message(Gio.DBusConnection connection, Gio.DBusMessage message, Gio.DBusSendMessageFlags flags, System.IntPtr out_serial, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_connection_send_message_with_reply(Gio.DBusConnection connection, Gio.DBusMessage message, Gio.DBusSendMessageFlags flags, int timeout_msec, System.IntPtr out_serial, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusMessage g_dbus_connection_send_message_with_reply_finish(Gio.DBusConnection connection, Gio.AsyncResult res, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusMessage g_dbus_connection_send_message_with_reply_sync(Gio.DBusConnection connection, Gio.DBusMessage message, Gio.DBusSendMessageFlags flags, int timeout_msec, System.IntPtr out_serial, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_connection_set_exit_on_close(Gio.DBusConnection connection, bool exit_on_close);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_dbus_connection_signal_subscribe(Gio.DBusConnection connection, string sender, string interface_name, string member, string object_path, string arg0, Gio.DBusSignalFlags flags, System.IntPtr callback, System.IntPtr user_data, System.IntPtr user_data_free_func);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_connection_signal_unsubscribe(Gio.DBusConnection connection, uint subscription_id);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_connection_start_message_processing(Gio.DBusConnection connection);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_connection_unexport_action_group(Gio.DBusConnection connection, uint export_id);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_connection_unexport_menu_model(Gio.DBusConnection connection, uint export_id);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dbus_connection_unregister_object(Gio.DBusConnection connection, uint registration_id);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dbus_connection_unregister_subtree(Gio.DBusConnection connection, uint registration_id);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Notification g_notification_new(string title);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_notification_add_button(Gio.Notification notification, string label, string detailed_action);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_notification_add_button_with_target_value(Gio.Notification notification, string label, string action, GLib.Variant target);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_notification_set_body(Gio.Notification notification, string body);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_notification_set_default_action(Gio.Notification notification, string detailed_action);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_notification_set_default_action_and_target_value(Gio.Notification notification, string action, GLib.Variant target);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_notification_set_icon(Gio.Notification notification, Gio.Icon icon);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_notification_set_priority(Gio.Notification notification, Gio.NotificationPriority priority);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_notification_set_title(Gio.Notification notification, string title);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_notification_set_urgent(Gio.Notification notification, bool urgent);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.File g_application_command_line_create_file_for_arg(Gio.ApplicationCommandLine cmdline, string arg);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_application_command_line_get_arguments(Gio.ApplicationCommandLine cmdline, System.IntPtr argc);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_application_command_line_get_cwd(Gio.ApplicationCommandLine cmdline);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_application_command_line_get_environ(Gio.ApplicationCommandLine cmdline);
		[DllImport("libgio-2.0.so.0")]
		public static extern int g_application_command_line_get_exit_status(Gio.ApplicationCommandLine cmdline);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_application_command_line_get_is_remote(Gio.ApplicationCommandLine cmdline);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.VariantDict g_application_command_line_get_options_dict(Gio.ApplicationCommandLine cmdline);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Variant g_application_command_line_get_platform_data(Gio.ApplicationCommandLine cmdline);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.InputStream g_application_command_line_get_stdin(Gio.ApplicationCommandLine cmdline);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_application_command_line_getenv(Gio.ApplicationCommandLine cmdline, string name);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_application_command_line_set_exit_status(Gio.ApplicationCommandLine cmdline, int exit_status);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_input_stream_clear_pending(Gio.InputStream stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_input_stream_close(Gio.InputStream stream, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_input_stream_close_async(Gio.InputStream stream, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_input_stream_close_finish(Gio.InputStream stream, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_input_stream_has_pending(Gio.InputStream stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_input_stream_is_closed(Gio.InputStream stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern long g_input_stream_read(Gio.InputStream stream, System.IntPtr buffer, ulong count, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_input_stream_read_all(Gio.InputStream stream, System.IntPtr buffer, ulong count, System.IntPtr bytes_read, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_input_stream_read_all_async(Gio.InputStream stream, System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_input_stream_read_all_finish(Gio.InputStream stream, Gio.AsyncResult result, System.IntPtr bytes_read, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_input_stream_read_async(Gio.InputStream stream, System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Bytes g_input_stream_read_bytes(Gio.InputStream stream, ulong count, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_input_stream_read_bytes_async(Gio.InputStream stream, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Bytes g_input_stream_read_bytes_finish(Gio.InputStream stream, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern long g_input_stream_read_finish(Gio.InputStream stream, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_input_stream_set_pending(Gio.InputStream stream, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern long g_input_stream_skip(Gio.InputStream stream, ulong count, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_input_stream_skip_async(Gio.InputStream stream, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern long g_input_stream_skip_finish(Gio.InputStream stream, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_async_initable_newv_async(GLib.GType object_type, uint n_parameters, GObject.Parameter parameters, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_async_initable_init_async(Gio.AsyncInitable initable, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_async_initable_init_finish(Gio.AsyncInitable initable, Gio.AsyncResult res, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern GObject.Object g_async_initable_new_finish(Gio.AsyncInitable initable, Gio.AsyncResult res, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_seekable_can_seek(Gio.Seekable seekable);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_seekable_can_truncate(Gio.Seekable seekable);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_seekable_seek(Gio.Seekable seekable, long offset, GLib.SeekType type, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern long g_seekable_tell(Gio.Seekable seekable);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_seekable_truncate(Gio.Seekable seekable, long offset, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.InputStream g_buffered_input_stream_new(Gio.InputStream base_stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.InputStream g_buffered_input_stream_new_sized(Gio.InputStream base_stream, ulong size);
		[DllImport("libgio-2.0.so.0")]
		public static extern long g_buffered_input_stream_fill(Gio.BufferedInputStream stream, long count, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_buffered_input_stream_fill_async(Gio.BufferedInputStream stream, long count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern long g_buffered_input_stream_fill_finish(Gio.BufferedInputStream stream, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern ulong g_buffered_input_stream_get_available(Gio.BufferedInputStream stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern ulong g_buffered_input_stream_get_buffer_size(Gio.BufferedInputStream stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern ulong g_buffered_input_stream_peek(Gio.BufferedInputStream stream, System.IntPtr buffer, ulong offset, ulong count);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_buffered_input_stream_peek_buffer(Gio.BufferedInputStream stream, System.IntPtr count);
		[DllImport("libgio-2.0.so.0")]
		public static extern int g_buffered_input_stream_read_byte(Gio.BufferedInputStream stream, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_buffered_input_stream_set_buffer_size(Gio.BufferedInputStream stream, ulong size);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.InputStream g_filter_input_stream_get_base_stream(Gio.FilterInputStream stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_filter_input_stream_get_close_base_stream(Gio.FilterInputStream stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_filter_input_stream_set_close_base_stream(Gio.FilterInputStream stream, bool close_base);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_output_stream_clear_pending(Gio.OutputStream stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_output_stream_close(Gio.OutputStream stream, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_output_stream_close_async(Gio.OutputStream stream, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_output_stream_close_finish(Gio.OutputStream stream, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_output_stream_flush(Gio.OutputStream stream, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_output_stream_flush_async(Gio.OutputStream stream, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_output_stream_flush_finish(Gio.OutputStream stream, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_output_stream_has_pending(Gio.OutputStream stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_output_stream_is_closed(Gio.OutputStream stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_output_stream_is_closing(Gio.OutputStream stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_output_stream_set_pending(Gio.OutputStream stream, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern long g_output_stream_splice(Gio.OutputStream stream, Gio.InputStream source, Gio.OutputStreamSpliceFlags flags, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_output_stream_splice_async(Gio.OutputStream stream, Gio.InputStream source, Gio.OutputStreamSpliceFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern long g_output_stream_splice_finish(Gio.OutputStream stream, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern long g_output_stream_write(Gio.OutputStream stream, System.IntPtr buffer, ulong count, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_output_stream_write_all(Gio.OutputStream stream, System.IntPtr buffer, ulong count, System.IntPtr bytes_written, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_output_stream_write_all_async(Gio.OutputStream stream, System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_output_stream_write_all_finish(Gio.OutputStream stream, Gio.AsyncResult result, System.IntPtr bytes_written, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_output_stream_write_async(Gio.OutputStream stream, System.IntPtr buffer, ulong count, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern long g_output_stream_write_bytes(Gio.OutputStream stream, GLib.Bytes bytes, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_output_stream_write_bytes_async(Gio.OutputStream stream, GLib.Bytes bytes, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern long g_output_stream_write_bytes_finish(Gio.OutputStream stream, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern long g_output_stream_write_finish(Gio.OutputStream stream, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.OutputStream g_buffered_output_stream_new(Gio.OutputStream base_stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.OutputStream g_buffered_output_stream_new_sized(Gio.OutputStream base_stream, ulong size);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_buffered_output_stream_get_auto_grow(Gio.BufferedOutputStream stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern ulong g_buffered_output_stream_get_buffer_size(Gio.BufferedOutputStream stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_buffered_output_stream_set_auto_grow(Gio.BufferedOutputStream stream, bool auto_grow);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_buffered_output_stream_set_buffer_size(Gio.BufferedOutputStream stream, ulong size);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.OutputStream g_filter_output_stream_get_base_stream(Gio.FilterOutputStream stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_filter_output_stream_get_close_base_stream(Gio.FilterOutputStream stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_filter_output_stream_set_close_base_stream(Gio.FilterOutputStream stream, bool close_base);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.InputStream g_loadable_icon_load(Gio.LoadableIcon icon, int size, string type, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_loadable_icon_load_async(Gio.LoadableIcon icon, int size, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.InputStream g_loadable_icon_load_finish(Gio.LoadableIcon icon, Gio.AsyncResult res, string type, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.BytesIcon g_bytes_icon_new(GLib.Bytes bytes);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Bytes g_bytes_icon_get_bytes(Gio.BytesIcon icon);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.ConverterResult g_converter_convert(Gio.Converter converter, System.IntPtr inbuf, ulong inbuf_size, System.IntPtr outbuf, ulong outbuf_size, Gio.ConverterFlags flags, System.IntPtr bytes_read, System.IntPtr bytes_written, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_converter_reset(Gio.Converter converter);
		[DllImport("libgio-2.0.so.0")]
		public static extern GObject.Object g_initable_newv(GLib.GType object_type, uint n_parameters, System.IntPtr parameters, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_initable_init(Gio.Initable initable, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.CharsetConverter g_charset_converter_new(string to_charset, string from_charset, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_charset_converter_get_num_fallbacks(Gio.CharsetConverter converter);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_charset_converter_get_use_fallback(Gio.CharsetConverter converter);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_charset_converter_set_use_fallback(Gio.CharsetConverter converter, bool use_fallback);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_pollable_input_stream_can_poll(Gio.PollableInputStream stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Source g_pollable_input_stream_create_source(Gio.PollableInputStream stream, Gio.Cancellable cancellable);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_pollable_input_stream_is_readable(Gio.PollableInputStream stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern long g_pollable_input_stream_read_nonblocking(Gio.PollableInputStream stream, System.IntPtr buffer, ulong count, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.InputStream g_converter_input_stream_new(Gio.InputStream base_stream, Gio.Converter converter);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Converter g_converter_input_stream_get_converter(Gio.ConverterInputStream converter_stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_pollable_output_stream_can_poll(Gio.PollableOutputStream stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Source g_pollable_output_stream_create_source(Gio.PollableOutputStream stream, Gio.Cancellable cancellable);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_pollable_output_stream_is_writable(Gio.PollableOutputStream stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern long g_pollable_output_stream_write_nonblocking(Gio.PollableOutputStream stream, System.IntPtr buffer, ulong count, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.OutputStream g_converter_output_stream_new(Gio.OutputStream base_stream, Gio.Converter converter);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Converter g_converter_output_stream_get_converter(Gio.ConverterOutputStream converter_stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Credentials g_credentials_new();
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_credentials_get_native(Gio.Credentials credentials, Gio.CredentialsType native_type);
		[DllImport("libgio-2.0.so.0")]
		public static extern int g_credentials_get_unix_pid(Gio.Credentials credentials, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_credentials_get_unix_user(Gio.Credentials credentials, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_credentials_is_same_user(Gio.Credentials credentials, Gio.Credentials other_credentials, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_credentials_set_native(Gio.Credentials credentials, Gio.CredentialsType native_type, System.IntPtr native);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_credentials_set_unix_user(Gio.Credentials credentials, uint uid, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_credentials_to_string(Gio.Credentials credentials);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_remote_action_group_activate_action_full(Gio.RemoteActionGroup remote, string action_name, GLib.Variant parameter, GLib.Variant platform_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_remote_action_group_change_action_state_full(Gio.RemoteActionGroup remote, string action_name, GLib.Variant value, GLib.Variant platform_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusActionGroup g_dbus_action_group_get(Gio.DBusConnection connection, string bus_name, string object_path);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusAnnotationInfo g_dbus_annotation_info_ref(Gio.DBusAnnotationInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_annotation_info_unref(Gio.DBusAnnotationInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_dbus_annotation_info_lookup(System.IntPtr annotations, string name);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusArgInfo g_dbus_arg_info_ref(Gio.DBusArgInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_arg_info_unref(Gio.DBusArgInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusAuthObserver g_dbus_auth_observer_new();
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dbus_auth_observer_allow_mechanism(Gio.DBusAuthObserver observer, string mechanism);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dbus_auth_observer_authorize_authenticated_peer(Gio.DBusAuthObserver observer, Gio.IOStream stream, Gio.Credentials credentials);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_io_stream_splice_finish(Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_io_stream_clear_pending(Gio.IOStream stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_io_stream_close(Gio.IOStream stream, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_io_stream_close_async(Gio.IOStream stream, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_io_stream_close_finish(Gio.IOStream stream, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.InputStream g_io_stream_get_input_stream(Gio.IOStream stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.OutputStream g_io_stream_get_output_stream(Gio.IOStream stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_io_stream_has_pending(Gio.IOStream stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_io_stream_is_closed(Gio.IOStream stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_io_stream_set_pending(Gio.IOStream stream, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_io_stream_splice_async(Gio.IOStream stream1, Gio.IOStream stream2, Gio.IOStreamSpliceFlags flags, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.UnixFDList g_unix_fd_list_new();
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.UnixFDList g_unix_fd_list_new_from_array(System.IntPtr fds, int n_fds);
		[DllImport("libgio-2.0.so.0")]
		public static extern int g_unix_fd_list_append(Gio.UnixFDList list, int fd, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern int g_unix_fd_list_get(Gio.UnixFDList list, int index_, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern int g_unix_fd_list_get_length(Gio.UnixFDList list);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_unix_fd_list_peek_fds(Gio.UnixFDList list, System.IntPtr length);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_unix_fd_list_steal_fds(Gio.UnixFDList list, System.IntPtr length);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Variant g_menu_model_get_item_attribute_value(Gio.MenuModel model, int item_index, string attribute, GLib.VariantType expected_type);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.MenuModel g_menu_model_get_item_link(Gio.MenuModel model, int item_index, string link);
		[DllImport("libgio-2.0.so.0")]
		public static extern int g_menu_model_get_n_items(Gio.MenuModel model);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_menu_model_is_mutable(Gio.MenuModel model);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_menu_model_items_changed(Gio.MenuModel model, int position, int removed, int added);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.MenuAttributeIter g_menu_model_iterate_item_attributes(Gio.MenuModel model, int item_index);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.MenuLinkIter g_menu_model_iterate_item_links(Gio.MenuModel model, int item_index);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_interface_info_cache_build(Gio.DBusInterfaceInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_interface_info_cache_release(Gio.DBusInterfaceInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_interface_info_generate_xml(Gio.DBusInterfaceInfo info, uint indent, GLib.String string_builder);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusMethodInfo g_dbus_interface_info_lookup_method(Gio.DBusInterfaceInfo info, string name);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusPropertyInfo g_dbus_interface_info_lookup_property(Gio.DBusInterfaceInfo info, string name);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusSignalInfo g_dbus_interface_info_lookup_signal(Gio.DBusInterfaceInfo info, string name);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusInterfaceInfo g_dbus_interface_info_ref(Gio.DBusInterfaceInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_interface_info_unref(Gio.DBusInterfaceInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusMessage g_dbus_message_new();
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusMessage g_dbus_message_new_from_blob(System.IntPtr blob, ulong blob_len, Gio.DBusCapabilityFlags capabilities, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusMessage g_dbus_message_new_method_call(string name, string path, string interface_, string method);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusMessage g_dbus_message_new_signal(string path, string interface_, string signal);
		[DllImport("libgio-2.0.so.0")]
		public static extern long g_dbus_message_bytes_needed(System.IntPtr blob, ulong blob_len, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusMessage g_dbus_message_copy(Gio.DBusMessage message, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_dbus_message_get_arg0(Gio.DBusMessage message);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Variant g_dbus_message_get_body(Gio.DBusMessage message);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusMessageByteOrder g_dbus_message_get_byte_order(Gio.DBusMessage message);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_dbus_message_get_destination(Gio.DBusMessage message);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_dbus_message_get_error_name(Gio.DBusMessage message);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusMessageFlags g_dbus_message_get_flags(Gio.DBusMessage message);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Variant g_dbus_message_get_header(Gio.DBusMessage message, Gio.DBusMessageHeaderField header_field);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_dbus_message_get_header_fields(Gio.DBusMessage message);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_dbus_message_get_interface(Gio.DBusMessage message);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dbus_message_get_locked(Gio.DBusMessage message);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_dbus_message_get_member(Gio.DBusMessage message);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusMessageType g_dbus_message_get_message_type(Gio.DBusMessage message);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_dbus_message_get_num_unix_fds(Gio.DBusMessage message);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_dbus_message_get_path(Gio.DBusMessage message);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_dbus_message_get_reply_serial(Gio.DBusMessage message);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_dbus_message_get_sender(Gio.DBusMessage message);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_dbus_message_get_serial(Gio.DBusMessage message);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_dbus_message_get_signature(Gio.DBusMessage message);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.UnixFDList g_dbus_message_get_unix_fd_list(Gio.DBusMessage message);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_message_lock(Gio.DBusMessage message);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusMessage g_dbus_message_new_method_error_literal(Gio.DBusMessage method_call_message, string error_name, string error_message);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusMessage g_dbus_message_new_method_reply(Gio.DBusMessage method_call_message);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_dbus_message_print(Gio.DBusMessage message, uint indent);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_message_set_body(Gio.DBusMessage message, GLib.Variant body);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_message_set_byte_order(Gio.DBusMessage message, Gio.DBusMessageByteOrder byte_order);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_message_set_destination(Gio.DBusMessage message, string value);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_message_set_error_name(Gio.DBusMessage message, string value);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_message_set_flags(Gio.DBusMessage message, Gio.DBusMessageFlags flags);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_message_set_header(Gio.DBusMessage message, Gio.DBusMessageHeaderField header_field, GLib.Variant value);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_message_set_interface(Gio.DBusMessage message, string value);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_message_set_member(Gio.DBusMessage message, string value);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_message_set_message_type(Gio.DBusMessage message, Gio.DBusMessageType type);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_message_set_num_unix_fds(Gio.DBusMessage message, uint value);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_message_set_path(Gio.DBusMessage message, string value);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_message_set_reply_serial(Gio.DBusMessage message, uint value);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_message_set_sender(Gio.DBusMessage message, string value);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_message_set_serial(Gio.DBusMessage message, uint serial);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_message_set_signature(Gio.DBusMessage message, string value);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_message_set_unix_fd_list(Gio.DBusMessage message, Gio.UnixFDList fd_list);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_dbus_message_to_blob(Gio.DBusMessage message, System.IntPtr out_size, Gio.DBusCapabilityFlags capabilities, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dbus_message_to_gerror(Gio.DBusMessage message, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_dbus_error_encode_gerror(GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_dbus_error_get_remote_error(GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dbus_error_is_remote_error(GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Error g_dbus_error_new_for_dbus_error(string dbus_error_name, string dbus_error_message);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_dbus_error_quark();
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dbus_error_register_error(uint error_domain, int error_code, string dbus_error_name);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_error_register_error_domain(string error_domain_quark_name, System.IntPtr quark_volatile, Gio.DBusErrorEntry entries, uint num_entries);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dbus_error_strip_remote_error(GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dbus_error_unregister_error(uint error_domain, int error_code, string dbus_error_name);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusInterface g_dbus_object_get_interface(Gio.DBusObject @object, string interface_name);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_dbus_object_get_interfaces(Gio.DBusObject @object);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_dbus_object_get_object_path(Gio.DBusObject @object);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusObject g_dbus_interface_dup_object(Gio.DBusInterface interface_);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusInterfaceInfo g_dbus_interface_get_info(Gio.DBusInterface interface_);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusObject g_dbus_interface_get_object(Gio.DBusInterface interface_);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_interface_set_object(Gio.DBusInterface interface_, Gio.DBusObject @object);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusMethodInfo g_dbus_method_info_ref(Gio.DBusMethodInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_method_info_unref(Gio.DBusMethodInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusSignalInfo g_dbus_signal_info_ref(Gio.DBusSignalInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_signal_info_unref(Gio.DBusSignalInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusPropertyInfo g_dbus_property_info_ref(Gio.DBusPropertyInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_property_info_unref(Gio.DBusPropertyInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusConnection g_dbus_method_invocation_get_connection(Gio.DBusMethodInvocation invocation);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_dbus_method_invocation_get_interface_name(Gio.DBusMethodInvocation invocation);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusMessage g_dbus_method_invocation_get_message(Gio.DBusMethodInvocation invocation);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusMethodInfo g_dbus_method_invocation_get_method_info(Gio.DBusMethodInvocation invocation);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_dbus_method_invocation_get_method_name(Gio.DBusMethodInvocation invocation);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_dbus_method_invocation_get_object_path(Gio.DBusMethodInvocation invocation);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Variant g_dbus_method_invocation_get_parameters(Gio.DBusMethodInvocation invocation);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusPropertyInfo g_dbus_method_invocation_get_property_info(Gio.DBusMethodInvocation invocation);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_dbus_method_invocation_get_sender(Gio.DBusMethodInvocation invocation);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_dbus_method_invocation_get_user_data(Gio.DBusMethodInvocation invocation);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_method_invocation_return_dbus_error(Gio.DBusMethodInvocation invocation, string error_name, string error_message);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_method_invocation_return_error_literal(Gio.DBusMethodInvocation invocation, uint domain, int code, string message);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_method_invocation_return_gerror(Gio.DBusMethodInvocation invocation, GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_method_invocation_return_value(Gio.DBusMethodInvocation invocation, GLib.Variant parameters);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_method_invocation_return_value_with_unix_fd_list(Gio.DBusMethodInvocation invocation, GLib.Variant parameters, Gio.UnixFDList fd_list);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_method_invocation_take_error(Gio.DBusMethodInvocation invocation, GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dbus_interface_skeleton_export(Gio.DBusInterfaceSkeleton interface_, Gio.DBusConnection connection, string object_path, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_interface_skeleton_flush(Gio.DBusInterfaceSkeleton interface_);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusConnection g_dbus_interface_skeleton_get_connection(Gio.DBusInterfaceSkeleton interface_);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_dbus_interface_skeleton_get_connections(Gio.DBusInterfaceSkeleton interface_);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusInterfaceSkeletonFlags g_dbus_interface_skeleton_get_flags(Gio.DBusInterfaceSkeleton interface_);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusInterfaceInfo g_dbus_interface_skeleton_get_info(Gio.DBusInterfaceSkeleton interface_);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_dbus_interface_skeleton_get_object_path(Gio.DBusInterfaceSkeleton interface_);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Variant g_dbus_interface_skeleton_get_properties(Gio.DBusInterfaceSkeleton interface_);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusInterfaceVTable g_dbus_interface_skeleton_get_vtable(Gio.DBusInterfaceSkeleton interface_);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dbus_interface_skeleton_has_connection(Gio.DBusInterfaceSkeleton interface_, Gio.DBusConnection connection);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_interface_skeleton_set_flags(Gio.DBusInterfaceSkeleton interface_, Gio.DBusInterfaceSkeletonFlags flags);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_interface_skeleton_unexport(Gio.DBusInterfaceSkeleton interface_);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_interface_skeleton_unexport_from_connection(Gio.DBusInterfaceSkeleton interface_, Gio.DBusConnection connection);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusMenuModel g_dbus_menu_model_get(Gio.DBusConnection connection, string bus_name, string object_path);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusNodeInfo g_dbus_node_info_new_for_xml(string xml_data, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_node_info_generate_xml(Gio.DBusNodeInfo info, uint indent, GLib.String string_builder);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusInterfaceInfo g_dbus_node_info_lookup_interface(Gio.DBusNodeInfo info, string name);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusNodeInfo g_dbus_node_info_ref(Gio.DBusNodeInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_node_info_unref(Gio.DBusNodeInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusInterface g_dbus_object_manager_get_interface(Gio.DBusObjectManager manager, string object_path, string interface_name);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusObject g_dbus_object_manager_get_object(Gio.DBusObjectManager manager, string object_path);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_dbus_object_manager_get_object_path(Gio.DBusObjectManager manager);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_dbus_object_manager_get_objects(Gio.DBusObjectManager manager);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusObjectManagerClient g_dbus_object_manager_client_new_finish(Gio.AsyncResult res, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusObjectManagerClient g_dbus_object_manager_client_new_for_bus_finish(Gio.AsyncResult res, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusObjectManagerClient g_dbus_object_manager_client_new_for_bus_sync(Gio.BusType bus_type, Gio.DBusObjectManagerClientFlags flags, string name, string object_path, System.IntPtr get_proxy_type_func, System.IntPtr get_proxy_type_user_data, System.IntPtr get_proxy_type_destroy_notify, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusObjectManagerClient g_dbus_object_manager_client_new_sync(Gio.DBusConnection connection, Gio.DBusObjectManagerClientFlags flags, string name, string object_path, System.IntPtr get_proxy_type_func, System.IntPtr get_proxy_type_user_data, System.IntPtr get_proxy_type_destroy_notify, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_object_manager_client_new(Gio.DBusConnection connection, Gio.DBusObjectManagerClientFlags flags, string name, string object_path, System.IntPtr get_proxy_type_func, System.IntPtr get_proxy_type_user_data, System.IntPtr get_proxy_type_destroy_notify, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_object_manager_client_new_for_bus(Gio.BusType bus_type, Gio.DBusObjectManagerClientFlags flags, string name, string object_path, System.IntPtr get_proxy_type_func, System.IntPtr get_proxy_type_user_data, System.IntPtr get_proxy_type_destroy_notify, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusConnection g_dbus_object_manager_client_get_connection(Gio.DBusObjectManagerClient manager);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusObjectManagerClientFlags g_dbus_object_manager_client_get_flags(Gio.DBusObjectManagerClient manager);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_dbus_object_manager_client_get_name(Gio.DBusObjectManagerClient manager);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_dbus_object_manager_client_get_name_owner(Gio.DBusObjectManagerClient manager);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusObjectProxy g_dbus_object_proxy_new(Gio.DBusConnection connection, string object_path);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusConnection g_dbus_object_proxy_get_connection(Gio.DBusObjectProxy proxy);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusProxy g_dbus_proxy_new_finish(Gio.AsyncResult res, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusProxy g_dbus_proxy_new_for_bus_finish(Gio.AsyncResult res, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusProxy g_dbus_proxy_new_for_bus_sync(Gio.BusType bus_type, Gio.DBusProxyFlags flags, Gio.DBusInterfaceInfo info, string name, string object_path, string interface_name, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusProxy g_dbus_proxy_new_sync(Gio.DBusConnection connection, Gio.DBusProxyFlags flags, Gio.DBusInterfaceInfo info, string name, string object_path, string interface_name, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_proxy_new(Gio.DBusConnection connection, Gio.DBusProxyFlags flags, Gio.DBusInterfaceInfo info, string name, string object_path, string interface_name, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_proxy_new_for_bus(Gio.BusType bus_type, Gio.DBusProxyFlags flags, Gio.DBusInterfaceInfo info, string name, string object_path, string interface_name, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_proxy_call(Gio.DBusProxy proxy, string method_name, GLib.Variant parameters, Gio.DBusCallFlags flags, int timeout_msec, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Variant g_dbus_proxy_call_finish(Gio.DBusProxy proxy, Gio.AsyncResult res, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Variant g_dbus_proxy_call_sync(Gio.DBusProxy proxy, string method_name, GLib.Variant parameters, Gio.DBusCallFlags flags, int timeout_msec, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_proxy_call_with_unix_fd_list(Gio.DBusProxy proxy, string method_name, GLib.Variant parameters, Gio.DBusCallFlags flags, int timeout_msec, Gio.UnixFDList fd_list, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Variant g_dbus_proxy_call_with_unix_fd_list_finish(Gio.DBusProxy proxy, out Gio.UnixFDList out_fd_list, Gio.AsyncResult res, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Variant g_dbus_proxy_call_with_unix_fd_list_sync(Gio.DBusProxy proxy, string method_name, GLib.Variant parameters, Gio.DBusCallFlags flags, int timeout_msec, Gio.UnixFDList fd_list, out Gio.UnixFDList out_fd_list, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Variant g_dbus_proxy_get_cached_property(Gio.DBusProxy proxy, string property_name);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_dbus_proxy_get_cached_property_names(Gio.DBusProxy proxy);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusConnection g_dbus_proxy_get_connection(Gio.DBusProxy proxy);
		[DllImport("libgio-2.0.so.0")]
		public static extern int g_dbus_proxy_get_default_timeout(Gio.DBusProxy proxy);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusProxyFlags g_dbus_proxy_get_flags(Gio.DBusProxy proxy);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusInterfaceInfo g_dbus_proxy_get_interface_info(Gio.DBusProxy proxy);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_dbus_proxy_get_interface_name(Gio.DBusProxy proxy);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_dbus_proxy_get_name(Gio.DBusProxy proxy);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_dbus_proxy_get_name_owner(Gio.DBusProxy proxy);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_dbus_proxy_get_object_path(Gio.DBusProxy proxy);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_proxy_set_cached_property(Gio.DBusProxy proxy, string property_name, GLib.Variant value);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_proxy_set_default_timeout(Gio.DBusProxy proxy, int timeout_msec);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_proxy_set_interface_info(Gio.DBusProxy proxy, Gio.DBusInterfaceInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusObjectManagerServer g_dbus_object_manager_server_new(string object_path);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_object_manager_server_export(Gio.DBusObjectManagerServer manager, Gio.DBusObjectSkeleton @object);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_object_manager_server_export_uniquely(Gio.DBusObjectManagerServer manager, Gio.DBusObjectSkeleton @object);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusConnection g_dbus_object_manager_server_get_connection(Gio.DBusObjectManagerServer manager);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dbus_object_manager_server_is_exported(Gio.DBusObjectManagerServer manager, Gio.DBusObjectSkeleton @object);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_object_manager_server_set_connection(Gio.DBusObjectManagerServer manager, Gio.DBusConnection connection);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dbus_object_manager_server_unexport(Gio.DBusObjectManagerServer manager, string object_path);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusObjectSkeleton g_dbus_object_skeleton_new(string object_path);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_object_skeleton_add_interface(Gio.DBusObjectSkeleton @object, Gio.DBusInterfaceSkeleton interface_);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_object_skeleton_flush(Gio.DBusObjectSkeleton @object);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_object_skeleton_remove_interface(Gio.DBusObjectSkeleton @object, Gio.DBusInterfaceSkeleton interface_);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_object_skeleton_remove_interface_by_name(Gio.DBusObjectSkeleton @object, string interface_name);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_object_skeleton_set_object_path(Gio.DBusObjectSkeleton @object, string object_path);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusServer g_dbus_server_new_sync(string address, Gio.DBusServerFlags flags, string guid, Gio.DBusAuthObserver observer, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_dbus_server_get_client_address(Gio.DBusServer server);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DBusServerFlags g_dbus_server_get_flags(Gio.DBusServer server);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_dbus_server_get_guid(Gio.DBusServer server);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dbus_server_is_active(Gio.DBusServer server);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_server_start(Gio.DBusServer server);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dbus_server_stop(Gio.DBusServer server);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DataInputStream g_data_input_stream_new(Gio.InputStream base_stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DataStreamByteOrder g_data_input_stream_get_byte_order(Gio.DataInputStream stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DataStreamNewlineType g_data_input_stream_get_newline_type(Gio.DataInputStream stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern byte g_data_input_stream_read_byte(Gio.DataInputStream stream, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern short g_data_input_stream_read_int16(Gio.DataInputStream stream, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern int g_data_input_stream_read_int32(Gio.DataInputStream stream, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern long g_data_input_stream_read_int64(Gio.DataInputStream stream, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_data_input_stream_read_line(Gio.DataInputStream stream, System.IntPtr length, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_data_input_stream_read_line_async(Gio.DataInputStream stream, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_data_input_stream_read_line_finish(Gio.DataInputStream stream, Gio.AsyncResult result, System.IntPtr length, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_data_input_stream_read_line_finish_utf8(Gio.DataInputStream stream, Gio.AsyncResult result, System.IntPtr length, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_data_input_stream_read_line_utf8(Gio.DataInputStream stream, System.IntPtr length, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern ushort g_data_input_stream_read_uint16(Gio.DataInputStream stream, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_data_input_stream_read_uint32(Gio.DataInputStream stream, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern ulong g_data_input_stream_read_uint64(Gio.DataInputStream stream, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_data_input_stream_read_until(Gio.DataInputStream stream, string stop_chars, System.IntPtr length, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_data_input_stream_read_until_async(Gio.DataInputStream stream, string stop_chars, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_data_input_stream_read_until_finish(Gio.DataInputStream stream, Gio.AsyncResult result, System.IntPtr length, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_data_input_stream_read_upto(Gio.DataInputStream stream, string stop_chars, long stop_chars_len, System.IntPtr length, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_data_input_stream_read_upto_async(Gio.DataInputStream stream, string stop_chars, long stop_chars_len, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_data_input_stream_read_upto_finish(Gio.DataInputStream stream, Gio.AsyncResult result, System.IntPtr length, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_data_input_stream_set_byte_order(Gio.DataInputStream stream, Gio.DataStreamByteOrder order);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_data_input_stream_set_newline_type(Gio.DataInputStream stream, Gio.DataStreamNewlineType type);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DataOutputStream g_data_output_stream_new(Gio.OutputStream base_stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DataStreamByteOrder g_data_output_stream_get_byte_order(Gio.DataOutputStream stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_data_output_stream_put_byte(Gio.DataOutputStream stream, byte data, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_data_output_stream_put_int16(Gio.DataOutputStream stream, short data, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_data_output_stream_put_int32(Gio.DataOutputStream stream, int data, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_data_output_stream_put_int64(Gio.DataOutputStream stream, long data, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_data_output_stream_put_string(Gio.DataOutputStream stream, string str, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_data_output_stream_put_uint16(Gio.DataOutputStream stream, ushort data, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_data_output_stream_put_uint32(Gio.DataOutputStream stream, uint data, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_data_output_stream_put_uint64(Gio.DataOutputStream stream, ulong data, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_data_output_stream_set_byte_order(Gio.DataOutputStream stream, Gio.DataStreamByteOrder order);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.IOCondition g_datagram_based_condition_check(Gio.DatagramBased datagram_based, GLib.IOCondition condition);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_datagram_based_condition_wait(Gio.DatagramBased datagram_based, GLib.IOCondition condition, long timeout, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Source g_datagram_based_create_source(Gio.DatagramBased datagram_based, GLib.IOCondition condition, Gio.Cancellable cancellable);
		[DllImport("libgio-2.0.so.0")]
		public static extern int g_datagram_based_receive_messages(Gio.DatagramBased datagram_based, System.IntPtr messages, uint num_messages, int flags, long timeout, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern int g_datagram_based_send_messages(Gio.DatagramBased datagram_based, System.IntPtr messages, uint num_messages, int flags, long timeout, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DesktopAppInfo g_desktop_app_info_new(string desktop_id);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DesktopAppInfo g_desktop_app_info_new_from_filename(System.IntPtr filename);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DesktopAppInfo g_desktop_app_info_new_from_keyfile(GLib.KeyFile key_file);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_desktop_app_info_get_implementations(string @interface);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_desktop_app_info_search(string search_string);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_desktop_app_info_set_desktop_env(string desktop_env);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_desktop_app_info_get_action_name(Gio.DesktopAppInfo info, string action_name);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_desktop_app_info_get_boolean(Gio.DesktopAppInfo info, string key);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_desktop_app_info_get_categories(Gio.DesktopAppInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_desktop_app_info_get_filename(Gio.DesktopAppInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_desktop_app_info_get_generic_name(Gio.DesktopAppInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_desktop_app_info_get_is_hidden(Gio.DesktopAppInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_desktop_app_info_get_keywords(Gio.DesktopAppInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_desktop_app_info_get_nodisplay(Gio.DesktopAppInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_desktop_app_info_get_show_in(Gio.DesktopAppInfo info, string desktop_env);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_desktop_app_info_get_startup_wm_class(Gio.DesktopAppInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_desktop_app_info_get_string(Gio.DesktopAppInfo info, string key);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_desktop_app_info_has_key(Gio.DesktopAppInfo info, string key);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_desktop_app_info_launch_action(Gio.DesktopAppInfo info, string action_name, Gio.AppLaunchContext launch_context);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_desktop_app_info_launch_uris_as_manager(Gio.DesktopAppInfo appinfo, System.IntPtr uris, Gio.AppLaunchContext launch_context, GLib.SpawnFlags spawn_flags, System.IntPtr user_setup, System.IntPtr user_setup_data, System.IntPtr pid_callback, System.IntPtr pid_callback_data, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_desktop_app_info_list_actions(Gio.DesktopAppInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.AppInfo g_desktop_app_info_lookup_get_default_for_uri_scheme(Gio.DesktopAppInfoLookup lookup, string uri_scheme);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_drive_can_eject(Gio.Drive drive);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_drive_can_poll_for_media(Gio.Drive drive);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_drive_can_start(Gio.Drive drive);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_drive_can_start_degraded(Gio.Drive drive);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_drive_can_stop(Gio.Drive drive);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_drive_eject(Gio.Drive drive, Gio.MountUnmountFlags flags, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_drive_eject_finish(Gio.Drive drive, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_drive_eject_with_operation(Gio.Drive drive, Gio.MountUnmountFlags flags, Gio.MountOperation mount_operation, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_drive_eject_with_operation_finish(Gio.Drive drive, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_drive_enumerate_identifiers(Gio.Drive drive);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Icon g_drive_get_icon(Gio.Drive drive);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_drive_get_identifier(Gio.Drive drive, string kind);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_drive_get_name(Gio.Drive drive);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_drive_get_sort_key(Gio.Drive drive);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DriveStartStopType g_drive_get_start_stop_type(Gio.Drive drive);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Icon g_drive_get_symbolic_icon(Gio.Drive drive);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_drive_get_volumes(Gio.Drive drive);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_drive_has_media(Gio.Drive drive);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_drive_has_volumes(Gio.Drive drive);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_drive_is_media_check_automatic(Gio.Drive drive);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_drive_is_media_removable(Gio.Drive drive);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_drive_is_removable(Gio.Drive drive);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_drive_poll_for_media(Gio.Drive drive, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_drive_poll_for_media_finish(Gio.Drive drive, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_drive_start(Gio.Drive drive, Gio.DriveStartFlags flags, Gio.MountOperation mount_operation, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_drive_start_finish(Gio.Drive drive, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_drive_stop(Gio.Drive drive, Gio.MountUnmountFlags flags, Gio.MountOperation mount_operation, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_drive_stop_finish(Gio.Drive drive, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.MountOperation g_mount_operation_new();
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_mount_operation_get_anonymous(Gio.MountOperation op);
		[DllImport("libgio-2.0.so.0")]
		public static extern int g_mount_operation_get_choice(Gio.MountOperation op);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_mount_operation_get_domain(Gio.MountOperation op);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_mount_operation_get_password(Gio.MountOperation op);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.PasswordSave g_mount_operation_get_password_save(Gio.MountOperation op);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_mount_operation_get_username(Gio.MountOperation op);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_mount_operation_reply(Gio.MountOperation op, Gio.MountOperationResult result);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_mount_operation_set_anonymous(Gio.MountOperation op, bool anonymous);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_mount_operation_set_choice(Gio.MountOperation op, int choice);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_mount_operation_set_domain(Gio.MountOperation op, string domain);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_mount_operation_set_password(Gio.MountOperation op, string password);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_mount_operation_set_password_save(Gio.MountOperation op, Gio.PasswordSave save);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_mount_operation_set_username(Gio.MountOperation op, string username);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_volume_can_eject(Gio.Volume volume);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_volume_can_mount(Gio.Volume volume);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_volume_eject(Gio.Volume volume, Gio.MountUnmountFlags flags, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_volume_eject_finish(Gio.Volume volume, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_volume_eject_with_operation(Gio.Volume volume, Gio.MountUnmountFlags flags, Gio.MountOperation mount_operation, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_volume_eject_with_operation_finish(Gio.Volume volume, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_volume_enumerate_identifiers(Gio.Volume volume);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.File g_volume_get_activation_root(Gio.Volume volume);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Drive g_volume_get_drive(Gio.Volume volume);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Icon g_volume_get_icon(Gio.Volume volume);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_volume_get_identifier(Gio.Volume volume, string kind);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Mount g_volume_get_mount(Gio.Volume volume);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_volume_get_name(Gio.Volume volume);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_volume_get_sort_key(Gio.Volume volume);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Icon g_volume_get_symbolic_icon(Gio.Volume volume);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_volume_get_uuid(Gio.Volume volume);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_volume_mount(Gio.Volume volume, Gio.MountMountFlags flags, Gio.MountOperation mount_operation, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_volume_mount_finish(Gio.Volume volume, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_volume_should_automount(Gio.Volume volume);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dtls_connection_close(Gio.DtlsConnection conn, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dtls_connection_close_async(Gio.DtlsConnection conn, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dtls_connection_close_finish(Gio.DtlsConnection conn, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dtls_connection_emit_accept_certificate(Gio.DtlsConnection conn, Gio.TlsCertificate peer_cert, Gio.TlsCertificateFlags errors);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsCertificate g_dtls_connection_get_certificate(Gio.DtlsConnection conn);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsDatabase g_dtls_connection_get_database(Gio.DtlsConnection conn);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsInteraction g_dtls_connection_get_interaction(Gio.DtlsConnection conn);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsCertificate g_dtls_connection_get_peer_certificate(Gio.DtlsConnection conn);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsCertificateFlags g_dtls_connection_get_peer_certificate_errors(Gio.DtlsConnection conn);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsRehandshakeMode g_dtls_connection_get_rehandshake_mode(Gio.DtlsConnection conn);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dtls_connection_get_require_close_notify(Gio.DtlsConnection conn);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dtls_connection_handshake(Gio.DtlsConnection conn, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dtls_connection_handshake_async(Gio.DtlsConnection conn, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dtls_connection_handshake_finish(Gio.DtlsConnection conn, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dtls_connection_set_certificate(Gio.DtlsConnection conn, Gio.TlsCertificate certificate);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dtls_connection_set_database(Gio.DtlsConnection conn, Gio.TlsDatabase database);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dtls_connection_set_interaction(Gio.DtlsConnection conn, Gio.TlsInteraction interaction);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dtls_connection_set_rehandshake_mode(Gio.DtlsConnection conn, Gio.TlsRehandshakeMode mode);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dtls_connection_set_require_close_notify(Gio.DtlsConnection conn, bool require_close_notify);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dtls_connection_shutdown(Gio.DtlsConnection conn, bool shutdown_read, bool shutdown_write, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dtls_connection_shutdown_async(Gio.DtlsConnection conn, bool shutdown_read, bool shutdown_write, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_dtls_connection_shutdown_finish(Gio.DtlsConnection conn, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DtlsClientConnection g_dtls_client_connection_new(Gio.DatagramBased base_socket, Gio.SocketConnectable server_identity, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_dtls_client_connection_get_accepted_cas(Gio.DtlsClientConnection conn);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketConnectable g_dtls_client_connection_get_server_identity(Gio.DtlsClientConnection conn);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsCertificateFlags g_dtls_client_connection_get_validation_flags(Gio.DtlsClientConnection conn);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dtls_client_connection_set_server_identity(Gio.DtlsClientConnection conn, Gio.SocketConnectable identity);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_dtls_client_connection_set_validation_flags(Gio.DtlsClientConnection conn, Gio.TlsCertificateFlags flags);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketAddressEnumerator g_socket_connectable_enumerate(Gio.SocketConnectable connectable);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketAddressEnumerator g_socket_connectable_proxy_enumerate(Gio.SocketConnectable connectable);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_socket_connectable_to_string(Gio.SocketConnectable connectable);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsCertificate g_tls_certificate_new_from_file(System.IntPtr file, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsCertificate g_tls_certificate_new_from_files(System.IntPtr cert_file, System.IntPtr key_file, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsCertificate g_tls_certificate_new_from_pem(string data, long length, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_tls_certificate_list_new_from_file(System.IntPtr file, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsCertificate g_tls_certificate_get_issuer(Gio.TlsCertificate cert);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_tls_certificate_is_same(Gio.TlsCertificate cert_one, Gio.TlsCertificate cert_two);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsCertificateFlags g_tls_certificate_verify(Gio.TlsCertificate cert, Gio.SocketConnectable identity, Gio.TlsCertificate trusted_ca);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_tls_database_create_certificate_handle(Gio.TlsDatabase self, Gio.TlsCertificate certificate);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsCertificate g_tls_database_lookup_certificate_for_handle(Gio.TlsDatabase self, string handle, Gio.TlsInteraction interaction, Gio.TlsDatabaseLookupFlags flags, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_tls_database_lookup_certificate_for_handle_async(Gio.TlsDatabase self, string handle, Gio.TlsInteraction interaction, Gio.TlsDatabaseLookupFlags flags, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsCertificate g_tls_database_lookup_certificate_for_handle_finish(Gio.TlsDatabase self, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsCertificate g_tls_database_lookup_certificate_issuer(Gio.TlsDatabase self, Gio.TlsCertificate certificate, Gio.TlsInteraction interaction, Gio.TlsDatabaseLookupFlags flags, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_tls_database_lookup_certificate_issuer_async(Gio.TlsDatabase self, Gio.TlsCertificate certificate, Gio.TlsInteraction interaction, Gio.TlsDatabaseLookupFlags flags, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsCertificate g_tls_database_lookup_certificate_issuer_finish(Gio.TlsDatabase self, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_tls_database_lookup_certificates_issued_by(Gio.TlsDatabase self, GLib.ByteArray issuer_raw_dn, Gio.TlsInteraction interaction, Gio.TlsDatabaseLookupFlags flags, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_tls_database_lookup_certificates_issued_by_async(Gio.TlsDatabase self, GLib.ByteArray issuer_raw_dn, Gio.TlsInteraction interaction, Gio.TlsDatabaseLookupFlags flags, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_tls_database_lookup_certificates_issued_by_finish(Gio.TlsDatabase self, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsCertificateFlags g_tls_database_verify_chain(Gio.TlsDatabase self, Gio.TlsCertificate chain, string purpose, Gio.SocketConnectable identity, Gio.TlsInteraction interaction, Gio.TlsDatabaseVerifyFlags flags, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_tls_database_verify_chain_async(Gio.TlsDatabase self, Gio.TlsCertificate chain, string purpose, Gio.SocketConnectable identity, Gio.TlsInteraction interaction, Gio.TlsDatabaseVerifyFlags flags, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsCertificateFlags g_tls_database_verify_chain_finish(Gio.TlsDatabase self, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsInteractionResult g_tls_interaction_ask_password(Gio.TlsInteraction interaction, Gio.TlsPassword password, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_tls_interaction_ask_password_async(Gio.TlsInteraction interaction, Gio.TlsPassword password, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsInteractionResult g_tls_interaction_ask_password_finish(Gio.TlsInteraction interaction, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsInteractionResult g_tls_interaction_invoke_ask_password(Gio.TlsInteraction interaction, Gio.TlsPassword password, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsInteractionResult g_tls_interaction_invoke_request_certificate(Gio.TlsInteraction interaction, Gio.TlsConnection connection, Gio.TlsCertificateRequestFlags flags, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsInteractionResult g_tls_interaction_request_certificate(Gio.TlsInteraction interaction, Gio.TlsConnection connection, Gio.TlsCertificateRequestFlags flags, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_tls_interaction_request_certificate_async(Gio.TlsInteraction interaction, Gio.TlsConnection connection, Gio.TlsCertificateRequestFlags flags, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsInteractionResult g_tls_interaction_request_certificate_finish(Gio.TlsInteraction interaction, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.DtlsServerConnection g_dtls_server_connection_new(Gio.DatagramBased base_socket, Gio.TlsCertificate certificate, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Emblem g_emblem_new(Gio.Icon icon);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Emblem g_emblem_new_with_origin(Gio.Icon icon, Gio.EmblemOrigin origin);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Icon g_emblem_get_icon(Gio.Emblem emblem);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.EmblemOrigin g_emblem_get_origin(Gio.Emblem emblem);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.EmblemedIcon g_emblemed_icon_new(Gio.Icon icon, Gio.Emblem emblem);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_emblemed_icon_add_emblem(Gio.EmblemedIcon emblemed, Gio.Emblem emblem);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_emblemed_icon_clear_emblems(Gio.EmblemedIcon emblemed);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_emblemed_icon_get_emblems(Gio.EmblemedIcon emblemed);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Icon g_emblemed_icon_get_icon(Gio.EmblemedIcon emblemed);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_file_io_stream_get_etag(Gio.FileIOStream stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileInfo g_file_io_stream_query_info(Gio.FileIOStream stream, string attributes, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_io_stream_query_info_async(Gio.FileIOStream stream, string attributes, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileInfo g_file_io_stream_query_info_finish(Gio.FileIOStream stream, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_file_output_stream_get_etag(Gio.FileOutputStream stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileInfo g_file_output_stream_query_info(Gio.FileOutputStream stream, string attributes, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_output_stream_query_info_async(Gio.FileOutputStream stream, string attributes, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileInfo g_file_output_stream_query_info_finish(Gio.FileOutputStream stream, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_enumerator_close(Gio.FileEnumerator enumerator, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_enumerator_close_async(Gio.FileEnumerator enumerator, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_enumerator_close_finish(Gio.FileEnumerator enumerator, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.File g_file_enumerator_get_child(Gio.FileEnumerator enumerator, Gio.FileInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.File g_file_enumerator_get_container(Gio.FileEnumerator enumerator);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_enumerator_has_pending(Gio.FileEnumerator enumerator);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_enumerator_is_closed(Gio.FileEnumerator enumerator);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_enumerator_iterate(Gio.FileEnumerator direnum, out Gio.FileInfo out_info, out Gio.File out_child, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileInfo g_file_enumerator_next_file(Gio.FileEnumerator enumerator, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_enumerator_next_files_async(Gio.FileEnumerator enumerator, int num_files, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_file_enumerator_next_files_finish(Gio.FileEnumerator enumerator, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_enumerator_set_pending(Gio.FileEnumerator enumerator, bool pending);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_mount_can_eject(Gio.Mount mount);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_mount_can_unmount(Gio.Mount mount);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_mount_eject(Gio.Mount mount, Gio.MountUnmountFlags flags, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_mount_eject_finish(Gio.Mount mount, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_mount_eject_with_operation(Gio.Mount mount, Gio.MountUnmountFlags flags, Gio.MountOperation mount_operation, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_mount_eject_with_operation_finish(Gio.Mount mount, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.File g_mount_get_default_location(Gio.Mount mount);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Drive g_mount_get_drive(Gio.Mount mount);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Icon g_mount_get_icon(Gio.Mount mount);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_mount_get_name(Gio.Mount mount);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.File g_mount_get_root(Gio.Mount mount);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_mount_get_sort_key(Gio.Mount mount);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Icon g_mount_get_symbolic_icon(Gio.Mount mount);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_mount_get_uuid(Gio.Mount mount);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Volume g_mount_get_volume(Gio.Mount mount);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_mount_guess_content_type(Gio.Mount mount, bool force_rescan, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_mount_guess_content_type_finish(Gio.Mount mount, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_mount_guess_content_type_sync(Gio.Mount mount, bool force_rescan, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_mount_is_shadowed(Gio.Mount mount);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_mount_remount(Gio.Mount mount, Gio.MountMountFlags flags, Gio.MountOperation mount_operation, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_mount_remount_finish(Gio.Mount mount, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_mount_shadow(Gio.Mount mount);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_mount_unmount(Gio.Mount mount, Gio.MountUnmountFlags flags, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_mount_unmount_finish(Gio.Mount mount, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_mount_unmount_with_operation(Gio.Mount mount, Gio.MountUnmountFlags flags, Gio.MountOperation mount_operation, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_mount_unmount_with_operation_finish(Gio.Mount mount, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_mount_unshadow(Gio.Mount mount);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_monitor_cancel(Gio.FileMonitor monitor);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_monitor_emit_event(Gio.FileMonitor monitor, Gio.File child, Gio.File other_file, Gio.FileMonitorEvent event_type);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_monitor_is_cancelled(Gio.FileMonitor monitor);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_monitor_set_rate_limit(Gio.FileMonitor monitor, int limit_msecs);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileInfo g_file_info_new();
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_info_clear_status(Gio.FileInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_info_copy_into(Gio.FileInfo src_info, Gio.FileInfo dest_info);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileInfo g_file_info_dup(Gio.FileInfo other);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_file_info_get_attribute_as_string(Gio.FileInfo info, string attribute);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_info_get_attribute_boolean(Gio.FileInfo info, string attribute);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_file_info_get_attribute_byte_string(Gio.FileInfo info, string attribute);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_info_get_attribute_data(Gio.FileInfo info, string attribute, out Gio.FileAttributeType type, System.IntPtr value_pp, out Gio.FileAttributeStatus status);
		[DllImport("libgio-2.0.so.0")]
		public static extern int g_file_info_get_attribute_int32(Gio.FileInfo info, string attribute);
		[DllImport("libgio-2.0.so.0")]
		public static extern long g_file_info_get_attribute_int64(Gio.FileInfo info, string attribute);
		[DllImport("libgio-2.0.so.0")]
		public static extern GObject.Object g_file_info_get_attribute_object(Gio.FileInfo info, string attribute);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileAttributeStatus g_file_info_get_attribute_status(Gio.FileInfo info, string attribute);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_file_info_get_attribute_string(Gio.FileInfo info, string attribute);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_file_info_get_attribute_stringv(Gio.FileInfo info, string attribute);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileAttributeType g_file_info_get_attribute_type(Gio.FileInfo info, string attribute);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_file_info_get_attribute_uint32(Gio.FileInfo info, string attribute);
		[DllImport("libgio-2.0.so.0")]
		public static extern ulong g_file_info_get_attribute_uint64(Gio.FileInfo info, string attribute);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_file_info_get_content_type(Gio.FileInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.DateTime g_file_info_get_deletion_date(Gio.FileInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_file_info_get_display_name(Gio.FileInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_file_info_get_edit_name(Gio.FileInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_file_info_get_etag(Gio.FileInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileType g_file_info_get_file_type(Gio.FileInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Icon g_file_info_get_icon(Gio.FileInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_info_get_is_backup(Gio.FileInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_info_get_is_hidden(Gio.FileInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_info_get_is_symlink(Gio.FileInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_file_info_get_name(Gio.FileInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern long g_file_info_get_size(Gio.FileInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern int g_file_info_get_sort_order(Gio.FileInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Icon g_file_info_get_symbolic_icon(Gio.FileInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_file_info_get_symlink_target(Gio.FileInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_info_has_attribute(Gio.FileInfo info, string attribute);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_info_has_namespace(Gio.FileInfo info, string name_space);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_file_info_list_attributes(Gio.FileInfo info, string name_space);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_info_remove_attribute(Gio.FileInfo info, string attribute);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_info_set_attribute(Gio.FileInfo info, string attribute, Gio.FileAttributeType type, System.IntPtr value_p);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_info_set_attribute_boolean(Gio.FileInfo info, string attribute, bool attr_value);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_info_set_attribute_byte_string(Gio.FileInfo info, string attribute, string attr_value);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_info_set_attribute_int32(Gio.FileInfo info, string attribute, int attr_value);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_info_set_attribute_int64(Gio.FileInfo info, string attribute, long attr_value);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_info_set_attribute_mask(Gio.FileInfo info, Gio.FileAttributeMatcher mask);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_info_set_attribute_object(Gio.FileInfo info, string attribute, GObject.Object attr_value);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_info_set_attribute_status(Gio.FileInfo info, string attribute, Gio.FileAttributeStatus status);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_info_set_attribute_string(Gio.FileInfo info, string attribute, string attr_value);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_info_set_attribute_stringv(Gio.FileInfo info, string attribute, System.IntPtr attr_value);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_info_set_attribute_uint32(Gio.FileInfo info, string attribute, uint attr_value);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_info_set_attribute_uint64(Gio.FileInfo info, string attribute, ulong attr_value);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_info_set_content_type(Gio.FileInfo info, string content_type);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_info_set_display_name(Gio.FileInfo info, string display_name);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_info_set_edit_name(Gio.FileInfo info, string edit_name);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_info_set_file_type(Gio.FileInfo info, Gio.FileType type);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_info_set_icon(Gio.FileInfo info, Gio.Icon icon);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_info_set_is_hidden(Gio.FileInfo info, bool is_hidden);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_info_set_is_symlink(Gio.FileInfo info, bool is_symlink);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_info_set_modification_time(Gio.FileInfo info, GLib.TimeVal mtime);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_info_set_name(Gio.FileInfo info, System.IntPtr name);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_info_set_size(Gio.FileInfo info, long size);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_info_set_sort_order(Gio.FileInfo info, int sort_order);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_info_set_symbolic_icon(Gio.FileInfo info, Gio.Icon icon);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_info_set_symlink_target(Gio.FileInfo info, string symlink_target);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_info_unset_attribute_mask(Gio.FileInfo info);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileAttributeInfoList g_file_attribute_info_list_new();
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_attribute_info_list_add(Gio.FileAttributeInfoList list, string name, Gio.FileAttributeType type, Gio.FileAttributeInfoFlags flags);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileAttributeInfoList g_file_attribute_info_list_dup(Gio.FileAttributeInfoList list);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileAttributeInfo g_file_attribute_info_list_lookup(Gio.FileAttributeInfoList list, string name);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileAttributeInfoList g_file_attribute_info_list_ref(Gio.FileAttributeInfoList list);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_attribute_info_list_unref(Gio.FileAttributeInfoList list);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileInfo g_file_input_stream_query_info(Gio.FileInputStream stream, string attributes, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_input_stream_query_info_async(Gio.FileInputStream stream, string attributes, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileInfo g_file_input_stream_query_info_finish(Gio.FileInputStream stream, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileAttributeMatcher g_file_attribute_matcher_new(string attributes);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_attribute_matcher_enumerate_namespace(Gio.FileAttributeMatcher matcher, string ns);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_file_attribute_matcher_enumerate_next(Gio.FileAttributeMatcher matcher);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_attribute_matcher_matches(Gio.FileAttributeMatcher matcher, string attribute);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_file_attribute_matcher_matches_only(Gio.FileAttributeMatcher matcher, string attribute);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileAttributeMatcher g_file_attribute_matcher_ref(Gio.FileAttributeMatcher matcher);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileAttributeMatcher g_file_attribute_matcher_subtract(Gio.FileAttributeMatcher matcher, Gio.FileAttributeMatcher subtract);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_file_attribute_matcher_to_string(Gio.FileAttributeMatcher matcher);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_file_attribute_matcher_unref(Gio.FileAttributeMatcher matcher);
		[DllImport("libgio-2.0.so.0")]
		public static extern int g_file_descriptor_based_get_fd(Gio.FileDescriptorBased fd_based);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileIcon g_file_icon_new(Gio.File file);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.File g_file_icon_get_file(Gio.FileIcon icon);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FilenameCompleter g_filename_completer_new();
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_filename_completer_get_completion_suffix(Gio.FilenameCompleter completer, string initial_text);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_filename_completer_get_completions(Gio.FilenameCompleter completer, string initial_text);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_filename_completer_set_dirs_only(Gio.FilenameCompleter completer, bool dirs_only);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_io_extension_get_name(Gio.IOExtension extension);
		[DllImport("libgio-2.0.so.0")]
		public static extern int g_io_extension_get_priority(Gio.IOExtension extension);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.GType g_io_extension_get_type(Gio.IOExtension extension);
		[DllImport("libgio-2.0.so.0")]
		public static extern GObject.TypeClass g_io_extension_ref_class(Gio.IOExtension extension);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.IOExtension g_io_extension_point_get_extension_by_name(Gio.IOExtensionPoint extension_point, string name);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_io_extension_point_get_extensions(Gio.IOExtensionPoint extension_point);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.GType g_io_extension_point_get_required_type(Gio.IOExtensionPoint extension_point);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_io_extension_point_set_required_type(Gio.IOExtensionPoint extension_point, GLib.GType type);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.IOExtension g_io_extension_point_implement(string extension_point_name, GLib.GType type, string extension_name, int priority);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.IOExtensionPoint g_io_extension_point_lookup(string name);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.IOExtensionPoint g_io_extension_point_register(string name);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.IOModule g_io_module_new(System.IntPtr filename);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_io_module_query();
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_io_module_load(Gio.IOModule module);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_io_module_unload(Gio.IOModule module);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_io_module_scope_block(Gio.IOModuleScope scope, string basename);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_io_module_scope_free(Gio.IOModuleScope scope);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.IOModuleScope g_io_module_scope_new(Gio.IOModuleScopeFlags flags);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_io_scheduler_job_send_to_mainloop(Gio.IOSchedulerJob job, System.IntPtr func, System.IntPtr user_data, System.IntPtr notify);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_io_scheduler_job_send_to_mainloop_async(Gio.IOSchedulerJob job, System.IntPtr func, System.IntPtr user_data, System.IntPtr notify);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.InetAddress g_inet_address_new_any(Gio.SocketFamily family);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.InetAddress g_inet_address_new_from_bytes(System.IntPtr bytes, Gio.SocketFamily family);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.InetAddress g_inet_address_new_from_string(string @string);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.InetAddress g_inet_address_new_loopback(Gio.SocketFamily family);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_inet_address_equal(Gio.InetAddress address, Gio.InetAddress other_address);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketFamily g_inet_address_get_family(Gio.InetAddress address);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_inet_address_get_is_any(Gio.InetAddress address);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_inet_address_get_is_link_local(Gio.InetAddress address);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_inet_address_get_is_loopback(Gio.InetAddress address);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_inet_address_get_is_mc_global(Gio.InetAddress address);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_inet_address_get_is_mc_link_local(Gio.InetAddress address);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_inet_address_get_is_mc_node_local(Gio.InetAddress address);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_inet_address_get_is_mc_org_local(Gio.InetAddress address);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_inet_address_get_is_mc_site_local(Gio.InetAddress address);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_inet_address_get_is_multicast(Gio.InetAddress address);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_inet_address_get_is_site_local(Gio.InetAddress address);
		[DllImport("libgio-2.0.so.0")]
		public static extern ulong g_inet_address_get_native_size(Gio.InetAddress address);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_inet_address_to_bytes(Gio.InetAddress address);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_inet_address_to_string(Gio.InetAddress address);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.InetAddressMask g_inet_address_mask_new(Gio.InetAddress addr, uint length, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.InetAddressMask g_inet_address_mask_new_from_string(string mask_string, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_inet_address_mask_equal(Gio.InetAddressMask mask, Gio.InetAddressMask mask2);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.InetAddress g_inet_address_mask_get_address(Gio.InetAddressMask mask);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketFamily g_inet_address_mask_get_family(Gio.InetAddressMask mask);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_inet_address_mask_get_length(Gio.InetAddressMask mask);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_inet_address_mask_matches(Gio.InetAddressMask mask, Gio.InetAddress address);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_inet_address_mask_to_string(Gio.InetAddressMask mask);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketAddress g_socket_address_new_from_native(System.IntPtr native, ulong len);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketFamily g_socket_address_get_family(Gio.SocketAddress address);
		[DllImport("libgio-2.0.so.0")]
		public static extern long g_socket_address_get_native_size(Gio.SocketAddress address);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_socket_address_to_native(Gio.SocketAddress address, System.IntPtr dest, ulong destlen, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketAddress g_inet_socket_address_new(Gio.InetAddress address, ushort port);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketAddress g_inet_socket_address_new_from_string(string address, uint port);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.InetAddress g_inet_socket_address_get_address(Gio.InetSocketAddress address);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_inet_socket_address_get_flowinfo(Gio.InetSocketAddress address);
		[DllImport("libgio-2.0.so.0")]
		public static extern ushort g_inet_socket_address_get_port(Gio.InetSocketAddress address);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_inet_socket_address_get_scope_id(Gio.InetSocketAddress address);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketControlMessage g_socket_control_message_deserialize(int level, int type, ulong size, System.IntPtr data);
		[DllImport("libgio-2.0.so.0")]
		public static extern int g_socket_control_message_get_level(Gio.SocketControlMessage message);
		[DllImport("libgio-2.0.so.0")]
		public static extern int g_socket_control_message_get_msg_type(Gio.SocketControlMessage message);
		[DllImport("libgio-2.0.so.0")]
		public static extern ulong g_socket_control_message_get_size(Gio.SocketControlMessage message);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_socket_control_message_serialize(Gio.SocketControlMessage message, System.IntPtr data);
		[DllImport("libgio-2.0.so.0")]
		public static extern GObject.Object g_list_model_get_item(Gio.ListModel list, uint position);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.GType g_list_model_get_item_type(Gio.ListModel list);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_list_model_get_n_items(Gio.ListModel list);
		[DllImport("libgio-2.0.so.0")]
		public static extern GObject.Object g_list_model_get_object(Gio.ListModel list, uint position);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_list_model_items_changed(Gio.ListModel list, uint position, uint removed, uint added);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.ListStore g_list_store_new(GLib.GType item_type);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_list_store_append(Gio.ListStore store, GObject.Object item);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_list_store_insert(Gio.ListStore store, uint position, GObject.Object item);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_list_store_insert_sorted(Gio.ListStore store, GObject.Object item, System.IntPtr compare_func, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_list_store_remove(Gio.ListStore store, uint position);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_list_store_remove_all(Gio.ListStore store);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_list_store_sort(Gio.ListStore store, System.IntPtr compare_func, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_list_store_splice(Gio.ListStore store, uint position, uint n_removals, System.IntPtr additions, uint n_additions);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.InputStream g_memory_input_stream_new();
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.InputStream g_memory_input_stream_new_from_bytes(GLib.Bytes bytes);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.InputStream g_memory_input_stream_new_from_data(System.IntPtr data, long len, System.IntPtr destroy);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_memory_input_stream_add_bytes(Gio.MemoryInputStream stream, GLib.Bytes bytes);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_memory_input_stream_add_data(Gio.MemoryInputStream stream, System.IntPtr data, long len, System.IntPtr destroy);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.OutputStream g_memory_output_stream_new(System.IntPtr data, ulong size, System.IntPtr realloc_function, System.IntPtr destroy_function);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.OutputStream g_memory_output_stream_new_resizable();
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_memory_output_stream_get_data(Gio.MemoryOutputStream ostream);
		[DllImport("libgio-2.0.so.0")]
		public static extern ulong g_memory_output_stream_get_data_size(Gio.MemoryOutputStream ostream);
		[DllImport("libgio-2.0.so.0")]
		public static extern ulong g_memory_output_stream_get_size(Gio.MemoryOutputStream ostream);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Bytes g_memory_output_stream_steal_as_bytes(Gio.MemoryOutputStream ostream);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_memory_output_stream_steal_data(Gio.MemoryOutputStream ostream);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Menu g_menu_new();
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_menu_append(Gio.Menu menu, string label, string detailed_action);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_menu_append_item(Gio.Menu menu, Gio.MenuItem item);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_menu_append_section(Gio.Menu menu, string label, Gio.MenuModel section);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_menu_append_submenu(Gio.Menu menu, string label, Gio.MenuModel submenu);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_menu_freeze(Gio.Menu menu);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_menu_insert(Gio.Menu menu, int position, string label, string detailed_action);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_menu_insert_item(Gio.Menu menu, int position, Gio.MenuItem item);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_menu_insert_section(Gio.Menu menu, int position, string label, Gio.MenuModel section);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_menu_insert_submenu(Gio.Menu menu, int position, string label, Gio.MenuModel submenu);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_menu_prepend(Gio.Menu menu, string label, string detailed_action);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_menu_prepend_item(Gio.Menu menu, Gio.MenuItem item);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_menu_prepend_section(Gio.Menu menu, string label, Gio.MenuModel section);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_menu_prepend_submenu(Gio.Menu menu, string label, Gio.MenuModel submenu);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_menu_remove(Gio.Menu menu, int position);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_menu_remove_all(Gio.Menu menu);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.MenuItem g_menu_item_new(string label, string detailed_action);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.MenuItem g_menu_item_new_from_model(Gio.MenuModel model, int item_index);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.MenuItem g_menu_item_new_section(string label, Gio.MenuModel section);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.MenuItem g_menu_item_new_submenu(string label, Gio.MenuModel submenu);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Variant g_menu_item_get_attribute_value(Gio.MenuItem menu_item, string attribute, GLib.VariantType expected_type);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.MenuModel g_menu_item_get_link(Gio.MenuItem menu_item, string link);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_menu_item_set_action_and_target_value(Gio.MenuItem menu_item, string action, GLib.Variant target_value);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_menu_item_set_attribute_value(Gio.MenuItem menu_item, string attribute, GLib.Variant value);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_menu_item_set_detailed_action(Gio.MenuItem menu_item, string detailed_action);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_menu_item_set_icon(Gio.MenuItem menu_item, Gio.Icon icon);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_menu_item_set_label(Gio.MenuItem menu_item, string label);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_menu_item_set_link(Gio.MenuItem menu_item, string link, Gio.MenuModel model);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_menu_item_set_section(Gio.MenuItem menu_item, Gio.MenuModel section);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_menu_item_set_submenu(Gio.MenuItem menu_item, Gio.MenuModel submenu);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_menu_attribute_iter_get_name(Gio.MenuAttributeIter iter);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_menu_attribute_iter_get_next(Gio.MenuAttributeIter iter, string out_name, out GLib.Variant value);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Variant g_menu_attribute_iter_get_value(Gio.MenuAttributeIter iter);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_menu_attribute_iter_next(Gio.MenuAttributeIter iter);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_menu_link_iter_get_name(Gio.MenuLinkIter iter);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_menu_link_iter_get_next(Gio.MenuLinkIter iter, string out_link, out Gio.MenuModel value);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.MenuModel g_menu_link_iter_get_value(Gio.MenuLinkIter iter);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_menu_link_iter_next(Gio.MenuLinkIter iter);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Volume g_volume_monitor_adopt_orphan_mount(Gio.Mount mount);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.VolumeMonitor g_volume_monitor_get();
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_volume_monitor_get_connected_drives(Gio.VolumeMonitor volume_monitor);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Mount g_volume_monitor_get_mount_for_uuid(Gio.VolumeMonitor volume_monitor, string uuid);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_volume_monitor_get_mounts(Gio.VolumeMonitor volume_monitor);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Volume g_volume_monitor_get_volume_for_uuid(Gio.VolumeMonitor volume_monitor, string uuid);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_volume_monitor_get_volumes(Gio.VolumeMonitor volume_monitor);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.NetworkAddress g_network_address_new(string hostname, ushort port);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.NetworkAddress g_network_address_new_loopback(ushort port);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.NetworkAddress g_network_address_parse(string host_and_port, ushort default_port, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.NetworkAddress g_network_address_parse_uri(string uri, ushort default_port, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_network_address_get_hostname(Gio.NetworkAddress addr);
		[DllImport("libgio-2.0.so.0")]
		public static extern ushort g_network_address_get_port(Gio.NetworkAddress addr);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_network_address_get_scheme(Gio.NetworkAddress addr);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.NetworkMonitor g_network_monitor_get_default();
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_network_monitor_can_reach(Gio.NetworkMonitor monitor, Gio.SocketConnectable connectable, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_network_monitor_can_reach_async(Gio.NetworkMonitor monitor, Gio.SocketConnectable connectable, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_network_monitor_can_reach_finish(Gio.NetworkMonitor monitor, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.NetworkConnectivity g_network_monitor_get_connectivity(Gio.NetworkMonitor monitor);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_network_monitor_get_network_available(Gio.NetworkMonitor monitor);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_network_monitor_get_network_metered(Gio.NetworkMonitor monitor);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.NetworkService g_network_service_new(string service, string protocol, string domain);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_network_service_get_domain(Gio.NetworkService srv);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_network_service_get_protocol(Gio.NetworkService srv);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_network_service_get_scheme(Gio.NetworkService srv);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_network_service_get_service(Gio.NetworkService srv);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_network_service_set_scheme(Gio.NetworkService srv, string scheme);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_permission_acquire(Gio.Permission permission, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_permission_acquire_async(Gio.Permission permission, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_permission_acquire_finish(Gio.Permission permission, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_permission_get_allowed(Gio.Permission permission);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_permission_get_can_acquire(Gio.Permission permission);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_permission_get_can_release(Gio.Permission permission);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_permission_impl_update(Gio.Permission permission, bool allowed, bool can_acquire, bool can_release);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_permission_release(Gio.Permission permission, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_permission_release_async(Gio.Permission permission, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_permission_release_finish(Gio.Permission permission, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.PropertyAction g_property_action_new(string name, GObject.Object @object, string property_name);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Proxy g_proxy_get_default_for_protocol(string protocol);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.IOStream g_proxy_connect(Gio.Proxy proxy, Gio.IOStream connection, Gio.ProxyAddress proxy_address, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_proxy_connect_async(Gio.Proxy proxy, Gio.IOStream connection, Gio.ProxyAddress proxy_address, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.IOStream g_proxy_connect_finish(Gio.Proxy proxy, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_proxy_supports_hostname(Gio.Proxy proxy);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketAddress g_proxy_address_new(Gio.InetAddress inetaddr, ushort port, string protocol, string dest_hostname, ushort dest_port, string username, string password);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_proxy_address_get_destination_hostname(Gio.ProxyAddress proxy);
		[DllImport("libgio-2.0.so.0")]
		public static extern ushort g_proxy_address_get_destination_port(Gio.ProxyAddress proxy);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_proxy_address_get_destination_protocol(Gio.ProxyAddress proxy);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_proxy_address_get_password(Gio.ProxyAddress proxy);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_proxy_address_get_protocol(Gio.ProxyAddress proxy);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_proxy_address_get_uri(Gio.ProxyAddress proxy);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_proxy_address_get_username(Gio.ProxyAddress proxy);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.ProxyResolver g_proxy_resolver_get_default();
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_proxy_resolver_is_supported(Gio.ProxyResolver resolver);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_proxy_resolver_lookup(Gio.ProxyResolver resolver, string uri, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_proxy_resolver_lookup_async(Gio.ProxyResolver resolver, string uri, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_proxy_resolver_lookup_finish(Gio.ProxyResolver resolver, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketAddress g_socket_address_enumerator_next(Gio.SocketAddressEnumerator enumerator, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_socket_address_enumerator_next_async(Gio.SocketAddressEnumerator enumerator, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketAddress g_socket_address_enumerator_next_finish(Gio.SocketAddressEnumerator enumerator, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_resolver_free_addresses(System.IntPtr addresses);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_resolver_free_targets(System.IntPtr targets);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Resolver g_resolver_get_default();
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_resolver_lookup_by_address(Gio.Resolver resolver, Gio.InetAddress address, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_resolver_lookup_by_address_async(Gio.Resolver resolver, Gio.InetAddress address, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_resolver_lookup_by_address_finish(Gio.Resolver resolver, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_resolver_lookup_by_name(Gio.Resolver resolver, string hostname, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_resolver_lookup_by_name_async(Gio.Resolver resolver, string hostname, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_resolver_lookup_by_name_finish(Gio.Resolver resolver, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_resolver_lookup_records(Gio.Resolver resolver, string rrname, Gio.ResolverRecordType record_type, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_resolver_lookup_records_async(Gio.Resolver resolver, string rrname, Gio.ResolverRecordType record_type, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_resolver_lookup_records_finish(Gio.Resolver resolver, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_resolver_lookup_service(Gio.Resolver resolver, string service, string protocol, string domain, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_resolver_lookup_service_async(Gio.Resolver resolver, string service, string protocol, string domain, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_resolver_lookup_service_finish(Gio.Resolver resolver, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_resolver_set_default(Gio.Resolver resolver);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SrvTarget g_srv_target_new(string hostname, ushort port, ushort priority, ushort weight);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SrvTarget g_srv_target_copy(Gio.SrvTarget target);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_srv_target_free(Gio.SrvTarget target);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_srv_target_get_hostname(Gio.SrvTarget target);
		[DllImport("libgio-2.0.so.0")]
		public static extern ushort g_srv_target_get_port(Gio.SrvTarget target);
		[DllImport("libgio-2.0.so.0")]
		public static extern ushort g_srv_target_get_priority(Gio.SrvTarget target);
		[DllImport("libgio-2.0.so.0")]
		public static extern ushort g_srv_target_get_weight(Gio.SrvTarget target);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_srv_target_list_sort(System.IntPtr targets);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_resolver_error_quark();
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Resource g_resource_new_from_data(GLib.Bytes data, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_resource_enumerate_children(Gio.Resource resource, string path, Gio.ResourceLookupFlags lookup_flags, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_resource_get_info(Gio.Resource resource, string path, Gio.ResourceLookupFlags lookup_flags, System.IntPtr size, System.IntPtr flags, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Bytes g_resource_lookup_data(Gio.Resource resource, string path, Gio.ResourceLookupFlags lookup_flags, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.InputStream g_resource_open_stream(Gio.Resource resource, string path, Gio.ResourceLookupFlags lookup_flags, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Resource g_resource_ref(Gio.Resource resource);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_resource_unref(Gio.Resource resource);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Resource g_resource_load(System.IntPtr filename, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_resource_error_quark();
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Settings g_settings_new(string schema_id);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Settings g_settings_new_full(Gio.SettingsSchema schema, Gio.SettingsBackend backend, string path);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Settings g_settings_new_with_backend(string schema_id, Gio.SettingsBackend backend);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Settings g_settings_new_with_backend_and_path(string schema_id, Gio.SettingsBackend backend, string path);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Settings g_settings_new_with_path(string schema_id, string path);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_settings_list_relocatable_schemas();
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_settings_list_schemas();
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_settings_sync();
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_settings_unbind(GObject.Object @object, string property);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_settings_apply(Gio.Settings settings);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_settings_bind(Gio.Settings settings, string key, GObject.Object @object, string property, Gio.SettingsBindFlags flags);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_settings_bind_with_mapping(Gio.Settings settings, string key, GObject.Object @object, string property, Gio.SettingsBindFlags flags, System.IntPtr get_mapping, System.IntPtr set_mapping, System.IntPtr user_data, System.IntPtr destroy);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_settings_bind_writable(Gio.Settings settings, string key, GObject.Object @object, string property, bool inverted);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Action g_settings_create_action(Gio.Settings settings, string key);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_settings_delay(Gio.Settings settings);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_settings_get_boolean(Gio.Settings settings, string key);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Settings g_settings_get_child(Gio.Settings settings, string name);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Variant g_settings_get_default_value(Gio.Settings settings, string key);
		[DllImport("libgio-2.0.so.0")]
		public static extern double g_settings_get_double(Gio.Settings settings, string key);
		[DllImport("libgio-2.0.so.0")]
		public static extern int g_settings_get_enum(Gio.Settings settings, string key);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_settings_get_flags(Gio.Settings settings, string key);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_settings_get_has_unapplied(Gio.Settings settings);
		[DllImport("libgio-2.0.so.0")]
		public static extern int g_settings_get_int(Gio.Settings settings, string key);
		[DllImport("libgio-2.0.so.0")]
		public static extern long g_settings_get_int64(Gio.Settings settings, string key);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_settings_get_mapped(Gio.Settings settings, string key, System.IntPtr mapping, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Variant g_settings_get_range(Gio.Settings settings, string key);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_settings_get_string(Gio.Settings settings, string key);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_settings_get_strv(Gio.Settings settings, string key);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_settings_get_uint(Gio.Settings settings, string key);
		[DllImport("libgio-2.0.so.0")]
		public static extern ulong g_settings_get_uint64(Gio.Settings settings, string key);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Variant g_settings_get_user_value(Gio.Settings settings, string key);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Variant g_settings_get_value(Gio.Settings settings, string key);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_settings_is_writable(Gio.Settings settings, string name);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_settings_list_children(Gio.Settings settings);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_settings_list_keys(Gio.Settings settings);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_settings_range_check(Gio.Settings settings, string key, GLib.Variant value);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_settings_reset(Gio.Settings settings, string key);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_settings_revert(Gio.Settings settings);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_settings_set_boolean(Gio.Settings settings, string key, bool value);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_settings_set_double(Gio.Settings settings, string key, double value);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_settings_set_enum(Gio.Settings settings, string key, int value);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_settings_set_flags(Gio.Settings settings, string key, uint value);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_settings_set_int(Gio.Settings settings, string key, int value);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_settings_set_int64(Gio.Settings settings, string key, long value);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_settings_set_string(Gio.Settings settings, string key, string value);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_settings_set_strv(Gio.Settings settings, string key, System.IntPtr value);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_settings_set_uint(Gio.Settings settings, string key, uint value);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_settings_set_uint64(Gio.Settings settings, string key, ulong value);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_settings_set_value(Gio.Settings settings, string key, GLib.Variant value);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_settings_schema_get_id(Gio.SettingsSchema schema);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SettingsSchemaKey g_settings_schema_get_key(Gio.SettingsSchema schema, string name);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_settings_schema_get_path(Gio.SettingsSchema schema);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_settings_schema_has_key(Gio.SettingsSchema schema, string name);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_settings_schema_list_children(Gio.SettingsSchema schema);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_settings_schema_list_keys(Gio.SettingsSchema schema);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SettingsSchema g_settings_schema_ref(Gio.SettingsSchema schema);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_settings_schema_unref(Gio.SettingsSchema schema);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_settings_backend_flatten_tree(GLib.Tree tree, string path, System.IntPtr keys, System.IntPtr values);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SettingsBackend g_settings_backend_get_default();
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_settings_backend_changed(Gio.SettingsBackend backend, string key, System.IntPtr origin_tag);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_settings_backend_changed_tree(Gio.SettingsBackend backend, GLib.Tree tree, System.IntPtr origin_tag);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_settings_backend_keys_changed(Gio.SettingsBackend backend, string path, System.IntPtr items, System.IntPtr origin_tag);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_settings_backend_path_changed(Gio.SettingsBackend backend, string path, System.IntPtr origin_tag);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_settings_backend_path_writable_changed(Gio.SettingsBackend backend, string path);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_settings_backend_writable_changed(Gio.SettingsBackend backend, string key);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Variant g_settings_schema_key_get_default_value(Gio.SettingsSchemaKey key);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_settings_schema_key_get_description(Gio.SettingsSchemaKey key);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_settings_schema_key_get_name(Gio.SettingsSchemaKey key);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Variant g_settings_schema_key_get_range(Gio.SettingsSchemaKey key);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_settings_schema_key_get_summary(Gio.SettingsSchemaKey key);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.VariantType g_settings_schema_key_get_value_type(Gio.SettingsSchemaKey key);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_settings_schema_key_range_check(Gio.SettingsSchemaKey key, GLib.Variant value);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SettingsSchemaKey g_settings_schema_key_ref(Gio.SettingsSchemaKey key);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_settings_schema_key_unref(Gio.SettingsSchemaKey key);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SettingsSchemaSource g_settings_schema_source_new_from_directory(System.IntPtr directory, Gio.SettingsSchemaSource parent, bool trusted, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_settings_schema_source_list_schemas(Gio.SettingsSchemaSource source, bool recursive, System.IntPtr non_relocatable, System.IntPtr relocatable);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SettingsSchema g_settings_schema_source_lookup(Gio.SettingsSchemaSource source, string schema_id, bool recursive);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SettingsSchemaSource g_settings_schema_source_ref(Gio.SettingsSchemaSource source);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_settings_schema_source_unref(Gio.SettingsSchemaSource source);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SettingsSchemaSource g_settings_schema_source_get_default();
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SimpleActionGroup g_simple_action_group_new();
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_simple_action_group_add_entries(Gio.SimpleActionGroup simple, System.IntPtr entries, int n_entries, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_simple_action_group_insert(Gio.SimpleActionGroup simple, Gio.Action action);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Action g_simple_action_group_lookup(Gio.SimpleActionGroup simple, string action_name);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_simple_action_group_remove(Gio.SimpleActionGroup simple, string action_name);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SimpleAsyncResult g_simple_async_result_new(GObject.Object source_object, System.IntPtr callback, System.IntPtr user_data, System.IntPtr source_tag);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SimpleAsyncResult g_simple_async_result_new_from_error(GObject.Object source_object, System.IntPtr callback, System.IntPtr user_data, GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SimpleAsyncResult g_simple_async_result_new_take_error(GObject.Object source_object, System.IntPtr callback, System.IntPtr user_data, GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_simple_async_result_is_valid(Gio.AsyncResult result, GObject.Object source, System.IntPtr source_tag);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_simple_async_result_complete(Gio.SimpleAsyncResult simple);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_simple_async_result_complete_in_idle(Gio.SimpleAsyncResult simple);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_simple_async_result_get_op_res_gboolean(Gio.SimpleAsyncResult simple);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_simple_async_result_get_op_res_gpointer(Gio.SimpleAsyncResult simple);
		[DllImport("libgio-2.0.so.0")]
		public static extern long g_simple_async_result_get_op_res_gssize(Gio.SimpleAsyncResult simple);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_simple_async_result_get_source_tag(Gio.SimpleAsyncResult simple);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_simple_async_result_propagate_error(Gio.SimpleAsyncResult simple, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_simple_async_result_run_in_thread(Gio.SimpleAsyncResult simple, System.IntPtr func, int io_priority, Gio.Cancellable cancellable);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_simple_async_result_set_check_cancellable(Gio.SimpleAsyncResult simple, Gio.Cancellable check_cancellable);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_simple_async_result_set_from_error(Gio.SimpleAsyncResult simple, GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_simple_async_result_set_handle_cancellation(Gio.SimpleAsyncResult simple, bool handle_cancellation);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_simple_async_result_set_op_res_gboolean(Gio.SimpleAsyncResult simple, bool op_res);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_simple_async_result_set_op_res_gpointer(Gio.SimpleAsyncResult simple, System.IntPtr op_res, System.IntPtr destroy_op_res);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_simple_async_result_set_op_res_gssize(Gio.SimpleAsyncResult simple, long op_res);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_simple_async_result_take_error(Gio.SimpleAsyncResult simple, GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.IOStream g_simple_io_stream_new(Gio.InputStream input_stream, Gio.OutputStream output_stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Permission g_simple_permission_new(bool allowed);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.ProxyResolver g_simple_proxy_resolver_new(string default_proxy, string ignore_hosts);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_simple_proxy_resolver_set_default_proxy(Gio.SimpleProxyResolver resolver, string default_proxy);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_simple_proxy_resolver_set_ignore_hosts(Gio.SimpleProxyResolver resolver, string ignore_hosts);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_simple_proxy_resolver_set_uri_proxy(Gio.SimpleProxyResolver resolver, string uri_scheme, string proxy);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Socket g_socket_new(Gio.SocketFamily family, Gio.SocketType type, Gio.SocketProtocol protocol, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Socket g_socket_new_from_fd(int fd, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Socket g_socket_accept(Gio.Socket socket, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_socket_bind(Gio.Socket socket, Gio.SocketAddress address, bool allow_reuse, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_socket_check_connect_result(Gio.Socket socket, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_socket_close(Gio.Socket socket, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.IOCondition g_socket_condition_check(Gio.Socket socket, GLib.IOCondition condition);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_socket_condition_timed_wait(Gio.Socket socket, GLib.IOCondition condition, long timeout, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_socket_condition_wait(Gio.Socket socket, GLib.IOCondition condition, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_socket_connect(Gio.Socket socket, Gio.SocketAddress address, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketConnection g_socket_connection_factory_create_connection(Gio.Socket socket);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.Source g_socket_create_source(Gio.Socket socket, GLib.IOCondition condition, Gio.Cancellable cancellable);
		[DllImport("libgio-2.0.so.0")]
		public static extern long g_socket_get_available_bytes(Gio.Socket socket);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_socket_get_blocking(Gio.Socket socket);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_socket_get_broadcast(Gio.Socket socket);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Credentials g_socket_get_credentials(Gio.Socket socket, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketFamily g_socket_get_family(Gio.Socket socket);
		[DllImport("libgio-2.0.so.0")]
		public static extern int g_socket_get_fd(Gio.Socket socket);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_socket_get_keepalive(Gio.Socket socket);
		[DllImport("libgio-2.0.so.0")]
		public static extern int g_socket_get_listen_backlog(Gio.Socket socket);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketAddress g_socket_get_local_address(Gio.Socket socket, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_socket_get_multicast_loopback(Gio.Socket socket);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_socket_get_multicast_ttl(Gio.Socket socket);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_socket_get_option(Gio.Socket socket, int level, int optname, System.IntPtr value, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketProtocol g_socket_get_protocol(Gio.Socket socket);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketAddress g_socket_get_remote_address(Gio.Socket socket, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketType g_socket_get_socket_type(Gio.Socket socket);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_socket_get_timeout(Gio.Socket socket);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_socket_get_ttl(Gio.Socket socket);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_socket_is_closed(Gio.Socket socket);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_socket_is_connected(Gio.Socket socket);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_socket_join_multicast_group(Gio.Socket socket, Gio.InetAddress group, bool source_specific, string iface, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_socket_leave_multicast_group(Gio.Socket socket, Gio.InetAddress group, bool source_specific, string iface, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_socket_listen(Gio.Socket socket, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern long g_socket_receive(Gio.Socket socket, System.IntPtr buffer, ulong size, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern long g_socket_receive_from(Gio.Socket socket, out Gio.SocketAddress address, System.IntPtr buffer, ulong size, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern long g_socket_receive_message(Gio.Socket socket, out Gio.SocketAddress address, System.IntPtr vectors, int num_vectors, System.IntPtr messages, System.IntPtr num_messages, System.IntPtr flags, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern int g_socket_receive_messages(Gio.Socket socket, System.IntPtr messages, uint num_messages, int flags, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern long g_socket_receive_with_blocking(Gio.Socket socket, System.IntPtr buffer, ulong size, bool blocking, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern long g_socket_send(Gio.Socket socket, System.IntPtr buffer, ulong size, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern long g_socket_send_message(Gio.Socket socket, Gio.SocketAddress address, System.IntPtr vectors, int num_vectors, System.IntPtr messages, int num_messages, int flags, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern int g_socket_send_messages(Gio.Socket socket, System.IntPtr messages, uint num_messages, int flags, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern long g_socket_send_to(Gio.Socket socket, Gio.SocketAddress address, System.IntPtr buffer, ulong size, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern long g_socket_send_with_blocking(Gio.Socket socket, System.IntPtr buffer, ulong size, bool blocking, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_socket_set_blocking(Gio.Socket socket, bool blocking);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_socket_set_broadcast(Gio.Socket socket, bool broadcast);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_socket_set_keepalive(Gio.Socket socket, bool keepalive);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_socket_set_listen_backlog(Gio.Socket socket, int backlog);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_socket_set_multicast_loopback(Gio.Socket socket, bool loopback);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_socket_set_multicast_ttl(Gio.Socket socket, uint ttl);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_socket_set_option(Gio.Socket socket, int level, int optname, int value, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_socket_set_timeout(Gio.Socket socket, uint timeout);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_socket_set_ttl(Gio.Socket socket, uint ttl);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_socket_shutdown(Gio.Socket socket, bool shutdown_read, bool shutdown_write, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_socket_speaks_ipv4(Gio.Socket socket);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.GType g_socket_connection_factory_lookup_type(Gio.SocketFamily family, Gio.SocketType type, int protocol_id);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_socket_connection_factory_register_type(GLib.GType g_type, Gio.SocketFamily family, Gio.SocketType type, int protocol);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_socket_connection_connect(Gio.SocketConnection connection, Gio.SocketAddress address, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_socket_connection_connect_async(Gio.SocketConnection connection, Gio.SocketAddress address, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_socket_connection_connect_finish(Gio.SocketConnection connection, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketAddress g_socket_connection_get_local_address(Gio.SocketConnection connection, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketAddress g_socket_connection_get_remote_address(Gio.SocketConnection connection, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Socket g_socket_connection_get_socket(Gio.SocketConnection connection);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_socket_connection_is_connected(Gio.SocketConnection connection);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketClient g_socket_client_new();
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_socket_client_add_application_proxy(Gio.SocketClient client, string protocol);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketConnection g_socket_client_connect(Gio.SocketClient client, Gio.SocketConnectable connectable, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_socket_client_connect_async(Gio.SocketClient client, Gio.SocketConnectable connectable, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketConnection g_socket_client_connect_finish(Gio.SocketClient client, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketConnection g_socket_client_connect_to_host(Gio.SocketClient client, string host_and_port, ushort default_port, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_socket_client_connect_to_host_async(Gio.SocketClient client, string host_and_port, ushort default_port, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketConnection g_socket_client_connect_to_host_finish(Gio.SocketClient client, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketConnection g_socket_client_connect_to_service(Gio.SocketClient client, string domain, string service, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_socket_client_connect_to_service_async(Gio.SocketClient client, string domain, string service, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketConnection g_socket_client_connect_to_service_finish(Gio.SocketClient client, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketConnection g_socket_client_connect_to_uri(Gio.SocketClient client, string uri, ushort default_port, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_socket_client_connect_to_uri_async(Gio.SocketClient client, string uri, ushort default_port, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketConnection g_socket_client_connect_to_uri_finish(Gio.SocketClient client, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_socket_client_get_enable_proxy(Gio.SocketClient client);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketFamily g_socket_client_get_family(Gio.SocketClient client);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketAddress g_socket_client_get_local_address(Gio.SocketClient client);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketProtocol g_socket_client_get_protocol(Gio.SocketClient client);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.ProxyResolver g_socket_client_get_proxy_resolver(Gio.SocketClient client);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketType g_socket_client_get_socket_type(Gio.SocketClient client);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_socket_client_get_timeout(Gio.SocketClient client);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_socket_client_get_tls(Gio.SocketClient client);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsCertificateFlags g_socket_client_get_tls_validation_flags(Gio.SocketClient client);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_socket_client_set_enable_proxy(Gio.SocketClient client, bool enable);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_socket_client_set_family(Gio.SocketClient client, Gio.SocketFamily family);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_socket_client_set_local_address(Gio.SocketClient client, Gio.SocketAddress address);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_socket_client_set_protocol(Gio.SocketClient client, Gio.SocketProtocol protocol);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_socket_client_set_proxy_resolver(Gio.SocketClient client, Gio.ProxyResolver proxy_resolver);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_socket_client_set_socket_type(Gio.SocketClient client, Gio.SocketType type);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_socket_client_set_timeout(Gio.SocketClient client, uint timeout);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_socket_client_set_tls(Gio.SocketClient client, bool tls);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_socket_client_set_tls_validation_flags(Gio.SocketClient client, Gio.TlsCertificateFlags flags);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketListener g_socket_listener_new();
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketConnection g_socket_listener_accept(Gio.SocketListener listener, out GObject.Object source_object, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_socket_listener_accept_async(Gio.SocketListener listener, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketConnection g_socket_listener_accept_finish(Gio.SocketListener listener, Gio.AsyncResult result, out GObject.Object source_object, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Socket g_socket_listener_accept_socket(Gio.SocketListener listener, out GObject.Object source_object, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_socket_listener_accept_socket_async(Gio.SocketListener listener, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Socket g_socket_listener_accept_socket_finish(Gio.SocketListener listener, Gio.AsyncResult result, out GObject.Object source_object, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_socket_listener_add_address(Gio.SocketListener listener, Gio.SocketAddress address, Gio.SocketType type, Gio.SocketProtocol protocol, GObject.Object source_object, out Gio.SocketAddress effective_address, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern ushort g_socket_listener_add_any_inet_port(Gio.SocketListener listener, GObject.Object source_object, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_socket_listener_add_inet_port(Gio.SocketListener listener, ushort port, GObject.Object source_object, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_socket_listener_add_socket(Gio.SocketListener listener, Gio.Socket socket, GObject.Object source_object, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_socket_listener_close(Gio.SocketListener listener);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_socket_listener_set_backlog(Gio.SocketListener listener, int listen_backlog);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketService g_socket_service_new();
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_socket_service_is_active(Gio.SocketService service);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_socket_service_start(Gio.SocketService service);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_socket_service_stop(Gio.SocketService service);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_static_resource_fini(Gio.StaticResource static_resource);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Resource g_static_resource_get_resource(Gio.StaticResource static_resource);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_static_resource_init(Gio.StaticResource static_resource);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Subprocess g_subprocess_newv(System.IntPtr argv, Gio.SubprocessFlags flags, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_subprocess_communicate(Gio.Subprocess subprocess, GLib.Bytes stdin_buf, Gio.Cancellable cancellable, out GLib.Bytes stdout_buf, out GLib.Bytes stderr_buf, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_subprocess_communicate_async(Gio.Subprocess subprocess, GLib.Bytes stdin_buf, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_subprocess_communicate_finish(Gio.Subprocess subprocess, Gio.AsyncResult result, out GLib.Bytes stdout_buf, out GLib.Bytes stderr_buf, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_subprocess_communicate_utf8(Gio.Subprocess subprocess, string stdin_buf, Gio.Cancellable cancellable, string stdout_buf, string stderr_buf, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_subprocess_communicate_utf8_async(Gio.Subprocess subprocess, string stdin_buf, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_subprocess_communicate_utf8_finish(Gio.Subprocess subprocess, Gio.AsyncResult result, string stdout_buf, string stderr_buf, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_subprocess_force_exit(Gio.Subprocess subprocess);
		[DllImport("libgio-2.0.so.0")]
		public static extern int g_subprocess_get_exit_status(Gio.Subprocess subprocess);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_subprocess_get_identifier(Gio.Subprocess subprocess);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_subprocess_get_if_exited(Gio.Subprocess subprocess);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_subprocess_get_if_signaled(Gio.Subprocess subprocess);
		[DllImport("libgio-2.0.so.0")]
		public static extern int g_subprocess_get_status(Gio.Subprocess subprocess);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.InputStream g_subprocess_get_stderr_pipe(Gio.Subprocess subprocess);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.OutputStream g_subprocess_get_stdin_pipe(Gio.Subprocess subprocess);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.InputStream g_subprocess_get_stdout_pipe(Gio.Subprocess subprocess);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_subprocess_get_successful(Gio.Subprocess subprocess);
		[DllImport("libgio-2.0.so.0")]
		public static extern int g_subprocess_get_term_sig(Gio.Subprocess subprocess);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_subprocess_send_signal(Gio.Subprocess subprocess, int signal_num);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_subprocess_wait(Gio.Subprocess subprocess, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_subprocess_wait_async(Gio.Subprocess subprocess, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_subprocess_wait_check(Gio.Subprocess subprocess, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_subprocess_wait_check_async(Gio.Subprocess subprocess, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_subprocess_wait_check_finish(Gio.Subprocess subprocess, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_subprocess_wait_finish(Gio.Subprocess subprocess, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SubprocessLauncher g_subprocess_launcher_new(Gio.SubprocessFlags flags);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_subprocess_launcher_getenv(Gio.SubprocessLauncher self, string variable);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_subprocess_launcher_set_child_setup(Gio.SubprocessLauncher self, System.IntPtr child_setup, System.IntPtr user_data, System.IntPtr destroy_notify);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_subprocess_launcher_set_cwd(Gio.SubprocessLauncher self, System.IntPtr cwd);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_subprocess_launcher_set_environ(Gio.SubprocessLauncher self, System.IntPtr env);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_subprocess_launcher_set_flags(Gio.SubprocessLauncher self, Gio.SubprocessFlags flags);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_subprocess_launcher_set_stderr_file_path(Gio.SubprocessLauncher self, System.IntPtr path);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_subprocess_launcher_set_stdin_file_path(Gio.SubprocessLauncher self, string path);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_subprocess_launcher_set_stdout_file_path(Gio.SubprocessLauncher self, System.IntPtr path);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_subprocess_launcher_setenv(Gio.SubprocessLauncher self, string variable, string value, bool overwrite);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Subprocess g_subprocess_launcher_spawnv(Gio.SubprocessLauncher self, System.IntPtr argv, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_subprocess_launcher_take_fd(Gio.SubprocessLauncher self, int source_fd, int target_fd);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_subprocess_launcher_take_stderr_fd(Gio.SubprocessLauncher self, int fd);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_subprocess_launcher_take_stdin_fd(Gio.SubprocessLauncher self, int fd);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_subprocess_launcher_take_stdout_fd(Gio.SubprocessLauncher self, int fd);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_subprocess_launcher_unsetenv(Gio.SubprocessLauncher self, string variable);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Task g_task_new(GObject.Object source_object, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr callback_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_task_is_valid(Gio.AsyncResult result, GObject.Object source_object);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_task_report_error(GObject.Object source_object, System.IntPtr callback, System.IntPtr callback_data, System.IntPtr source_tag, GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_task_attach_source(Gio.Task task, GLib.Source source, System.IntPtr callback);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Cancellable g_task_get_cancellable(Gio.Task task);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_task_get_check_cancellable(Gio.Task task);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_task_get_completed(Gio.Task task);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.MainContext g_task_get_context(Gio.Task task);
		[DllImport("libgio-2.0.so.0")]
		public static extern int g_task_get_priority(Gio.Task task);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_task_get_return_on_cancel(Gio.Task task);
		[DllImport("libgio-2.0.so.0")]
		public static extern GObject.Object g_task_get_source_object(Gio.Task task);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_task_get_source_tag(Gio.Task task);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_task_get_task_data(Gio.Task task);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_task_had_error(Gio.Task task);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_task_propagate_boolean(Gio.Task task, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern long g_task_propagate_int(Gio.Task task, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_task_propagate_pointer(Gio.Task task, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_task_return_boolean(Gio.Task task, bool result);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_task_return_error(Gio.Task task, GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_task_return_error_if_cancelled(Gio.Task task);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_task_return_int(Gio.Task task, long result);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_task_return_pointer(Gio.Task task, System.IntPtr result, System.IntPtr result_destroy);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_task_run_in_thread(Gio.Task task, System.IntPtr task_func);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_task_run_in_thread_sync(Gio.Task task, System.IntPtr task_func);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_task_set_check_cancellable(Gio.Task task, bool check_cancellable);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_task_set_priority(Gio.Task task, int priority);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_task_set_return_on_cancel(Gio.Task task, bool return_on_cancel);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_task_set_source_tag(Gio.Task task, System.IntPtr source_tag);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_task_set_task_data(Gio.Task task, System.IntPtr task_data, System.IntPtr task_data_destroy);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_tcp_connection_get_graceful_disconnect(Gio.TcpConnection connection);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_tcp_connection_set_graceful_disconnect(Gio.TcpConnection connection, bool graceful_disconnect);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketConnection g_tcp_wrapper_connection_new(Gio.IOStream base_io_stream, Gio.Socket socket);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.IOStream g_tcp_wrapper_connection_get_base_io_stream(Gio.TcpWrapperConnection conn);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TestDBus g_test_dbus_new(Gio.TestDBusFlags flags);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_test_dbus_unset();
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_test_dbus_add_service_dir(Gio.TestDBus self, string path);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_test_dbus_down(Gio.TestDBus self);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_test_dbus_get_bus_address(Gio.TestDBus self);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TestDBusFlags g_test_dbus_get_flags(Gio.TestDBus self);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_test_dbus_stop(Gio.TestDBus self);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_test_dbus_up(Gio.TestDBus self);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.ThemedIcon g_themed_icon_new(string iconname);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.ThemedIcon g_themed_icon_new_from_names(System.IntPtr iconnames, int len);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.ThemedIcon g_themed_icon_new_with_default_fallbacks(string iconname);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_themed_icon_append_name(Gio.ThemedIcon icon, string iconname);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_themed_icon_get_names(Gio.ThemedIcon icon);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_themed_icon_prepend_name(Gio.ThemedIcon icon, string iconname);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketService g_threaded_socket_service_new(int max_threads);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsBackend g_tls_backend_get_default();
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.GType g_tls_backend_get_certificate_type(Gio.TlsBackend backend);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.GType g_tls_backend_get_client_connection_type(Gio.TlsBackend backend);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsDatabase g_tls_backend_get_default_database(Gio.TlsBackend backend);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.GType g_tls_backend_get_dtls_client_connection_type(Gio.TlsBackend backend);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.GType g_tls_backend_get_dtls_server_connection_type(Gio.TlsBackend backend);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.GType g_tls_backend_get_file_database_type(Gio.TlsBackend backend);
		[DllImport("libgio-2.0.so.0")]
		public static extern GLib.GType g_tls_backend_get_server_connection_type(Gio.TlsBackend backend);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_tls_backend_supports_dtls(Gio.TlsBackend backend);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_tls_backend_supports_tls(Gio.TlsBackend backend);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_tls_connection_emit_accept_certificate(Gio.TlsConnection conn, Gio.TlsCertificate peer_cert, Gio.TlsCertificateFlags errors);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsCertificate g_tls_connection_get_certificate(Gio.TlsConnection conn);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsDatabase g_tls_connection_get_database(Gio.TlsConnection conn);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsInteraction g_tls_connection_get_interaction(Gio.TlsConnection conn);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsCertificate g_tls_connection_get_peer_certificate(Gio.TlsConnection conn);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsCertificateFlags g_tls_connection_get_peer_certificate_errors(Gio.TlsConnection conn);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsRehandshakeMode g_tls_connection_get_rehandshake_mode(Gio.TlsConnection conn);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_tls_connection_get_require_close_notify(Gio.TlsConnection conn);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_tls_connection_get_use_system_certdb(Gio.TlsConnection conn);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_tls_connection_handshake(Gio.TlsConnection conn, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_tls_connection_handshake_async(Gio.TlsConnection conn, int io_priority, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_tls_connection_handshake_finish(Gio.TlsConnection conn, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_tls_connection_set_certificate(Gio.TlsConnection conn, Gio.TlsCertificate certificate);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_tls_connection_set_database(Gio.TlsConnection conn, Gio.TlsDatabase database);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_tls_connection_set_interaction(Gio.TlsConnection conn, Gio.TlsInteraction interaction);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_tls_connection_set_rehandshake_mode(Gio.TlsConnection conn, Gio.TlsRehandshakeMode mode);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_tls_connection_set_require_close_notify(Gio.TlsConnection conn, bool require_close_notify);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_tls_connection_set_use_system_certdb(Gio.TlsConnection conn, bool use_system_certdb);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsClientConnection g_tls_client_connection_new(Gio.IOStream base_io_stream, Gio.SocketConnectable server_identity, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_tls_client_connection_copy_session_state(Gio.TlsClientConnection conn, Gio.TlsClientConnection source);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_tls_client_connection_get_accepted_cas(Gio.TlsClientConnection conn);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketConnectable g_tls_client_connection_get_server_identity(Gio.TlsClientConnection conn);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_tls_client_connection_get_use_ssl3(Gio.TlsClientConnection conn);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsCertificateFlags g_tls_client_connection_get_validation_flags(Gio.TlsClientConnection conn);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_tls_client_connection_set_server_identity(Gio.TlsClientConnection conn, Gio.SocketConnectable identity);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_tls_client_connection_set_use_ssl3(Gio.TlsClientConnection conn, bool use_ssl3);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_tls_client_connection_set_validation_flags(Gio.TlsClientConnection conn, Gio.TlsCertificateFlags flags);
		[DllImport("libgio-2.0.so.0")]
		public static extern uint g_tls_error_quark();
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsFileDatabase g_tls_file_database_new(System.IntPtr anchors, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsPassword g_tls_password_new(Gio.TlsPasswordFlags flags, string description);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_tls_password_get_description(Gio.TlsPassword password);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsPasswordFlags g_tls_password_get_flags(Gio.TlsPassword password);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_tls_password_get_value(Gio.TlsPassword password, System.IntPtr length);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_tls_password_get_warning(Gio.TlsPassword password);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_tls_password_set_description(Gio.TlsPassword password, string description);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_tls_password_set_flags(Gio.TlsPassword password, Gio.TlsPasswordFlags flags);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_tls_password_set_value(Gio.TlsPassword password, System.IntPtr value, long length);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_tls_password_set_value_full(Gio.TlsPassword password, System.IntPtr value, long length, System.IntPtr destroy);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_tls_password_set_warning(Gio.TlsPassword password, string warning);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.TlsServerConnection g_tls_server_connection_new(Gio.IOStream base_io_stream, Gio.TlsCertificate certificate, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Credentials g_unix_connection_receive_credentials(Gio.UnixConnection connection, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_unix_connection_receive_credentials_async(Gio.UnixConnection connection, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Credentials g_unix_connection_receive_credentials_finish(Gio.UnixConnection connection, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern int g_unix_connection_receive_fd(Gio.UnixConnection connection, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_unix_connection_send_credentials(Gio.UnixConnection connection, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_unix_connection_send_credentials_async(Gio.UnixConnection connection, Gio.Cancellable cancellable, System.IntPtr callback, System.IntPtr user_data);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_unix_connection_send_credentials_finish(Gio.UnixConnection connection, Gio.AsyncResult result, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_unix_connection_send_fd(Gio.UnixConnection connection, int fd, Gio.Cancellable cancellable, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketControlMessage g_unix_credentials_message_new();
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketControlMessage g_unix_credentials_message_new_with_credentials(Gio.Credentials credentials);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_unix_credentials_message_is_supported();
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Credentials g_unix_credentials_message_get_credentials(Gio.UnixCredentialsMessage message);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketControlMessage g_unix_fd_message_new();
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketControlMessage g_unix_fd_message_new_with_fd_list(Gio.UnixFDList fd_list);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_unix_fd_message_append_fd(Gio.UnixFDMessage message, int fd, out GLib.Error error);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.UnixFDList g_unix_fd_message_get_fd_list(Gio.UnixFDMessage message);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_unix_fd_message_steal_fds(Gio.UnixFDMessage message, System.IntPtr length);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.InputStream g_unix_input_stream_new(int fd, bool close_fd);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_unix_input_stream_get_close_fd(Gio.UnixInputStream stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern int g_unix_input_stream_get_fd(Gio.UnixInputStream stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_unix_input_stream_set_close_fd(Gio.UnixInputStream stream, bool close_fd);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.UnixMountMonitor g_unix_mount_monitor_new();
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.UnixMountMonitor g_unix_mount_monitor_get();
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_unix_mount_monitor_set_rate_limit(Gio.UnixMountMonitor mount_monitor, int limit_msec);
		[DllImport("libgio-2.0.so.0")]
		public static extern int g_unix_mount_point_compare(Gio.UnixMountPoint mount1, Gio.UnixMountPoint mount2);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.UnixMountPoint g_unix_mount_point_copy(Gio.UnixMountPoint mount_point);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_unix_mount_point_free(Gio.UnixMountPoint mount_point);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_unix_mount_point_get_device_path(Gio.UnixMountPoint mount_point);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_unix_mount_point_get_fs_type(Gio.UnixMountPoint mount_point);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_unix_mount_point_get_mount_path(Gio.UnixMountPoint mount_point);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_unix_mount_point_get_options(Gio.UnixMountPoint mount_point);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_unix_mount_point_guess_can_eject(Gio.UnixMountPoint mount_point);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Icon g_unix_mount_point_guess_icon(Gio.UnixMountPoint mount_point);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_unix_mount_point_guess_name(Gio.UnixMountPoint mount_point);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Icon g_unix_mount_point_guess_symbolic_icon(Gio.UnixMountPoint mount_point);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_unix_mount_point_is_loopback(Gio.UnixMountPoint mount_point);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_unix_mount_point_is_readonly(Gio.UnixMountPoint mount_point);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_unix_mount_point_is_user_mountable(Gio.UnixMountPoint mount_point);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.OutputStream g_unix_output_stream_new(int fd, bool close_fd);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_unix_output_stream_get_close_fd(Gio.UnixOutputStream stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern int g_unix_output_stream_get_fd(Gio.UnixOutputStream stream);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_unix_output_stream_set_close_fd(Gio.UnixOutputStream stream, bool close_fd);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketAddress g_unix_socket_address_new(string path);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketAddress g_unix_socket_address_new_abstract(System.IntPtr path, int path_len);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.SocketAddress g_unix_socket_address_new_with_type(System.IntPtr path, int path_len, Gio.UnixSocketAddressType type);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_unix_socket_address_abstract_names_supported();
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.UnixSocketAddressType g_unix_socket_address_get_address_type(Gio.UnixSocketAddress address);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_unix_socket_address_get_is_abstract(Gio.UnixSocketAddress address);
		[DllImport("libgio-2.0.so.0")]
		public static extern string g_unix_socket_address_get_path(Gio.UnixSocketAddress address);
		[DllImport("libgio-2.0.so.0")]
		public static extern ulong g_unix_socket_address_get_path_len(Gio.UnixSocketAddress address);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Vfs g_vfs_get_default();
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.Vfs g_vfs_get_local();
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.File g_vfs_get_file_for_path(Gio.Vfs vfs, string path);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.File g_vfs_get_file_for_uri(Gio.Vfs vfs, string uri);
		[DllImport("libgio-2.0.so.0")]
		public static extern System.IntPtr g_vfs_get_supported_uri_schemes(Gio.Vfs vfs);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_vfs_is_active(Gio.Vfs vfs);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.File g_vfs_parse_name(Gio.Vfs vfs, string parse_name);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_vfs_register_uri_scheme(Gio.Vfs vfs, string scheme, System.IntPtr uri_func, System.IntPtr uri_data, System.IntPtr uri_destroy, System.IntPtr parse_name_func, System.IntPtr parse_name_data, System.IntPtr parse_name_destroy);
		[DllImport("libgio-2.0.so.0")]
		public static extern bool g_vfs_unregister_uri_scheme(Gio.Vfs vfs, string scheme);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.ZlibCompressor g_zlib_compressor_new(Gio.ZlibCompressorFormat format, int level);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileInfo g_zlib_compressor_get_file_info(Gio.ZlibCompressor compressor);
		[DllImport("libgio-2.0.so.0")]
		public static extern void g_zlib_compressor_set_file_info(Gio.ZlibCompressor compressor, Gio.FileInfo file_info);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.ZlibDecompressor g_zlib_decompressor_new(Gio.ZlibCompressorFormat format);
		[DllImport("libgio-2.0.so.0")]
		public static extern Gio.FileInfo g_zlib_decompressor_get_file_info(Gio.ZlibDecompressor decompressor);
	}
}
